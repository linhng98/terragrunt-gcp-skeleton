---
# Source: karmada-system/templates/resourcequota.yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: karmada-critical-pods
  namespace: karmada-system
spec:
  hard:
    pods: 1G
  scopeSelector:
    matchExpressions:
    - operator: In
      scopeName: PriorityClass
      values:
      - system-node-critical
      - system-cluster-critical
---
# Source: karmada-system/charts/karmada/templates/karmada-controller-manager.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karmada-system-controller-manager
  namespace: karmada-system
---
# Source: karmada-system/charts/karmada/templates/karmada-scheduler.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karmada-system-scheduler
  namespace: karmada-system
---
# Source: karmada-system/charts/karmada/templates/karmada-webhook.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karmada-system-webhook
  namespace: karmada-system
---
# Source: karmada-system/charts/karmada/templates/kube-controller-manager.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karmada-system-kube-controller-manager
  namespace: karmada-system
---
# Source: karmada-system/charts/karmada/templates/karmada-controller-manager.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: karmada-system-controller-manager
rules:
  - apiGroups: ['*']
    resources: ['*']
    verbs: ["get", "watch", "list", "create", "patch", "update", "delete"]
  - nonResourceURLs: ['*']
    verbs: ["get"]
---
# Source: karmada-system/charts/karmada/templates/karmada-controller-manager.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: karmada-system-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karmada-system-controller-manager
subjects:
  - kind: ServiceAccount
    name: karmada-system-controller-manager
    namespace: karmada-system
---
# Source: karmada-system/charts/karmada/templates/etcd.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: etcd
  name: etcd-client
  namespace: karmada-system
spec:
  ports:
    - name: etcd-client-port
      port: 2379
      protocol: TCP
      targetPort: 2379
  selector:
    app: etcd
---
# Source: karmada-system/charts/karmada/templates/etcd.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: etcd
  name: etcd
  namespace: karmada-system
spec:
  ports:
    - name: client
      port: 2379
      protocol: TCP
      targetPort: 2379
    - name: server
      port: 2380
      protocol: TCP
      targetPort: 2380
  clusterIP: None
  selector:
    app: etcd
---
# Source: karmada-system/charts/karmada/templates/karmada-aggregated-apiserver.yaml
apiVersion: v1
kind: Service
metadata:
  name: karmada-system-aggregated-apiserver
  namespace: karmada-system
  labels:
    
    app: karmada-aggregated-apiserver
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 443
  selector:
    
    app: karmada-aggregated-apiserver
---
# Source: karmada-system/charts/karmada/templates/karmada-apiserver.yaml
apiVersion: v1
kind: Service
metadata:
  name: karmada-system-apiserver
  namespace: karmada-system
  labels:
    
    app: karmada-apiserver
spec:
  type: ClusterIP
  ports:
    - name: karmada-system-apiserver
      port: 5443
      protocol: TCP
      targetPort: 5443
  selector:
    
    app: karmada-apiserver
---
# Source: karmada-system/charts/karmada/templates/karmada-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  name: karmada-system-webhook
  namespace: karmada-system
spec:
  selector:
        
        app: karmada-webhook
  ports:
    - port: 443
      targetPort: 8443
---
# Source: karmada-system/charts/karmada/templates/karmada-aggregated-apiserver.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karmada-system-aggregated-apiserver
  namespace: karmada-system
  labels:
    
    app: karmada-aggregated-apiserver
spec:
  selector:
    matchLabels:
      
      app: karmada-aggregated-apiserver
  replicas: 1
  strategy:
        rollingUpdate:
          maxSurge: 50%
          maxUnavailable: 0
        type: RollingUpdate
  template:
    metadata:
      labels:
        
        app: karmada-aggregated-apiserver
        
    spec:
      
      automountServiceAccountToken: false
      containers:
        - name: karmada-system-aggregated-apiserver
          image: swr.ap-southeast-1.myhuaweicloud.com/karmada/karmada-aggregated-apiserver:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: kubeconfig-secret
              subPath: kubeconfig
              mountPath: /etc/kubeconfig
            - name: etcd-cert
              mountPath: /etc/etcd/pki
              readOnly: true
            - name: apiserver-cert
              mountPath: /etc/kubernetes/pki
              readOnly: true
          command:
            - /bin/karmada-aggregated-apiserver
            - --kubeconfig=/etc/kubeconfig
            - --authentication-kubeconfig=/etc/kubeconfig
            - --authorization-kubeconfig=/etc/kubeconfig
            - --etcd-cafile=/etc/etcd/pki/server-ca.crt
            - --etcd-certfile=/etc/etcd/pki/karmada.crt
            - --etcd-keyfile=/etc/etcd/pki/karmada.key
            - --etcd-servers=https://etcd-client.karmada-system.svc.cluster.local:2379
            - --tls-cert-file=/etc/kubernetes/pki/karmada.crt
            - --tls-private-key-file=/etc/kubernetes/pki/karmada.key
            - --audit-log-path=-
            - --feature-gates=APIPriorityAndFairness=false
            - --audit-log-maxage=0
            - --audit-log-maxbackup=0
          resources:
            requests:
              cpu: 100m
          readinessProbe:
            httpGet:
              path: /readyz
              port: 443
              scheme: HTTPS
            initialDelaySeconds: 1
            periodSeconds: 3
            timeoutSeconds: 15
      volumes:
        - name: kubeconfig-secret
          secret:
            secretName: karmada-system-kubeconfig
        - name: apiserver-cert
          secret:
            secretName: karmada-system-cert
        - name: etcd-cert
          secret:
            secretName: karmada-system-cert
---
# Source: karmada-system/charts/karmada/templates/karmada-apiserver.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karmada-system-apiserver
  namespace: karmada-system
  labels:
    
    app: karmada-apiserver
spec:
  replicas: 3
  selector:
    matchLabels:
      
      app: karmada-apiserver
  strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
  template:
    metadata:
      labels:
        
        app: karmada-apiserver
        
    spec:
      
      containers:
        - name: karmada-system-apiserver
          image: k8s.gcr.io/kube-apiserver:v1.24.2
          imagePullPolicy: IfNotPresent
          command:
            - kube-apiserver
            - --allow-privileged=true
            - --authorization-mode=Node,RBAC
            - --client-ca-file=/etc/kubernetes/pki/server-ca.crt
            - --disable-admission-plugins=StorageObjectInUseProtection,ServiceAccount
            - --enable-admission-plugins=NodeRestriction
            - --enable-bootstrap-token-auth=true
            - --etcd-cafile=/etc/etcd/pki/server-ca.crt
            - --etcd-certfile=/etc/etcd/pki/karmada.crt
            - --etcd-keyfile=/etc/etcd/pki/karmada.key
            - --etcd-servers=https://etcd-client.karmada-system.svc.cluster.local:2379
            - --bind-address=0.0.0.0
            - --kubelet-client-certificate=/etc/kubernetes/pki/karmada.crt
            - --kubelet-client-key=/etc/kubernetes/pki/karmada.key
            - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
            - --runtime-config=
            - --secure-port=5443
            - --service-account-issuer=https://kubernetes.default.svc.cluster.local
            - --service-account-key-file=/etc/kubernetes/pki/karmada.key
            - --service-account-signing-key-file=/etc/kubernetes/pki/karmada.key
            - --service-cluster-ip-range=10.96.0.0/12
            - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
            - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
            - --requestheader-allowed-names=front-proxy-client
            - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
            - --requestheader-extra-headers-prefix=X-Remote-Extra-
            - --requestheader-group-headers=X-Remote-Group
            - --requestheader-username-headers=X-Remote-User
            - --tls-cert-file=/etc/kubernetes/pki/karmada.crt
            - --tls-private-key-file=/etc/kubernetes/pki/karmada.key
            - --max-requests-inflight=1500
            - --max-mutating-requests-inflight=500
          ports:
            - name: http
              containerPort: 5443
              protocol: TCP
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: 5443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 5443
              scheme: HTTPS
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 15
          resources:
            {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: apiserver-cert
              mountPath: /etc/kubernetes/pki
              readOnly: true
            - name: etcd-cert
              mountPath: /etc/etcd/pki
              readOnly: true
      dnsPolicy: ClusterFirstWithHostNet
      enableServiceLinks: true
      hostNetwork: true
      preemptionPolicy: PreemptLowerPriority
      priority: 2000001000
      priorityClassName: system-node-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - karmada-apiserver
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: apiserver-cert
          secret:
            secretName: karmada-system-cert
        - name: etcd-cert
          secret:
            secretName: karmada-system-cert
---
# Source: karmada-system/charts/karmada/templates/karmada-controller-manager.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karmada-system-controller-manager
  namespace: karmada-system
  labels:
    
    app: karmada-controller-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app: karmada-controller-manager
  strategy:
        rollingUpdate:
          maxSurge: 50%
          maxUnavailable: 0
        type: RollingUpdate
  template:
    metadata:
      labels:
        
        app: karmada-controller-manager
        
    spec:
      
      serviceAccountName: karmada-system-controller-manager
      volumes:
        - name: kubeconfig-secret
          secret:
            secretName: karmada-system-kubeconfig
      containers:
        - name: karmada-system-controller-manager
          image: swr.ap-southeast-1.myhuaweicloud.com/karmada/karmada-controller-manager:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/karmada-controller-manager
            - --kubeconfig=/etc/kubeconfig
            - --bind-address=0.0.0.0
            - --cluster-status-update-frequency=10s
            - --secure-port=10357
            - --leader-elect-resource-namespace=karmada-system
            - --v=2
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10357
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          volumeMounts:
            - name: kubeconfig-secret
              subPath: kubeconfig
              mountPath: /etc/kubeconfig
          resources:
            {}
---
# Source: karmada-system/charts/karmada/templates/karmada-scheduler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karmada-system-scheduler
  namespace: karmada-system
  labels:
    
    app: karmada-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app: karmada-scheduler
  strategy:
        rollingUpdate:
          maxSurge: 50%
          maxUnavailable: 0
        type: RollingUpdate
  template:
    metadata:
      labels:
        
        app: karmada-scheduler
        
    spec:
      
      serviceAccountName: karmada-system-scheduler
      containers:
        - name: karmada-system-scheduler
          image: swr.ap-southeast-1.myhuaweicloud.com/karmada/karmada-scheduler:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/karmada-scheduler
            - --kubeconfig=/etc/kubeconfig
            - --bind-address=0.0.0.0
            - --secure-port=10351
            - --feature-gates=Failover=true
            - --leader-elect-resource-namespace=karmada-system
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10351
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          volumeMounts:
            - name: kubeconfig-secret
              subPath: kubeconfig
              mountPath: /etc/kubeconfig
          resources:
            {}
      volumes:
        - name: kubeconfig-secret
          secret:
            secretName: karmada-system-kubeconfig
---
# Source: karmada-system/charts/karmada/templates/karmada-webhook.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karmada-system-webhook
  namespace: karmada-system
  labels:
    
    app: karmada-webhook
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app: karmada-webhook
  strategy:
        rollingUpdate:
          maxSurge: 50%
          maxUnavailable: 0
        type: RollingUpdate
  template:
    metadata:
      labels:
        
        app: karmada-webhook
        
    spec:
      
      serviceAccountName: karmada-system-webhook
      containers:
        - name: karmada-system-webhook
          image: swr.ap-southeast-1.myhuaweicloud.com/karmada/karmada-webhook:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/karmada-webhook
            - --kubeconfig=/etc/kubeconfig
            - --bind-address=0.0.0.0
            - --secure-port=8443
            - --cert-dir=/var/serving-cert
          ports:
            - containerPort: 8443
          volumeMounts:
            - name: kubeconfig-secret
              subPath: kubeconfig
              mountPath: /etc/kubeconfig
            - name: karmada-system-webhook-cert-secret
              mountPath: /var/serving-cert
              readOnly: true
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8443
              scheme: HTTPS
      volumes:
        - name: kubeconfig-secret
          secret:
            secretName: karmada-system-kubeconfig
        - name: karmada-system-webhook-cert-secret
          secret:
            secretName: karmada-system-webhook-cert
---
# Source: karmada-system/charts/karmada/templates/kube-controller-manager.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karmada-system-kube-controller-manager
  namespace: karmada-system
  labels:
    
    app: kube-controller-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app: kube-controller-manager
  strategy:
        rollingUpdate:
          maxSurge: 50%
          maxUnavailable: 0
        type: RollingUpdate
  template:
    metadata:
      labels:
        
        app: kube-controller-manager
        
    spec:
      
      serviceAccountName: karmada-system-kube-controller-manager
      containers:
        - command:
            - kube-controller-manager
            - --allocate-node-cidrs=true
            - --authentication-kubeconfig=/etc/kubeconfig
            - --authorization-kubeconfig=/etc/kubeconfig
            - --bind-address=0.0.0.0
            - --client-ca-file=/etc/karmada/pki/server-ca.crt
            - --cluster-cidr=10.244.0.0/16
            - --cluster-name=karmada
            - --cluster-signing-cert-file=/etc/karmada/pki/server-ca.crt
            - --cluster-signing-key-file=/etc/karmada/pki/server-ca.key
            - --controllers=namespace,garbagecollector,serviceaccount-token,ttl-after-finished,bootstrapsigner,csrapproving,csrcleaner,csrsigning
            - --kubeconfig=/etc/kubeconfig
            - --leader-elect=true
            - --node-cidr-mask-size=24
            - --root-ca-file=/etc/karmada/pki/server-ca.crt
            - --service-account-private-key-file=/etc/karmada/pki/karmada.key
            - --service-cluster-ip-range=10.96.0.0/12
            - --use-service-account-credentials=true
            - --v=5
          image: k8s.gcr.io/kube-controller-manager:v1.24.2
          livenessProbe:
            failureThreshold: 8
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10257
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          imagePullPolicy: IfNotPresent
          name: kube-controller-manager
          resources:
            null
          volumeMounts:
            - mountPath: /etc/karmada/pki
              name: apisever-cert
              readOnly: true
            - name: kubeconfig-secret
              subPath: kubeconfig
              mountPath: /etc/kubeconfig
      priorityClassName: system-node-critical
      volumes:
        - name: apisever-cert
          secret:
            secretName: karmada-system-cert
        - name: kubeconfig-secret
          secret:
            secretName: karmada-system-kubeconfig
---
# Source: karmada-system/charts/karmada/templates/etcd.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: etcd
  namespace: karmada-system
  labels:
    app: etcd
spec:
  replicas: 1
  serviceName: etcd
  selector:
    matchLabels:
      app: etcd
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: etcd
    spec:
      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - etcd
              topologyKey: kubernetes.io/hostname
      tolerations:
        - operator: Exists
      containers:
        - name: etcd
          image: k8s.gcr.io/etcd:3.5.3-0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -ec
                - 'etcdctl get /registry --prefix --keys-only  --endpoints https://127.0.0.1:2379  --cacert /etc/kubernetes/pki/etcd/server-ca.crt --cert /etc/kubernetes/pki/etcd/karmada.crt --key /etc/kubernetes/pki/etcd/karmada.key'
            failureThreshold: 3
            initialDelaySeconds: 600
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 10
          env:
            - name: KARMADA_ETCD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - containerPort: 2379
              name: client
              protocol: TCP
            - containerPort: 2380
              name: server
              protocol: TCP
          resources:
            {}
          volumeMounts:
            - mountPath: /var/lib/etcd
              name: etcd-data
            - name: etcd-cert
              mountPath: /etc/kubernetes/pki/etcd
              readOnly: true
          command:
            - /usr/local/bin/etcd
            - --name
            - $(KARMADA_ETCD_NAME)
            - --listen-peer-urls
            - http://0.0.0.0:2380
            - --listen-client-urls
            - https://0.0.0.0:2379
            - --advertise-client-urls
            - https://etcd-client.karmada-system.svc.cluster.local:2379
            - --initial-cluster
            - "etcd-0=http://etcd-0.etcd.karmada-system.svc.cluster.local:2380"
            - --initial-cluster-state
            - new
            - --cert-file=/etc/kubernetes/pki/etcd/karmada.crt
            - --client-cert-auth=true
            - --key-file=/etc/kubernetes/pki/etcd/karmada.key
            - --trusted-ca-file=/etc/kubernetes/pki/etcd/server-ca.crt
            - --data-dir=/var/lib/etcd
      volumes:
        - name: etcd-cert
          secret:
            secretName: karmada-system-cert
        - hostPath:
            path: /var/lib/karmada-system/karmada-etcd
            type: DirectoryOrCreate
          name: etcd-data
---
# Source: karmada-system/charts/karmada/templates/pre-install-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karmada-system-pre-job
  namespace: karmada-system
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
---
# Source: karmada-system/charts/karmada/templates/pre-install-job.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: karmada-system-config
  namespace: karmada-system
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "2"
data:
  cert.yaml: |-
    apiVersion: v1
    kind: Secret
    metadata:
      name: karmada-system-cert
      namespace: karmada-system
    type: Opaque
    data:
      server-ca.crt: |-
        {{ ca_crt }}
      server-ca.key: |-
        {{ ca_key }}
      karmada.crt: |-
        {{ crt }}
      karmada.key: |-
        {{ key }}
      front-proxy-ca.crt: |-
        {{ front_proxy_ca_crt }}
      front-proxy-client.crt: |-
        {{ front_proxy_crt }}
      front-proxy-client.key: |-
        {{ front_proxy_key }}
  webhook-cert.yaml: |-
    apiVersion: v1
    kind: Secret
    metadata:
      name: karmada-system-webhook-cert
      namespace: karmada-system
    type: kubernetes.io/tls
    data:
      tls.crt: |-
        {{ crt }}
      tls.key: |-
        {{ key }}
  kubeconfig.yaml: |-
    apiVersion: v1
    kind: Secret
    metadata:
      name: karmada-system-kubeconfig
      namespace: karmada-system
    stringData:
      kubeconfig: |-
        apiVersion: v1
        kind: Config
        clusters:
          - cluster:
              certificate-authority-data: {{ ca_crt }}
              insecure-skip-tls-verify: false
              server: https://karmada-system-apiserver.karmada-system.svc.cluster.local:5443
            name: karmada-system-apiserver
        users:
          - user:
              client-certificate-data: {{ crt }}
              client-key-data: {{ key }}
            name: karmada-system-apiserver
        contexts:
          - context:
              cluster: karmada-system-apiserver
              user: karmada-system-apiserver
            name: karmada-system-apiserver
        current-context: karmada-system-apiserver
  static-resources-configmaps.yaml: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: karmada-system-static-resources
      namespace: karmada-system
    data:
      webhook-configuration.yaml:  |-
        
        
        ---
        apiVersion: admissionregistration.k8s.io/v1
        kind: MutatingWebhookConfiguration
        metadata:
          name: mutating-config
          labels:
            app: mutating-config
        webhooks:
          - name: propagationpolicy.karmada.io
            rules:
              - operations: ["CREATE", "UPDATE"]
                apiGroups: ["policy.karmada.io"]
                apiVersions: ["*"]
                resources: ["propagationpolicies"]
                scope: "Namespaced"
            clientConfig:
              url: https://karmada-system-webhook.karmada-system.svc:443/mutate-propagationpolicy
              
              caBundle: {{ ca_crt }}
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions: ["v1"]
            timeoutSeconds: 3
          - name: clusterpropagationpolicy.karmada.io
            rules:
              - operations: ["CREATE", "UPDATE"]
                apiGroups: ["policy.karmada.io"]
                apiVersions: ["*"]
                resources: ["clusterpropagationpolicies"]
                scope: "Cluster"
            clientConfig:
              url: https://karmada-system-webhook.karmada-system.svc:443/mutate-clusterpropagationpolicy
              
              caBundle: {{ ca_crt }}
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions: ["v1"]
            timeoutSeconds: 3
          - name: overridepolicy.karmada.io
            rules:
              - operations: ["CREATE", "UPDATE"]
                apiGroups: ["policy.karmada.io"]
                apiVersions: ["*"]
                resources: ["overridepolicies"]
                scope: "Namespaced"
            clientConfig:
              url: https://karmada-system-webhook.karmada-system.svc:443/mutate-overridepolicy
              
              caBundle: {{ ca_crt }}
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions: ["v1"]
            timeoutSeconds: 3
          - name: work.karmada.io
            rules:
              - operations: ["CREATE", "UPDATE"]
                apiGroups: ["work.karmada.io"]
                apiVersions: ["*"]
                resources: ["works"]
                scope: "Namespaced"
            clientConfig:
              url: https://karmada-system-webhook.karmada-system.svc:443/mutate-work
              
              caBundle: {{ ca_crt }}
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions: ["v1"]
            timeoutSeconds: 3
        ---
        apiVersion: admissionregistration.k8s.io/v1
        kind: ValidatingWebhookConfiguration
        metadata:
          name: validating-config
          labels:
            app: validating-config
        webhooks:
          - name: propagationpolicy.karmada.io
            rules:
              - operations: ["CREATE", "UPDATE"]
                apiGroups: ["policy.karmada.io"]
                apiVersions: ["*"]
                resources: ["propagationpolicies"]
                scope: "Namespaced"
            clientConfig:
              url: https://karmada-system-webhook.karmada-system.svc:443/validate-propagationpolicy
              
              caBundle: {{ ca_crt }}
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions: ["v1"]
            timeoutSeconds: 3
          - name: clusterpropagationpolicy.karmada.io
            rules:
              - operations: ["CREATE", "UPDATE"]
                apiGroups: ["policy.karmada.io"]
                apiVersions: ["*"]
                resources: ["clusterpropagationpolicies"]
                scope: "Cluster"
            clientConfig:
              url: https://karmada-system-webhook.karmada-system.svc:443/validate-clusterpropagationpolicy
              
              caBundle: {{ ca_crt }}
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions: ["v1"]
            timeoutSeconds: 3
          - name: overridepolicy.karmada.io
            rules:
              - operations: ["CREATE", "UPDATE"]
                apiGroups: ["policy.karmada.io"]
                apiVersions: ["*"]
                resources: ["overridepolicies"]
                scope: "Namespaced"
            clientConfig:
              url: https://karmada-system-webhook.karmada-system.svc:443/validate-overridepolicy
              
              caBundle: {{ ca_crt }}
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions: ["v1"]
            timeoutSeconds: 3
          - name: clusteroverridepolicy.karmada.io
            rules:
              - operations: ["CREATE", "UPDATE"]
                apiGroups: ["policy.karmada.io"]
                apiVersions: ["*"]
                resources: ["clusteroverridepolicies"]
                scope: "Cluster"
            clientConfig:
              url: https://karmada-system-webhook.karmada-system.svc:443/validate-clusteroverridepolicy
              
              caBundle: {{ ca_crt }}
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions: ["v1"]
            timeoutSeconds: 3
          - name: config.karmada.io
            rules:
              - operations: ["CREATE", "UPDATE"]
                apiGroups: ["config.karmada.io"]
                apiVersions: ["*"]
                resources: ["resourceinterpreterwebhookconfigurations"]
                scope: "Cluster"
            clientConfig:
              url: https://karmada-system-webhook.karmada-system.svc:443/validate-resourceinterpreterwebhookconfiguration
              
              caBundle: {{ ca_crt }}
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions: ["v1"]
            timeoutSeconds: 3
      system-namespace.yaml:  |-
        ---
        apiVersion: v1
        kind: Namespace
        metadata:
          name: karmada-system
        ---
        apiVersion: v1
        kind: Namespace
        metadata:
          name: karmada-cluster
      karmada-aggregated-apiserver-apiservice.yaml:  |-
        ---
        apiVersion: apiregistration.k8s.io/v1
        kind: APIService
        metadata:
          name: v1alpha1.cluster.karmada.io
          labels:
            app: karmada-system-aggregated-apiserver
            apiserver: "true"
        spec:
          insecureSkipTLSVerify: true
          group: cluster.karmada.io
          groupPriorityMinimum: 2000
          service:
            name: karmada-system-aggregated-apiserver
            namespace: karmada-system
          version: v1alpha1
          versionPriority: 10
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: karmada-system-aggregated-apiserver
          namespace: karmada-system
        spec:
          type: ExternalName
          externalName: karmada-system-aggregated-apiserver.karmada-system.svc.cluster.local
      cluster-proxy-admin-rbac.yaml:  |-
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: karmada-system-cluster-proxy-admin
        rules:
          - apiGroups:
              - 'cluster.karmada.io'
            resources:
              - clusters/proxy
            verbs:
              - '*'
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: karmada-system-cluster-proxy-admin
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: karmada-system-cluster-proxy-admin
        subjects:
          - kind: User
            name: "system:admin"
  crds-configmaps.yaml: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: karmada-system-crds
      namespace: karmada-system
    data:
      
      
      config.karmada.io_resourceinterpreterwebhookconfigurations.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: resourceinterpreterwebhookconfigurations.config.karmada.io
        spec:
          group: config.karmada.io
          names:
            kind: ResourceInterpreterWebhookConfiguration
            listKind: ResourceInterpreterWebhookConfigurationList
            plural: resourceinterpreterwebhookconfigurations
            singular: resourceinterpreterwebhookconfiguration
          scope: Cluster
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: ResourceInterpreterWebhookConfiguration describes the configuration
                  of webhooks which take the responsibility to tell karmada the details of
                  the resource object, especially for custom resources.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  webhooks:
                    description: Webhooks is a list of webhooks and the affected resources
                      and operations.
                    items:
                      description: ResourceInterpreterWebhook describes the webhook as well
                        as the resources and operations it applies to.
                      properties:
                        clientConfig:
                          description: ClientConfig defines how to communicate with the hook.
                          properties:
                            caBundle:
                              description: '`caBundle` is a PEM encoded CA bundle which will
                                be used to validate the webhook''s server certificate. If
                                unspecified, system trust roots on the apiserver are used.'
                              format: byte
                              type: string
                            service:
                              description: "`service` is a reference to the service for this
                                webhook. Either `service` or `url` must be specified. \n If
                                the webhook is running within the cluster, then you should
                                use `service`."
                              properties:
                                name:
                                  description: '`name` is the name of the service. Required'
                                  type: string
                                namespace:
                                  description: '`namespace` is the namespace of the service.
                                    Required'
                                  type: string
                                path:
                                  description: '`path` is an optional URL path which will
                                    be sent in any request to this service.'
                                  type: string
                                port:
                                  description: If specified, the port on the service that
                                    hosting webhook. Default to 443 for backward compatibility.
                                    `port` should be a valid port number (1-65535, inclusive).
                                  format: int32
                                  type: integer
                              required:
                              - name
                              - namespace
                              type: object
                            url:
                              description: "`url` gives the location of the webhook, in standard
                                URL form (`scheme://host:port/path`). Exactly one of `url`
                                or `service` must be specified. \n The `host` should not refer
                                to a service running in the cluster; use the `service` field
                                instead. The host might be resolved via external DNS in some
                                apiservers (e.g., `kube-apiserver` cannot resolve in-cluster
                                DNS as that would be a layering violation). `host` may also
                                be an IP address. \n Please note that using `localhost` or
                                `127.0.0.1` as a `host` is risky unless you take great care
                                to run this webhook on all hosts which run an apiserver which
                                might need to make calls to this webhook. Such installs are
                                likely to be non-portable, i.e., not easy to turn up in a
                                new cluster. \n The scheme must be \"https\"; the URL must
                                begin with \"https://\". \n A path is optional, and if present
                                may be any string permissible in a URL. You may use the path
                                to pass an arbitrary string to the webhook, for example, a
                                cluster identifier. \n Attempting to use a user or basic auth
                                e.g. \"user:password@\" is not allowed. Fragments (\"#...\")
                                and query parameters (\"?...\") are not allowed, either."
                              type: string
                          type: object
                        interpreterContextVersions:
                          description: InterpreterContextVersions is an ordered list of preferred
                            `ResourceInterpreterContext` versions the Webhook expects. Karmada
                            will try to use first version in the list which it supports. If
                            none of the versions specified in this list supported by Karmada,
                            validation will fail for this object. If a persisted webhook configuration
                            specifies allowed versions and does not include any versions known
                            to the Karmada, calls to the webhook will fail and be subject
                            to the failure policy.
                          items:
                            type: string
                          type: array
                        name:
                          description: Name is the full-qualified name of the webhook.
                          type: string
                        rules:
                          description: Rules describes what operations on what resources the
                            webhook cares about. The webhook cares about an operation if it
                            matches any Rule.
                          items:
                            description: RuleWithOperations is a tuple of Operations and Resources.
                              It is recommended to make sure that all the tuple expansions
                              are valid.
                            properties:
                              apiGroups:
                                description: "APIGroups is the API groups the resources belong
                                  to. '*' is all groups. If '*' is present, the length of
                                  the slice must be one. For example: [\"apps\", \"batch\",
                                  \"example.io\"] means matches 3 groups. [\"*\"] means matches
                                  all group \n Note: The group cloud be empty, e.g the 'core'
                                  group of kubernetes, in that case use [\"\"]."
                                items:
                                  type: string
                                type: array
                              apiVersions:
                                description: 'APIVersions is the API versions the resources
                                  belong to. ''*'' is all versions. If ''*'' is present, the
                                  length of the slice must be one. For example: ["v1alpha1",
                                  "v1beta1"] means matches 2 versions. ["*"] means matches
                                  all versions.'
                                items:
                                  type: string
                                type: array
                              kinds:
                                description: 'Kinds is a list of resources this rule applies
                                  to. If ''*'' is present, the length of the slice must be
                                  one. For example: ["Deployment", "Pod"] means matches Deployment
                                  and Pod. ["*"] means apply to all resources.'
                                items:
                                  type: string
                                type: array
                              operations:
                                description: Operations is the operations the hook cares about.
                                  If '*' is present, the length of the slice must be one.
                                items:
                                  description: InterpreterOperation specifies an operation
                                    for a request.
                                  type: string
                                type: array
                            required:
                            - apiGroups
                            - apiVersions
                            - kinds
                            - operations
                            type: object
                          type: array
                        timeoutSeconds:
                          description: TimeoutSeconds specifies the timeout for this webhook.
                            After the timeout passes, the webhook call will be ignored or
                            the API call will fail based on the failure policy. The timeout
                            value must be between 1 and 30 seconds. Default to 10 seconds.
                          format: int32
                          type: integer
                      required:
                      - clientConfig
                      - interpreterContextVersions
                      - name
                      type: object
                    type: array
                required:
                - webhooks
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      multicluster.x-k8s.io_serviceexports.yaml:  |-
        # Copyright 2020 The Kubernetes Authors.
        #
        # Licensed under the Apache License, Version 2.0 (the "License");
        # you may not use this file except in compliance with the License.
        # You may obtain a copy of the License at
        #
        #     http://www.apache.org/licenses/LICENSE-2.0
        #
        # Unless required by applicable law or agreed to in writing, software
        # distributed under the License is distributed on an "AS IS" BASIS,
        # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        # See the License for the specific language governing permissions and
        # limitations under the License.
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          name: serviceexports.multicluster.x-k8s.io
        spec:
          group: multicluster.x-k8s.io
          scope: Namespaced
          names:
            plural: serviceexports
            singular: serviceexport
            kind: ServiceExport
            shortNames:
            - svcex
          versions:
          - name: v1alpha1
            served: true
            storage: true
            subresources:
              status: {}
            additionalPrinterColumns:
            - name: Age
              type: date
              jsonPath: .metadata.creationTimestamp
            "schema":
              "openAPIV3Schema":
                description: ServiceExport declares that the Service with the same name and
                  namespace as this export should be consumable from other clusters.
                type: object
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  status:
                    description: status describes the current state of an exported service.
                      Service configuration comes from the Service that had the same name
                      and namespace as this ServiceExport. Populated by the multi-cluster
                      service implementation's controller.
                    type: object
                    properties:
                      conditions:
                        type: array
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{     // Represents the observations of a
                            foo's current state.     // Known .status.conditions.type are:
                            \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                            \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                            \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                            patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                            \n     // other fields }"
                          type: object
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              type: string
                              format: date-time
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              type: string
                              maxLength: 32768
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              type: integer
                              format: int64
                              minimum: 0
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              type: string
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              type: string
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              type: string
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        x-kubernetes-list-map-keys:
                        - type
                        x-kubernetes-list-type: map
        
      
      
      multicluster.x-k8s.io_serviceimports.yaml:  |-
        # Copyright 2020 The Kubernetes Authors.
        #
        # Licensed under the Apache License, Version 2.0 (the "License");
        # you may not use this file except in compliance with the License.
        # You may obtain a copy of the License at
        #
        #     http://www.apache.org/licenses/LICENSE-2.0
        #
        # Unless required by applicable law or agreed to in writing, software
        # distributed under the License is distributed on an "AS IS" BASIS,
        # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        # See the License for the specific language governing permissions and
        # limitations under the License.
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          name: serviceimports.multicluster.x-k8s.io
        spec:
          group: multicluster.x-k8s.io
          scope: Namespaced
          names:
            plural: serviceimports
            singular: serviceimport
            kind: ServiceImport
            shortNames:
            - svcim
          versions:
          - name: v1alpha1
            served: true
            storage: true
            subresources:
              status: {}
            additionalPrinterColumns:
            - name: Type
              type: string
              description: The type of this ServiceImport
              jsonPath: .spec.type
            - name: IP
              type: string
              description: The VIP for this ServiceImport
              jsonPath: .spec.ips
            - name: Age
              type: date
              jsonPath: .metadata.creationTimestamp
            "schema":
              "openAPIV3Schema":
                description: ServiceImport describes a service imported from clusters in a
                  ClusterSet.
                type: object
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: spec defines the behavior of a ServiceImport.
                    type: object
                    required:
                    - ports
                    - type
                    properties:
                      ips:
                        description: ip will be used as the VIP for this service when type
                          is ClusterSetIP.
                        type: array
                        maxItems: 1
                        items:
                          type: string
                      ports:
                        type: array
                        items:
                          description: ServicePort represents the port on which the service
                            is exposed
                          type: object
                          required:
                          - port
                          properties:
                            appProtocol:
                              description: The application protocol for this port. This field
                                follows standard Kubernetes label syntax. Un-prefixed names
                                are reserved for IANA standard service names (as per RFC-6335
                                and http://www.iana.org/assignments/service-names). Non-standard
                                protocols should use prefixed names such as mycompany.com/my-custom-protocol.
                                Field can be enabled with ServiceAppProtocol feature gate.
                              type: string
                            name:
                              description: The name of this port within the service. This
                                must be a DNS_LABEL. All ports within a ServiceSpec must have
                                unique names. When considering the endpoints for a Service,
                                this must match the 'name' field in the EndpointPort. Optional
                                if only one ServicePort is defined on this service.
                              type: string
                            port:
                              description: The port that will be exposed by this service.
                              type: integer
                              format: int32
                            protocol:
                              description: The IP protocol for this port. Supports "TCP",
                                "UDP", and "SCTP". Default is TCP.
                              type: string
                        x-kubernetes-list-type: atomic
                      sessionAffinity:
                        description: 'Supports "ClientIP" and "None". Used to maintain session
                          affinity. Enable client IP based session affinity. Must be ClientIP
                          or None. Defaults to None. Ignored when type is Headless More info:
                          https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        type: string
                      sessionAffinityConfig:
                        description: sessionAffinityConfig contains session affinity configuration.
                        type: object
                        properties:
                          clientIP:
                            description: clientIP contains the configurations of Client IP
                              based session affinity.
                            type: object
                            properties:
                              timeoutSeconds:
                                description: timeoutSeconds specifies the seconds of ClientIP
                                  type session sticky time. The value must be >0 && <=86400(for
                                  1 day) if ServiceAffinity == "ClientIP". Default value is
                                  10800(for 3 hours).
                                type: integer
                                format: int32
                      type:
                        description: type defines the type of this service. Must be ClusterSetIP
                          or Headless.
                        type: string
                        enum:
                        - ClusterSetIP
                        - Headless
                  status:
                    description: status contains information about the exported services that
                      form the multi-cluster service referenced by this ServiceImport.
                    type: object
                    properties:
                      clusters:
                        description: clusters is the list of exporting clusters from which
                          this service was derived.
                        type: array
                        items:
                          description: ClusterStatus contains service configuration mapped
                            to a specific source cluster
                          type: object
                          required:
                          - cluster
                          properties:
                            cluster:
                              description: cluster is the name of the exporting cluster. Must
                                be a valid RFC-1123 DNS label.
                              type: string
                        x-kubernetes-list-map-keys:
                        - cluster
                        x-kubernetes-list-type: map
        
      
      
      networking.karmada.io_multiclusteringresses.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: multiclusteringresses.networking.karmada.io
        spec:
          group: networking.karmada.io
          names:
            categories:
            - karmada-io
            kind: MultiClusterIngress
            listKind: MultiClusterIngressList
            plural: multiclusteringresses
            shortNames:
            - mci
            singular: multiclusteringress
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: MultiClusterIngress is a collection of rules that allow inbound
                  connections to reach the endpoints defined by a backend. The structure of
                  MultiClusterIngress is same as Ingress, indicates the Ingress in multi-clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec is the desired state of the MultiClusterIngress.
                    properties:
                      defaultBackend:
                        description: DefaultBackend is the backend that should handle requests
                          that don't match any rule. If Rules are not specified, DefaultBackend
                          must be specified. If DefaultBackend is not set, the handling of
                          requests that do not match any of the rules will be up to the Ingress
                          controller.
                        properties:
                          resource:
                            description: Resource is an ObjectRef to another Kubernetes resource
                              in the namespace of the Ingress object. If resource is specified,
                              a service.Name and service.Port must not be specified. This
                              is a mutually exclusive setting with "Service".
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource being
                                  referenced. If APIGroup is not specified, the specified
                                  Kind must be in the core API group. For any other third-party
                                  types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                          service:
                            description: Service references a Service as a Backend. This is
                              a mutually exclusive setting with "Resource".
                            properties:
                              name:
                                description: Name is the referenced service. The service must
                                  exist in the same namespace as the Ingress object.
                                type: string
                              port:
                                description: Port of the referenced service. A port name or
                                  port number is required for a IngressServiceBackend.
                                properties:
                                  name:
                                    description: Name is the name of the port on the Service.
                                      This is a mutually exclusive setting with "Number".
                                    type: string
                                  number:
                                    description: Number is the numerical port number (e.g.
                                      80) on the Service. This is a mutually exclusive setting
                                      with "Name".
                                    format: int32
                                    type: integer
                                type: object
                            required:
                            - name
                            type: object
                        type: object
                      ingressClassName:
                        description: IngressClassName is the name of the IngressClass cluster
                          resource. The associated IngressClass defines which controller will
                          implement the resource. This replaces the deprecated `kubernetes.io/ingress.class`
                          annotation. For backwards compatibility, when that annotation is
                          set, it must be given precedence over this field. The controller
                          may emit a warning if the field and annotation have different values.
                          Implementations of this API should ignore Ingresses without a class
                          specified. An IngressClass resource may be marked as default, which
                          can be used to set a default value for this field. For more information,
                          refer to the IngressClass documentation.
                        type: string
                      rules:
                        description: A list of host rules used to configure the Ingress. If
                          unspecified, or no rule matches, all traffic is sent to the default
                          backend.
                        items:
                          description: IngressRule represents the rules mapping the paths
                            under a specified host to the related backend services. Incoming
                            requests are first evaluated for a host match, then routed to
                            the backend associated with the matching IngressRuleValue.
                          properties:
                            host:
                              description: "Host is the fully qualified domain name of a network
                                host, as defined by RFC 3986. Note the following deviations
                                from the \"host\" part of the URI as defined in RFC 3986:
                                1. IPs are not allowed. Currently an IngressRuleValue can
                                only apply to the IP in the Spec of the parent Ingress. 2.
                                The `:` delimiter is not respected because ports are not allowed.
                                Currently the port of an Ingress is implicitly :80 for http
                                and :443 for https. Both these may change in the future. Incoming
                                requests are matched against the host before the IngressRuleValue.
                                If the host is unspecified, the Ingress routes all traffic
                                based on the specified IngressRuleValue. \n Host can be \"precise\"
                                which is a domain name without the terminating dot of a network
                                host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain
                                name prefixed with a single wildcard label (e.g. \"*.foo.com\").
                                The wildcard character '*' must appear by itself as the first
                                DNS label and matches only a single label. You cannot have
                                a wildcard label by itself (e.g. Host == \"*\"). Requests
                                will be matched against the Host field in the following way:
                                1. If Host is precise, the request matches this rule if the
                                http host header is equal to Host. 2. If Host is a wildcard,
                                then the request matches this rule if the http host header
                                is to equal to the suffix (removing the first label) of the
                                wildcard rule."
                              type: string
                            http:
                              description: 'HTTPIngressRuleValue is a list of http selectors
                                pointing to backends. In the example: http://<host>/<path>?<searchpart>
                                -> backend where where parts of the url correspond to RFC
                                3986, this resource will be used to match against everything
                                after the last ''/'' and before the first ''?'' or ''#''.'
                              properties:
                                paths:
                                  description: A collection of paths that map requests to
                                    backends.
                                  items:
                                    description: HTTPIngressPath associates a path with a
                                      backend. Incoming urls matching the path are forwarded
                                      to the backend.
                                    properties:
                                      backend:
                                        description: Backend defines the referenced service
                                          endpoint to which the traffic will be forwarded
                                          to.
                                        properties:
                                          resource:
                                            description: Resource is an ObjectRef to another
                                              Kubernetes resource in the namespace of the
                                              Ingress object. If resource is specified, a
                                              service.Name and service.Port must not be specified.
                                              This is a mutually exclusive setting with "Service".
                                            properties:
                                              apiGroup:
                                                description: APIGroup is the group for the
                                                  resource being referenced. If APIGroup is
                                                  not specified, the specified Kind must be
                                                  in the core API group. For any other third-party
                                                  types, APIGroup is required.
                                                type: string
                                              kind:
                                                description: Kind is the type of resource
                                                  being referenced
                                                type: string
                                              name:
                                                description: Name is the name of resource
                                                  being referenced
                                                type: string
                                            required:
                                            - kind
                                            - name
                                            type: object
                                          service:
                                            description: Service references a Service as a
                                              Backend. This is a mutually exclusive setting
                                              with "Resource".
                                            properties:
                                              name:
                                                description: Name is the referenced service.
                                                  The service must exist in the same namespace
                                                  as the Ingress object.
                                                type: string
                                              port:
                                                description: Port of the referenced service.
                                                  A port name or port number is required for
                                                  a IngressServiceBackend.
                                                properties:
                                                  name:
                                                    description: Name is the name of the port
                                                      on the Service. This is a mutually exclusive
                                                      setting with "Number".
                                                    type: string
                                                  number:
                                                    description: Number is the numerical port
                                                      number (e.g. 80) on the Service. This
                                                      is a mutually exclusive setting with
                                                      "Name".
                                                    format: int32
                                                    type: integer
                                                type: object
                                            required:
                                            - name
                                            type: object
                                        type: object
                                      path:
                                        description: Path is matched against the path of an
                                          incoming request. Currently it can contain characters
                                          disallowed from the conventional "path" part of
                                          a URL as defined by RFC 3986. Paths must begin with
                                          a '/' and must be present when using PathType with
                                          value "Exact" or "Prefix".
                                        type: string
                                      pathType:
                                        description: 'PathType determines the interpretation
                                          of the Path matching. PathType can be one of the
                                          following values: * Exact: Matches the URL path
                                          exactly. * Prefix: Matches based on a URL path prefix
                                          split by ''/''. Matching is done on a path element
                                          by element basis. A path element refers is the list
                                          of labels in the path split by the ''/'' separator.
                                          A request is a match for path p if every p is an
                                          element-wise prefix of p of the request path. Note
                                          that if the last element of the path is a substring
                                          of the last element in request path, it is not a
                                          match (e.g. /foo/bar matches /foo/bar/baz, but does
                                          not match /foo/barbaz). * ImplementationSpecific:
                                          Interpretation of the Path matching is up to the
                                          IngressClass. Implementations can treat this as
                                          a separate PathType or treat it identically to Prefix
                                          or Exact path types. Implementations are required
                                          to support all path types.'
                                        type: string
                                    required:
                                    - backend
                                    - pathType
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                              required:
                              - paths
                              type: object
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                      tls:
                        description: TLS configuration. Currently the Ingress only supports
                          a single TLS port, 443. If multiple members of this list specify
                          different hosts, they will be multiplexed on the same port according
                          to the hostname specified through the SNI TLS extension, if the
                          ingress controller fulfilling the ingress supports SNI.
                        items:
                          description: IngressTLS describes the transport layer security associated
                            with an Ingress.
                          properties:
                            hosts:
                              description: Hosts are a list of hosts included in the TLS certificate.
                                The values in this list must match the name/s used in the
                                tlsSecret. Defaults to the wildcard host setting for the loadbalancer
                                controller fulfilling this Ingress, if left unspecified.
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            secretName:
                              description: SecretName is the name of the secret used to terminate
                                TLS traffic on port 443. Field is left optional to allow TLS
                                routing based on SNI hostname alone. If the SNI host in a
                                listener conflicts with the "Host" header field used by an
                                IngressRule, the SNI host is used for termination and value
                                of the Host header is used for routing.
                              type: string
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                    type: object
                  status:
                    description: Status is the current state of the MultiClusterIngress.
                    properties:
                      loadBalancer:
                        description: LoadBalancer contains the current status of the load-balancer.
                        properties:
                          ingress:
                            description: Ingress is a list containing ingress points for the
                              load-balancer. Traffic intended for the service should be sent
                              to these ingress points.
                            items:
                              description: 'LoadBalancerIngress represents the status of a
                                load-balancer ingress point: traffic intended for the service
                                should be sent to an ingress point.'
                              properties:
                                hostname:
                                  description: Hostname is set for load-balancer ingress points
                                    that are DNS based (typically AWS load-balancers)
                                  type: string
                                ip:
                                  description: IP is set for load-balancer ingress points
                                    that are IP based (typically GCE or OpenStack load-balancers)
                                  type: string
                                ports:
                                  description: Ports is a list of records of service ports
                                    If used, every port defined in the service should have
                                    an entry in it
                                  items:
                                    properties:
                                      error:
                                        description: 'Error is to record the problem with
                                          the service port The format of the error shall comply
                                          with the following rules: - built-in error values
                                          shall be specified in this file and those shall
                                          use CamelCase names - cloud provider specific error
                                          values must have names that comply with the format
                                          foo.example.com/CamelCase. --- The regex it matches
                                          is (dns1123SubdomainFmt/)?(qualifiedNameFmt)'
                                        maxLength: 316
                                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                        type: string
                                      port:
                                        description: Port is the port number of the service
                                          port of which status is recorded here
                                        format: int32
                                        type: integer
                                      protocol:
                                        default: TCP
                                        description: 'Protocol is the protocol of the service
                                          port of which status is recorded here The supported
                                          values are: "TCP", "UDP", "SCTP"'
                                        type: string
                                    required:
                                    - port
                                    - protocol
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                              type: object
                            type: array
                        type: object
                    type: object
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_clusteroverridepolicies.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: clusteroverridepolicies.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: ClusterOverridePolicy
            listKind: ClusterOverridePolicyList
            plural: clusteroverridepolicies
            shortNames:
            - cop
            singular: clusteroverridepolicy
          scope: Cluster
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: ClusterOverridePolicy represents the cluster-wide policy that
                  overrides a group of resources to one or more clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of ClusterOverridePolicy.
                    properties:
                      overrideRules:
                        description: OverrideRules defines a collection of override rules
                          on target clusters.
                        items:
                          description: RuleWithCluster defines the override rules on clusters.
                          properties:
                            overriders:
                              description: Overriders represents the override rules that would
                                apply on resources
                              properties:
                                argsOverrider:
                                  description: ArgsOverrider represents the rules dedicated
                                    to handling container args
                                  items:
                                    description: CommandArgsOverrider represents the rules
                                      dedicated to handling command/args overrides.
                                    properties:
                                      containerName:
                                        description: The name of container
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the command/args.
                                        enum:
                                        - add
                                        - remove
                                        type: string
                                      value:
                                        description: Value to be applied to command/args.
                                          Items in Value which will be appended after command/args
                                          when Operator is 'add'. Items in Value which match
                                          in command/args will be deleted when Operator is
                                          'remove'. If Value is empty, then the command/args
                                          will remain the same.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - containerName
                                    - operator
                                    type: object
                                  type: array
                                commandOverrider:
                                  description: CommandOverrider represents the rules dedicated
                                    to handling container command
                                  items:
                                    description: CommandArgsOverrider represents the rules
                                      dedicated to handling command/args overrides.
                                    properties:
                                      containerName:
                                        description: The name of container
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the command/args.
                                        enum:
                                        - add
                                        - remove
                                        type: string
                                      value:
                                        description: Value to be applied to command/args.
                                          Items in Value which will be appended after command/args
                                          when Operator is 'add'. Items in Value which match
                                          in command/args will be deleted when Operator is
                                          'remove'. If Value is empty, then the command/args
                                          will remain the same.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - containerName
                                    - operator
                                    type: object
                                  type: array
                                imageOverrider:
                                  description: ImageOverrider represents the rules dedicated
                                    to handling image overrides.
                                  items:
                                    description: ImageOverrider represents the rules dedicated
                                      to handling image overrides.
                                    properties:
                                      component:
                                        description: 'Component is part of image name. Basically
                                          we presume an image can be made of ''[registry/]repository[:tag]''.
                                          The registry could be: - k8s.gcr.io - fictional.registry.example:10443
                                          The repository could be: - kube-apiserver - fictional/nginx
                                          The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c'
                                        enum:
                                        - Registry
                                        - Repository
                                        - Tag
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the image.
                                        enum:
                                        - add
                                        - remove
                                        - replace
                                        type: string
                                      predicate:
                                        description: "Predicate filters images before applying
                                          the rule. \n Defaults to nil, in that case, the
                                          system will automatically detect image fields if
                                          the resource type is Pod, ReplicaSet, Deployment
                                          or StatefulSet by following rule: - Pod: spec/containers/<N>/image
                                          - ReplicaSet: spec/template/spec/containers/<N>/image
                                          - Deployment: spec/template/spec/containers/<N>/image
                                          - StatefulSet: spec/template/spec/containers/<N>/image
                                          In addition, all images will be processed if the
                                          resource object has more than one containers. \n
                                          If not nil, only images matches the filters will
                                          be processed."
                                        properties:
                                          path:
                                            description: Path indicates the path of target
                                              field
                                            type: string
                                        required:
                                        - path
                                        type: object
                                      value:
                                        description: Value to be applied to image. Must not
                                          be empty when operator is 'add' or 'replace'. Defaults
                                          to empty and ignored when operator is 'remove'.
                                        type: string
                                    required:
                                    - component
                                    - operator
                                    type: object
                                  type: array
                                plaintext:
                                  description: Plaintext represents override rules defined
                                    with plaintext overriders.
                                  items:
                                    description: PlaintextOverrider is a simple overrider
                                      that overrides target fields according to path, operator
                                      and value.
                                    properties:
                                      operator:
                                        description: 'Operator indicates the operation on
                                          target field. Available operators are: add, update
                                          and remove.'
                                        enum:
                                        - add
                                        - remove
                                        - replace
                                        type: string
                                      path:
                                        description: Path indicates the path of target field
                                        type: string
                                      value:
                                        description: Value to be applied to target field.
                                          Must be empty when operator is Remove.
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - operator
                                    - path
                                    type: object
                                  type: array
                              type: object
                            targetCluster:
                              description: TargetCluster defines restrictions on this override
                                policy that only applies to resources propagated to the matching
                                clusters. nil means matching all clusters.
                              properties:
                                clusterNames:
                                  description: ClusterNames is the list of clusters to be
                                    selected.
                                  items:
                                    type: string
                                  type: array
                                exclude:
                                  description: ExcludedClusters is the list of clusters to
                                    be ignored.
                                  items:
                                    type: string
                                  type: array
                                fieldSelector:
                                  description: FieldSelector is a filter to select member
                                    clusters by fields. If non-nil and non-empty, only the
                                    clusters match this filter will be selected.
                                  properties:
                                    matchExpressions:
                                      description: A list of field selector requirements.
                                      items:
                                        description: A node selector requirement is a selector
                                          that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: The label key that the selector applies
                                              to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship to
                                              a set of values. Valid operators are In, NotIn,
                                              Exists, DoesNotExist. Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values. If the
                                              operator is In or NotIn, the values array must
                                              be non-empty. If the operator is Exists or DoesNotExist,
                                              the values array must be empty. If the operator
                                              is Gt or Lt, the values array must have a single
                                              element, which will be interpreted as an integer.
                                              This array is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                labelSelector:
                                  description: LabelSelector is a filter to select member
                                    clusters by labels. If non-nil and non-empty, only the
                                    clusters match this filter will be selected.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector
                                        requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector
                                          that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship
                                              to a set of values. Valid operators are In,
                                              NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values.
                                              If the operator is In or NotIn, the values array
                                              must be non-empty. If the operator is Exists
                                              or DoesNotExist, the values array must be empty.
                                              This array is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs.
                                        A single {key,value} in the matchLabels map is equivalent
                                        to an element of matchExpressions, whose key field
                                        is "key", the operator is "In", and the values array
                                        contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                              type: object
                          required:
                          - overriders
                          type: object
                        type: array
                      overriders:
                        description: "Overriders represents the override rules that would
                          apply on resources \n Deprecated: This filed is deprecated in v1.0
                          and please use the OverrideRules instead."
                        properties:
                          argsOverrider:
                            description: ArgsOverrider represents the rules dedicated to handling
                              container args
                            items:
                              description: CommandArgsOverrider represents the rules dedicated
                                to handling command/args overrides.
                              properties:
                                containerName:
                                  description: The name of container
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the command/args.
                                  enum:
                                  - add
                                  - remove
                                  type: string
                                value:
                                  description: Value to be applied to command/args. Items
                                    in Value which will be appended after command/args when
                                    Operator is 'add'. Items in Value which match in command/args
                                    will be deleted when Operator is 'remove'. If Value is
                                    empty, then the command/args will remain the same.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - containerName
                              - operator
                              type: object
                            type: array
                          commandOverrider:
                            description: CommandOverrider represents the rules dedicated to
                              handling container command
                            items:
                              description: CommandArgsOverrider represents the rules dedicated
                                to handling command/args overrides.
                              properties:
                                containerName:
                                  description: The name of container
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the command/args.
                                  enum:
                                  - add
                                  - remove
                                  type: string
                                value:
                                  description: Value to be applied to command/args. Items
                                    in Value which will be appended after command/args when
                                    Operator is 'add'. Items in Value which match in command/args
                                    will be deleted when Operator is 'remove'. If Value is
                                    empty, then the command/args will remain the same.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - containerName
                              - operator
                              type: object
                            type: array
                          imageOverrider:
                            description: ImageOverrider represents the rules dedicated to
                              handling image overrides.
                            items:
                              description: ImageOverrider represents the rules dedicated to
                                handling image overrides.
                              properties:
                                component:
                                  description: 'Component is part of image name. Basically
                                    we presume an image can be made of ''[registry/]repository[:tag]''.
                                    The registry could be: - k8s.gcr.io - fictional.registry.example:10443
                                    The repository could be: - kube-apiserver - fictional/nginx
                                    The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c'
                                  enum:
                                  - Registry
                                  - Repository
                                  - Tag
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the image.
                                  enum:
                                  - add
                                  - remove
                                  - replace
                                  type: string
                                predicate:
                                  description: "Predicate filters images before applying the
                                    rule. \n Defaults to nil, in that case, the system will
                                    automatically detect image fields if the resource type
                                    is Pod, ReplicaSet, Deployment or StatefulSet by following
                                    rule: - Pod: spec/containers/<N>/image - ReplicaSet: spec/template/spec/containers/<N>/image
                                    - Deployment: spec/template/spec/containers/<N>/image
                                    - StatefulSet: spec/template/spec/containers/<N>/image
                                    In addition, all images will be processed if the resource
                                    object has more than one containers. \n If not nil, only
                                    images matches the filters will be processed."
                                  properties:
                                    path:
                                      description: Path indicates the path of target field
                                      type: string
                                  required:
                                  - path
                                  type: object
                                value:
                                  description: Value to be applied to image. Must not be empty
                                    when operator is 'add' or 'replace'. Defaults to empty
                                    and ignored when operator is 'remove'.
                                  type: string
                              required:
                              - component
                              - operator
                              type: object
                            type: array
                          plaintext:
                            description: Plaintext represents override rules defined with
                              plaintext overriders.
                            items:
                              description: PlaintextOverrider is a simple overrider that overrides
                                target fields according to path, operator and value.
                              properties:
                                operator:
                                  description: 'Operator indicates the operation on target
                                    field. Available operators are: add, update and remove.'
                                  enum:
                                  - add
                                  - remove
                                  - replace
                                  type: string
                                path:
                                  description: Path indicates the path of target field
                                  type: string
                                value:
                                  description: Value to be applied to target field. Must be
                                    empty when operator is Remove.
                                  x-kubernetes-preserve-unknown-fields: true
                              required:
                              - operator
                              - path
                              type: object
                            type: array
                        type: object
                      resourceSelectors:
                        description: ResourceSelectors restricts resource types that this
                          override policy applies to. nil means matching all resources.
                        items:
                          description: ResourceSelector the resources will be selected.
                          properties:
                            apiVersion:
                              description: APIVersion represents the API version of the target
                                resources.
                              type: string
                            kind:
                              description: Kind represents the Kind of the target resources.
                              type: string
                            labelSelector:
                              description: A label query over a set of resources. If name
                                is not empty, labelSelector will be ignored.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector
                                    requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector
                                      that contains values, a key, and an operator that relates
                                      the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are In, NotIn,
                                          Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values.
                                          If the operator is In or NotIn, the values array
                                          must be non-empty. If the operator is Exists or
                                          DoesNotExist, the values array must be empty. This
                                          array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs.
                                    A single {key,value} in the matchLabels map is equivalent
                                    to an element of matchExpressions, whose key field is
                                    "key", the operator is "In", and the values array contains
                                    only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            name:
                              description: Name of the target resource. Default is empty,
                                which means selecting all resources.
                              type: string
                            namespace:
                              description: Namespace of the target resource. Default is empty,
                                which means inherit from the parent object scope.
                              type: string
                          required:
                          - apiVersion
                          - kind
                          type: object
                        type: array
                      targetCluster:
                        description: "TargetCluster defines restrictions on this override
                          policy that only applies to resources propagated to the matching
                          clusters. nil means matching all clusters. \n Deprecated: This filed
                          is deprecated in v1.0 and please use the OverrideRules instead."
                        properties:
                          clusterNames:
                            description: ClusterNames is the list of clusters to be selected.
                            items:
                              type: string
                            type: array
                          exclude:
                            description: ExcludedClusters is the list of clusters to be ignored.
                            items:
                              type: string
                            type: array
                          fieldSelector:
                            description: FieldSelector is a filter to select member clusters
                              by fields. If non-nil and non-empty, only the clusters match
                              this filter will be selected.
                            properties:
                              matchExpressions:
                                description: A list of field selector requirements.
                                items:
                                  description: A node selector requirement is a selector that
                                    contains values, a key, and an operator that relates the
                                    key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector applies
                                        to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship to a set
                                        of values. Valid operators are In, NotIn, Exists,
                                        DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the operator
                                        is In or NotIn, the values array must be non-empty.
                                        If the operator is Exists or DoesNotExist, the values
                                        array must be empty. If the operator is Gt or Lt,
                                        the values array must have a single element, which
                                        will be interpreted as an integer. This array is replaced
                                        during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                            type: object
                          labelSelector:
                            description: LabelSelector is a filter to select member clusters
                              by labels. If non-nil and non-empty, only the clusters match
                              this filter will be selected.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that relates
                                    the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In, NotIn,
                                        Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If
                                        the operator is In or NotIn, the values array must
                                        be non-empty. If the operator is Exists or DoesNotExist,
                                        the values array must be empty. This array is replaced
                                        during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs. A
                                  single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field is "key",
                                  the operator is "In", and the values array contains only
                                  "value". The requirements are ANDed.
                                type: object
                            type: object
                        type: object
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_clusterpropagationpolicies.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: clusterpropagationpolicies.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: ClusterPropagationPolicy
            listKind: ClusterPropagationPolicyList
            plural: clusterpropagationpolicies
            shortNames:
            - cpp
            singular: clusterpropagationpolicy
          scope: Cluster
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: 'ClusterPropagationPolicy represents the cluster-wide policy
                  that propagates a group of resources to one or more clusters. Different
                  with PropagationPolicy that could only propagate resources in its own namespace,
                  ClusterPropagationPolicy is able to propagate cluster level resources and
                  resources in any namespace other than system reserved ones. System reserved
                  namespaces are: karmada-system, karmada-cluster, karmada-es-*.'
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of ClusterPropagationPolicy.
                    properties:
                      association:
                        description: 'Association tells if relevant resources should be selected
                          automatically. e.g. a ConfigMap referred by a Deployment. default
                          false. Deprecated: in favor of PropagateDeps.'
                        type: boolean
                      dependentOverrides:
                        description: "DependentOverrides represents the list of overrides(OverridePolicy)
                          which must present before the current PropagationPolicy takes effect.
                          \n It used to explicitly specify overrides which current PropagationPolicy
                          rely on. A typical scenario is the users create OverridePolicy(ies)
                          and resources at the same time, they want to ensure the new-created
                          policies would be adopted. \n Note: For the overrides, OverridePolicy(ies)
                          in current namespace and ClusterOverridePolicy(ies), which not present
                          in this list will still be applied if they matches the resources."
                        items:
                          type: string
                        type: array
                      placement:
                        description: Placement represents the rule for select clusters to
                          propagate resources.
                        properties:
                          clusterAffinity:
                            description: ClusterAffinity represents scheduling restrictions
                              to a certain set of clusters. If not set, any cluster can be
                              scheduling candidate.
                            properties:
                              clusterNames:
                                description: ClusterNames is the list of clusters to be selected.
                                items:
                                  type: string
                                type: array
                              exclude:
                                description: ExcludedClusters is the list of clusters to be
                                  ignored.
                                items:
                                  type: string
                                type: array
                              fieldSelector:
                                description: FieldSelector is a filter to select member clusters
                                  by fields. If non-nil and non-empty, only the clusters match
                                  this filter will be selected.
                                properties:
                                  matchExpressions:
                                    description: A list of field selector requirements.
                                    items:
                                      description: A node selector requirement is a selector
                                        that contains values, a key, and an operator that
                                        relates the key and values.
                                      properties:
                                        key:
                                          description: The label key that the selector applies
                                            to.
                                          type: string
                                        operator:
                                          description: Represents a key's relationship to
                                            a set of values. Valid operators are In, NotIn,
                                            Exists, DoesNotExist. Gt, and Lt.
                                          type: string
                                        values:
                                          description: An array of string values. If the operator
                                            is In or NotIn, the values array must be non-empty.
                                            If the operator is Exists or DoesNotExist, the
                                            values array must be empty. If the operator is
                                            Gt or Lt, the values array must have a single
                                            element, which will be interpreted as an integer.
                                            This array is replaced during a strategic merge
                                            patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                type: object
                              labelSelector:
                                description: LabelSelector is a filter to select member clusters
                                  by labels. If non-nil and non-empty, only the clusters match
                                  this filter will be selected.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label selector
                                      requirements. The requirements are ANDed.
                                    items:
                                      description: A label selector requirement is a selector
                                        that contains values, a key, and an operator that
                                        relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the selector
                                            applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's relationship
                                            to a set of values. Valid operators are In, NotIn,
                                            Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string values.
                                            If the operator is In or NotIn, the values array
                                            must be non-empty. If the operator is Exists or
                                            DoesNotExist, the values array must be empty.
                                            This array is replaced during a strategic merge
                                            patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value} pairs.
                                      A single {key,value} in the matchLabels map is equivalent
                                      to an element of matchExpressions, whose key field is
                                      "key", the operator is "In", and the values array contains
                                      only "value". The requirements are ANDed.
                                    type: object
                                type: object
                            type: object
                          clusterTolerations:
                            description: ClusterTolerations represents the tolerations.
                            items:
                              description: The pod this Toleration is attached to tolerates
                                any taint that matches the triple <key,value,effect> using
                                the matching operator <operator>.
                              properties:
                                effect:
                                  description: Effect indicates the taint effect to match.
                                    Empty means match all taint effects. When specified, allowed
                                    values are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Key is the taint key that the toleration applies
                                    to. Empty means match all taint keys. If the key is empty,
                                    operator must be Exists; this combination means to match
                                    all values and all keys.
                                  type: string
                                operator:
                                  description: Operator represents a key's relationship to
                                    the value. Valid operators are Exists and Equal. Defaults
                                    to Equal. Exists is equivalent to wildcard for value,
                                    so that a pod can tolerate all taints of a particular
                                    category.
                                  type: string
                                tolerationSeconds:
                                  description: TolerationSeconds represents the period of
                                    time the toleration (which must be of effect NoExecute,
                                    otherwise this field is ignored) tolerates the taint.
                                    By default, it is not set, which means tolerate the taint
                                    forever (do not evict). Zero and negative values will
                                    be treated as 0 (evict immediately) by the system.
                                  format: int64
                                  type: integer
                                value:
                                  description: Value is the taint value the toleration matches
                                    to. If the operator is Exists, the value should be empty,
                                    otherwise just a regular string.
                                  type: string
                              type: object
                            type: array
                          replicaScheduling:
                            description: ReplicaScheduling represents the scheduling policy
                              on dealing with the number of replicas when propagating resources
                              that have replicas in spec (e.g. deployments, statefulsets)
                              to member clusters.
                            properties:
                              replicaDivisionPreference:
                                description: ReplicaDivisionPreference determines how the
                                  replicas is divided when ReplicaSchedulingType is "Divided".
                                  Valid options are Aggregated and Weighted. "Aggregated"
                                  divides replicas into clusters as few as possible, while
                                  respecting clusters' resource availabilities during the
                                  division. "Weighted" divides replicas by weight according
                                  to WeightPreference.
                                enum:
                                - Aggregated
                                - Weighted
                                type: string
                              replicaSchedulingType:
                                description: ReplicaSchedulingType determines how the replicas
                                  is scheduled when karmada propagating a resource. Valid
                                  options are Duplicated and Divided. "Duplicated" duplicates
                                  the same replicas to each candidate member cluster from
                                  resource. "Divided" divides replicas into parts according
                                  to number of valid candidate member clusters, and exact
                                  replicas for each cluster are determined by ReplicaDivisionPreference.
                                enum:
                                - Duplicated
                                - Divided
                                type: string
                              weightPreference:
                                description: WeightPreference describes weight for each cluster
                                  or for each group of cluster If ReplicaDivisionPreference
                                  is set to "Weighted", and WeightPreference is not set, scheduler
                                  will weight all clusters the same.
                                properties:
                                  dynamicWeight:
                                    description: DynamicWeight specifies the factor to generates
                                      dynamic weight list. If specified, StaticWeightList
                                      will be ignored.
                                    enum:
                                    - AvailableReplicas
                                    type: string
                                  staticWeightList:
                                    description: StaticWeightList defines the static cluster
                                      weight.
                                    items:
                                      description: StaticClusterWeight defines the static
                                        cluster weight.
                                      properties:
                                        targetCluster:
                                          description: TargetCluster describes the filter
                                            to select clusters.
                                          properties:
                                            clusterNames:
                                              description: ClusterNames is the list of clusters
                                                to be selected.
                                              items:
                                                type: string
                                              type: array
                                            exclude:
                                              description: ExcludedClusters is the list of
                                                clusters to be ignored.
                                              items:
                                                type: string
                                              type: array
                                            fieldSelector:
                                              description: FieldSelector is a filter to select
                                                member clusters by fields. If non-nil and
                                                non-empty, only the clusters match this filter
                                                will be selected.
                                              properties:
                                                matchExpressions:
                                                  description: A list of field selector requirements.
                                                  items:
                                                    description: A node selector requirement
                                                      is a selector that contains values,
                                                      a key, and an operator that relates
                                                      the key and values.
                                                    properties:
                                                      key:
                                                        description: The label key that the
                                                          selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Represents a key's relationship
                                                          to a set of values. Valid operators
                                                          are In, NotIn, Exists, DoesNotExist.
                                                          Gt, and Lt.
                                                        type: string
                                                      values:
                                                        description: An array of string values.
                                                          If the operator is In or NotIn,
                                                          the values array must be non-empty.
                                                          If the operator is Exists or DoesNotExist,
                                                          the values array must be empty.
                                                          If the operator is Gt or Lt, the
                                                          values array must have a single
                                                          element, which will be interpreted
                                                          as an integer. This array is replaced
                                                          during a strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                              type: object
                                            labelSelector:
                                              description: LabelSelector is a filter to select
                                                member clusters by labels. If non-nil and
                                                non-empty, only the clusters match this filter
                                                will be selected.
                                              properties:
                                                matchExpressions:
                                                  description: matchExpressions is a list
                                                    of label selector requirements. The requirements
                                                    are ANDed.
                                                  items:
                                                    description: A label selector requirement
                                                      is a selector that contains values,
                                                      a key, and an operator that relates
                                                      the key and values.
                                                    properties:
                                                      key:
                                                        description: key is the label key
                                                          that the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: operator represents a
                                                          key's relationship to a set of values.
                                                          Valid operators are In, NotIn, Exists
                                                          and DoesNotExist.
                                                        type: string
                                                      values:
                                                        description: values is an array of
                                                          string values. If the operator is
                                                          In or NotIn, the values array must
                                                          be non-empty. If the operator is
                                                          Exists or DoesNotExist, the values
                                                          array must be empty. This array
                                                          is replaced during a strategic merge
                                                          patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: matchLabels is a map of {key,value}
                                                    pairs. A single {key,value} in the matchLabels
                                                    map is equivalent to an element of matchExpressions,
                                                    whose key field is "key", the operator
                                                    is "In", and the values array contains
                                                    only "value". The requirements are ANDed.
                                                  type: object
                                              type: object
                                          type: object
                                        weight:
                                          description: Weight expressing the preference to
                                            the cluster(s) specified by 'TargetCluster'.
                                          format: int64
                                          minimum: 1
                                          type: integer
                                      required:
                                      - targetCluster
                                      - weight
                                      type: object
                                    type: array
                                type: object
                            type: object
                          spreadConstraints:
                            description: SpreadConstraints represents a list of the scheduling
                              constraints.
                            items:
                              description: SpreadConstraint represents the spread constraints
                                on resources.
                              properties:
                                maxGroups:
                                  description: MaxGroups restricts the maximum number of cluster
                                    groups to be selected.
                                  type: integer
                                minGroups:
                                  description: MinGroups restricts the minimum number of cluster
                                    groups to be selected. Defaults to 1.
                                  type: integer
                                spreadByField:
                                  description: 'SpreadByField represents the fields on Karmada
                                    cluster API used for dynamically grouping member clusters
                                    into different groups. Resources will be spread among
                                    different cluster groups. Available fields for spreading
                                    are: cluster, region, zone, and provider. SpreadByField
                                    should not co-exist with SpreadByLabel. If both SpreadByField
                                    and SpreadByLabel are empty, SpreadByField will be set
                                    to "cluster" by system.'
                                  enum:
                                  - cluster
                                  - region
                                  - zone
                                  - provider
                                  type: string
                                spreadByLabel:
                                  description: SpreadByLabel represents the label key used
                                    for grouping member clusters into different groups. Resources
                                    will be spread among different cluster groups. SpreadByLabel
                                    should not co-exist with SpreadByField.
                                  type: string
                              type: object
                            type: array
                        type: object
                      propagateDeps:
                        description: "PropagateDeps tells if relevant resources should be
                          propagated automatically. Take 'Deployment' which referencing 'ConfigMap'
                          and 'Secret' as an example, when 'propagateDeps' is 'true', the
                          referencing resources could be omitted(for saving config effort)
                          from 'resourceSelectors' as they will be propagated along with the
                          Deployment. In addition to the propagating process, the referencing
                          resources will be migrated along with the Deployment in the fail-over
                          scenario. \n Defaults to false."
                        type: boolean
                      resourceSelectors:
                        description: ResourceSelectors used to select resources.
                        items:
                          description: ResourceSelector the resources will be selected.
                          properties:
                            apiVersion:
                              description: APIVersion represents the API version of the target
                                resources.
                              type: string
                            kind:
                              description: Kind represents the Kind of the target resources.
                              type: string
                            labelSelector:
                              description: A label query over a set of resources. If name
                                is not empty, labelSelector will be ignored.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector
                                    requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector
                                      that contains values, a key, and an operator that relates
                                      the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are In, NotIn,
                                          Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values.
                                          If the operator is In or NotIn, the values array
                                          must be non-empty. If the operator is Exists or
                                          DoesNotExist, the values array must be empty. This
                                          array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs.
                                    A single {key,value} in the matchLabels map is equivalent
                                    to an element of matchExpressions, whose key field is
                                    "key", the operator is "In", and the values array contains
                                    only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            name:
                              description: Name of the target resource. Default is empty,
                                which means selecting all resources.
                              type: string
                            namespace:
                              description: Namespace of the target resource. Default is empty,
                                which means inherit from the parent object scope.
                              type: string
                          required:
                          - apiVersion
                          - kind
                          type: object
                        type: array
                      schedulerName:
                        description: SchedulerName represents which scheduler to proceed the
                          scheduling. If specified, the policy will be dispatched by specified
                          scheduler. If not specified, the policy will be dispatched by default
                          scheduler.
                        type: string
                    required:
                    - resourceSelectors
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_federatedresourcequotas.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: federatedresourcequotas.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: FederatedResourceQuota
            listKind: FederatedResourceQuotaList
            plural: federatedresourcequotas
            singular: federatedresourcequota
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: FederatedResourceQuota sets aggregate quota restrictions enforced
                  per namespace across all clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec defines the desired quota.
                    properties:
                      overall:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: Overall is the set of desired hard limits for each named
                          resource.
                        type: object
                      staticAssignments:
                        description: 'StaticAssignments represents the subset of desired hard
                          limits for each cluster. Note: for clusters not present in this
                          list, Karmada will set an empty ResourceQuota to them, which means
                          these clusters will have no quotas in the referencing namespace.'
                        items:
                          description: StaticClusterAssignment represents the set of desired
                            hard limits for a specific cluster.
                          properties:
                            clusterName:
                              description: ClusterName is the name of the cluster the limits
                                enforce to.
                              type: string
                            hard:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: Hard is the set of desired hard limits for each
                                named resource.
                              type: object
                          required:
                          - clusterName
                          - hard
                          type: object
                        type: array
                    required:
                    - overall
                    type: object
                  status:
                    description: Status defines the actual enforced quota and its current
                      usage.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus is the observed quota usage of each
                          cluster.
                        items:
                          description: ClusterQuotaStatus represents the set of desired limits
                            and observed usage for a specific cluster.
                          properties:
                            clusterName:
                              description: ClusterName is the name of the cluster the limits
                                enforce to.
                              type: string
                            hard:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Hard is the set of enforced hard limits for each
                                named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
                              type: object
                            used:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: Used is the current observed total usage of the
                                resource in the namespace.
                              type: object
                          required:
                          - clusterName
                          type: object
                        type: array
                      overall:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: Overall is the set of enforced hard limits for each named
                          resource.
                        type: object
                      overallUsed:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: OverallUsed is the current observed total usage of the
                          resource in the namespace.
                        type: object
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_overridepolicies.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: overridepolicies.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: OverridePolicy
            listKind: OverridePolicyList
            plural: overridepolicies
            shortNames:
            - op
            singular: overridepolicy
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: OverridePolicy represents the policy that overrides a group of
                  resources to one or more clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of OverridePolicy.
                    properties:
                      overrideRules:
                        description: OverrideRules defines a collection of override rules
                          on target clusters.
                        items:
                          description: RuleWithCluster defines the override rules on clusters.
                          properties:
                            overriders:
                              description: Overriders represents the override rules that would
                                apply on resources
                              properties:
                                argsOverrider:
                                  description: ArgsOverrider represents the rules dedicated
                                    to handling container args
                                  items:
                                    description: CommandArgsOverrider represents the rules
                                      dedicated to handling command/args overrides.
                                    properties:
                                      containerName:
                                        description: The name of container
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the command/args.
                                        enum:
                                        - add
                                        - remove
                                        type: string
                                      value:
                                        description: Value to be applied to command/args.
                                          Items in Value which will be appended after command/args
                                          when Operator is 'add'. Items in Value which match
                                          in command/args will be deleted when Operator is
                                          'remove'. If Value is empty, then the command/args
                                          will remain the same.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - containerName
                                    - operator
                                    type: object
                                  type: array
                                commandOverrider:
                                  description: CommandOverrider represents the rules dedicated
                                    to handling container command
                                  items:
                                    description: CommandArgsOverrider represents the rules
                                      dedicated to handling command/args overrides.
                                    properties:
                                      containerName:
                                        description: The name of container
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the command/args.
                                        enum:
                                        - add
                                        - remove
                                        type: string
                                      value:
                                        description: Value to be applied to command/args.
                                          Items in Value which will be appended after command/args
                                          when Operator is 'add'. Items in Value which match
                                          in command/args will be deleted when Operator is
                                          'remove'. If Value is empty, then the command/args
                                          will remain the same.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - containerName
                                    - operator
                                    type: object
                                  type: array
                                imageOverrider:
                                  description: ImageOverrider represents the rules dedicated
                                    to handling image overrides.
                                  items:
                                    description: ImageOverrider represents the rules dedicated
                                      to handling image overrides.
                                    properties:
                                      component:
                                        description: 'Component is part of image name. Basically
                                          we presume an image can be made of ''[registry/]repository[:tag]''.
                                          The registry could be: - k8s.gcr.io - fictional.registry.example:10443
                                          The repository could be: - kube-apiserver - fictional/nginx
                                          The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c'
                                        enum:
                                        - Registry
                                        - Repository
                                        - Tag
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the image.
                                        enum:
                                        - add
                                        - remove
                                        - replace
                                        type: string
                                      predicate:
                                        description: "Predicate filters images before applying
                                          the rule. \n Defaults to nil, in that case, the
                                          system will automatically detect image fields if
                                          the resource type is Pod, ReplicaSet, Deployment
                                          or StatefulSet by following rule: - Pod: spec/containers/<N>/image
                                          - ReplicaSet: spec/template/spec/containers/<N>/image
                                          - Deployment: spec/template/spec/containers/<N>/image
                                          - StatefulSet: spec/template/spec/containers/<N>/image
                                          In addition, all images will be processed if the
                                          resource object has more than one containers. \n
                                          If not nil, only images matches the filters will
                                          be processed."
                                        properties:
                                          path:
                                            description: Path indicates the path of target
                                              field
                                            type: string
                                        required:
                                        - path
                                        type: object
                                      value:
                                        description: Value to be applied to image. Must not
                                          be empty when operator is 'add' or 'replace'. Defaults
                                          to empty and ignored when operator is 'remove'.
                                        type: string
                                    required:
                                    - component
                                    - operator
                                    type: object
                                  type: array
                                plaintext:
                                  description: Plaintext represents override rules defined
                                    with plaintext overriders.
                                  items:
                                    description: PlaintextOverrider is a simple overrider
                                      that overrides target fields according to path, operator
                                      and value.
                                    properties:
                                      operator:
                                        description: 'Operator indicates the operation on
                                          target field. Available operators are: add, update
                                          and remove.'
                                        enum:
                                        - add
                                        - remove
                                        - replace
                                        type: string
                                      path:
                                        description: Path indicates the path of target field
                                        type: string
                                      value:
                                        description: Value to be applied to target field.
                                          Must be empty when operator is Remove.
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - operator
                                    - path
                                    type: object
                                  type: array
                              type: object
                            targetCluster:
                              description: TargetCluster defines restrictions on this override
                                policy that only applies to resources propagated to the matching
                                clusters. nil means matching all clusters.
                              properties:
                                clusterNames:
                                  description: ClusterNames is the list of clusters to be
                                    selected.
                                  items:
                                    type: string
                                  type: array
                                exclude:
                                  description: ExcludedClusters is the list of clusters to
                                    be ignored.
                                  items:
                                    type: string
                                  type: array
                                fieldSelector:
                                  description: FieldSelector is a filter to select member
                                    clusters by fields. If non-nil and non-empty, only the
                                    clusters match this filter will be selected.
                                  properties:
                                    matchExpressions:
                                      description: A list of field selector requirements.
                                      items:
                                        description: A node selector requirement is a selector
                                          that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: The label key that the selector applies
                                              to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship to
                                              a set of values. Valid operators are In, NotIn,
                                              Exists, DoesNotExist. Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values. If the
                                              operator is In or NotIn, the values array must
                                              be non-empty. If the operator is Exists or DoesNotExist,
                                              the values array must be empty. If the operator
                                              is Gt or Lt, the values array must have a single
                                              element, which will be interpreted as an integer.
                                              This array is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                labelSelector:
                                  description: LabelSelector is a filter to select member
                                    clusters by labels. If non-nil and non-empty, only the
                                    clusters match this filter will be selected.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector
                                        requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector
                                          that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship
                                              to a set of values. Valid operators are In,
                                              NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values.
                                              If the operator is In or NotIn, the values array
                                              must be non-empty. If the operator is Exists
                                              or DoesNotExist, the values array must be empty.
                                              This array is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs.
                                        A single {key,value} in the matchLabels map is equivalent
                                        to an element of matchExpressions, whose key field
                                        is "key", the operator is "In", and the values array
                                        contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                              type: object
                          required:
                          - overriders
                          type: object
                        type: array
                      overriders:
                        description: "Overriders represents the override rules that would
                          apply on resources \n Deprecated: This filed is deprecated in v1.0
                          and please use the OverrideRules instead."
                        properties:
                          argsOverrider:
                            description: ArgsOverrider represents the rules dedicated to handling
                              container args
                            items:
                              description: CommandArgsOverrider represents the rules dedicated
                                to handling command/args overrides.
                              properties:
                                containerName:
                                  description: The name of container
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the command/args.
                                  enum:
                                  - add
                                  - remove
                                  type: string
                                value:
                                  description: Value to be applied to command/args. Items
                                    in Value which will be appended after command/args when
                                    Operator is 'add'. Items in Value which match in command/args
                                    will be deleted when Operator is 'remove'. If Value is
                                    empty, then the command/args will remain the same.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - containerName
                              - operator
                              type: object
                            type: array
                          commandOverrider:
                            description: CommandOverrider represents the rules dedicated to
                              handling container command
                            items:
                              description: CommandArgsOverrider represents the rules dedicated
                                to handling command/args overrides.
                              properties:
                                containerName:
                                  description: The name of container
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the command/args.
                                  enum:
                                  - add
                                  - remove
                                  type: string
                                value:
                                  description: Value to be applied to command/args. Items
                                    in Value which will be appended after command/args when
                                    Operator is 'add'. Items in Value which match in command/args
                                    will be deleted when Operator is 'remove'. If Value is
                                    empty, then the command/args will remain the same.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - containerName
                              - operator
                              type: object
                            type: array
                          imageOverrider:
                            description: ImageOverrider represents the rules dedicated to
                              handling image overrides.
                            items:
                              description: ImageOverrider represents the rules dedicated to
                                handling image overrides.
                              properties:
                                component:
                                  description: 'Component is part of image name. Basically
                                    we presume an image can be made of ''[registry/]repository[:tag]''.
                                    The registry could be: - k8s.gcr.io - fictional.registry.example:10443
                                    The repository could be: - kube-apiserver - fictional/nginx
                                    The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c'
                                  enum:
                                  - Registry
                                  - Repository
                                  - Tag
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the image.
                                  enum:
                                  - add
                                  - remove
                                  - replace
                                  type: string
                                predicate:
                                  description: "Predicate filters images before applying the
                                    rule. \n Defaults to nil, in that case, the system will
                                    automatically detect image fields if the resource type
                                    is Pod, ReplicaSet, Deployment or StatefulSet by following
                                    rule: - Pod: spec/containers/<N>/image - ReplicaSet: spec/template/spec/containers/<N>/image
                                    - Deployment: spec/template/spec/containers/<N>/image
                                    - StatefulSet: spec/template/spec/containers/<N>/image
                                    In addition, all images will be processed if the resource
                                    object has more than one containers. \n If not nil, only
                                    images matches the filters will be processed."
                                  properties:
                                    path:
                                      description: Path indicates the path of target field
                                      type: string
                                  required:
                                  - path
                                  type: object
                                value:
                                  description: Value to be applied to image. Must not be empty
                                    when operator is 'add' or 'replace'. Defaults to empty
                                    and ignored when operator is 'remove'.
                                  type: string
                              required:
                              - component
                              - operator
                              type: object
                            type: array
                          plaintext:
                            description: Plaintext represents override rules defined with
                              plaintext overriders.
                            items:
                              description: PlaintextOverrider is a simple overrider that overrides
                                target fields according to path, operator and value.
                              properties:
                                operator:
                                  description: 'Operator indicates the operation on target
                                    field. Available operators are: add, update and remove.'
                                  enum:
                                  - add
                                  - remove
                                  - replace
                                  type: string
                                path:
                                  description: Path indicates the path of target field
                                  type: string
                                value:
                                  description: Value to be applied to target field. Must be
                                    empty when operator is Remove.
                                  x-kubernetes-preserve-unknown-fields: true
                              required:
                              - operator
                              - path
                              type: object
                            type: array
                        type: object
                      resourceSelectors:
                        description: ResourceSelectors restricts resource types that this
                          override policy applies to. nil means matching all resources.
                        items:
                          description: ResourceSelector the resources will be selected.
                          properties:
                            apiVersion:
                              description: APIVersion represents the API version of the target
                                resources.
                              type: string
                            kind:
                              description: Kind represents the Kind of the target resources.
                              type: string
                            labelSelector:
                              description: A label query over a set of resources. If name
                                is not empty, labelSelector will be ignored.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector
                                    requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector
                                      that contains values, a key, and an operator that relates
                                      the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are In, NotIn,
                                          Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values.
                                          If the operator is In or NotIn, the values array
                                          must be non-empty. If the operator is Exists or
                                          DoesNotExist, the values array must be empty. This
                                          array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs.
                                    A single {key,value} in the matchLabels map is equivalent
                                    to an element of matchExpressions, whose key field is
                                    "key", the operator is "In", and the values array contains
                                    only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            name:
                              description: Name of the target resource. Default is empty,
                                which means selecting all resources.
                              type: string
                            namespace:
                              description: Namespace of the target resource. Default is empty,
                                which means inherit from the parent object scope.
                              type: string
                          required:
                          - apiVersion
                          - kind
                          type: object
                        type: array
                      targetCluster:
                        description: "TargetCluster defines restrictions on this override
                          policy that only applies to resources propagated to the matching
                          clusters. nil means matching all clusters. \n Deprecated: This filed
                          is deprecated in v1.0 and please use the OverrideRules instead."
                        properties:
                          clusterNames:
                            description: ClusterNames is the list of clusters to be selected.
                            items:
                              type: string
                            type: array
                          exclude:
                            description: ExcludedClusters is the list of clusters to be ignored.
                            items:
                              type: string
                            type: array
                          fieldSelector:
                            description: FieldSelector is a filter to select member clusters
                              by fields. If non-nil and non-empty, only the clusters match
                              this filter will be selected.
                            properties:
                              matchExpressions:
                                description: A list of field selector requirements.
                                items:
                                  description: A node selector requirement is a selector that
                                    contains values, a key, and an operator that relates the
                                    key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector applies
                                        to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship to a set
                                        of values. Valid operators are In, NotIn, Exists,
                                        DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the operator
                                        is In or NotIn, the values array must be non-empty.
                                        If the operator is Exists or DoesNotExist, the values
                                        array must be empty. If the operator is Gt or Lt,
                                        the values array must have a single element, which
                                        will be interpreted as an integer. This array is replaced
                                        during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                            type: object
                          labelSelector:
                            description: LabelSelector is a filter to select member clusters
                              by labels. If non-nil and non-empty, only the clusters match
                              this filter will be selected.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that relates
                                    the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In, NotIn,
                                        Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If
                                        the operator is In or NotIn, the values array must
                                        be non-empty. If the operator is Exists or DoesNotExist,
                                        the values array must be empty. This array is replaced
                                        during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs. A
                                  single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field is "key",
                                  the operator is "In", and the values array contains only
                                  "value". The requirements are ANDed.
                                type: object
                            type: object
                        type: object
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_propagationpolicies.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: propagationpolicies.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: PropagationPolicy
            listKind: PropagationPolicyList
            plural: propagationpolicies
            shortNames:
            - pp
            singular: propagationpolicy
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: PropagationPolicy represents the policy that propagates a group
                  of resources to one or more clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of PropagationPolicy.
                    properties:
                      association:
                        description: 'Association tells if relevant resources should be selected
                          automatically. e.g. a ConfigMap referred by a Deployment. default
                          false. Deprecated: in favor of PropagateDeps.'
                        type: boolean
                      dependentOverrides:
                        description: "DependentOverrides represents the list of overrides(OverridePolicy)
                          which must present before the current PropagationPolicy takes effect.
                          \n It used to explicitly specify overrides which current PropagationPolicy
                          rely on. A typical scenario is the users create OverridePolicy(ies)
                          and resources at the same time, they want to ensure the new-created
                          policies would be adopted. \n Note: For the overrides, OverridePolicy(ies)
                          in current namespace and ClusterOverridePolicy(ies), which not present
                          in this list will still be applied if they matches the resources."
                        items:
                          type: string
                        type: array
                      placement:
                        description: Placement represents the rule for select clusters to
                          propagate resources.
                        properties:
                          clusterAffinity:
                            description: ClusterAffinity represents scheduling restrictions
                              to a certain set of clusters. If not set, any cluster can be
                              scheduling candidate.
                            properties:
                              clusterNames:
                                description: ClusterNames is the list of clusters to be selected.
                                items:
                                  type: string
                                type: array
                              exclude:
                                description: ExcludedClusters is the list of clusters to be
                                  ignored.
                                items:
                                  type: string
                                type: array
                              fieldSelector:
                                description: FieldSelector is a filter to select member clusters
                                  by fields. If non-nil and non-empty, only the clusters match
                                  this filter will be selected.
                                properties:
                                  matchExpressions:
                                    description: A list of field selector requirements.
                                    items:
                                      description: A node selector requirement is a selector
                                        that contains values, a key, and an operator that
                                        relates the key and values.
                                      properties:
                                        key:
                                          description: The label key that the selector applies
                                            to.
                                          type: string
                                        operator:
                                          description: Represents a key's relationship to
                                            a set of values. Valid operators are In, NotIn,
                                            Exists, DoesNotExist. Gt, and Lt.
                                          type: string
                                        values:
                                          description: An array of string values. If the operator
                                            is In or NotIn, the values array must be non-empty.
                                            If the operator is Exists or DoesNotExist, the
                                            values array must be empty. If the operator is
                                            Gt or Lt, the values array must have a single
                                            element, which will be interpreted as an integer.
                                            This array is replaced during a strategic merge
                                            patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                type: object
                              labelSelector:
                                description: LabelSelector is a filter to select member clusters
                                  by labels. If non-nil and non-empty, only the clusters match
                                  this filter will be selected.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label selector
                                      requirements. The requirements are ANDed.
                                    items:
                                      description: A label selector requirement is a selector
                                        that contains values, a key, and an operator that
                                        relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the selector
                                            applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's relationship
                                            to a set of values. Valid operators are In, NotIn,
                                            Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string values.
                                            If the operator is In or NotIn, the values array
                                            must be non-empty. If the operator is Exists or
                                            DoesNotExist, the values array must be empty.
                                            This array is replaced during a strategic merge
                                            patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value} pairs.
                                      A single {key,value} in the matchLabels map is equivalent
                                      to an element of matchExpressions, whose key field is
                                      "key", the operator is "In", and the values array contains
                                      only "value". The requirements are ANDed.
                                    type: object
                                type: object
                            type: object
                          clusterTolerations:
                            description: ClusterTolerations represents the tolerations.
                            items:
                              description: The pod this Toleration is attached to tolerates
                                any taint that matches the triple <key,value,effect> using
                                the matching operator <operator>.
                              properties:
                                effect:
                                  description: Effect indicates the taint effect to match.
                                    Empty means match all taint effects. When specified, allowed
                                    values are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Key is the taint key that the toleration applies
                                    to. Empty means match all taint keys. If the key is empty,
                                    operator must be Exists; this combination means to match
                                    all values and all keys.
                                  type: string
                                operator:
                                  description: Operator represents a key's relationship to
                                    the value. Valid operators are Exists and Equal. Defaults
                                    to Equal. Exists is equivalent to wildcard for value,
                                    so that a pod can tolerate all taints of a particular
                                    category.
                                  type: string
                                tolerationSeconds:
                                  description: TolerationSeconds represents the period of
                                    time the toleration (which must be of effect NoExecute,
                                    otherwise this field is ignored) tolerates the taint.
                                    By default, it is not set, which means tolerate the taint
                                    forever (do not evict). Zero and negative values will
                                    be treated as 0 (evict immediately) by the system.
                                  format: int64
                                  type: integer
                                value:
                                  description: Value is the taint value the toleration matches
                                    to. If the operator is Exists, the value should be empty,
                                    otherwise just a regular string.
                                  type: string
                              type: object
                            type: array
                          replicaScheduling:
                            description: ReplicaScheduling represents the scheduling policy
                              on dealing with the number of replicas when propagating resources
                              that have replicas in spec (e.g. deployments, statefulsets)
                              to member clusters.
                            properties:
                              replicaDivisionPreference:
                                description: ReplicaDivisionPreference determines how the
                                  replicas is divided when ReplicaSchedulingType is "Divided".
                                  Valid options are Aggregated and Weighted. "Aggregated"
                                  divides replicas into clusters as few as possible, while
                                  respecting clusters' resource availabilities during the
                                  division. "Weighted" divides replicas by weight according
                                  to WeightPreference.
                                enum:
                                - Aggregated
                                - Weighted
                                type: string
                              replicaSchedulingType:
                                description: ReplicaSchedulingType determines how the replicas
                                  is scheduled when karmada propagating a resource. Valid
                                  options are Duplicated and Divided. "Duplicated" duplicates
                                  the same replicas to each candidate member cluster from
                                  resource. "Divided" divides replicas into parts according
                                  to number of valid candidate member clusters, and exact
                                  replicas for each cluster are determined by ReplicaDivisionPreference.
                                enum:
                                - Duplicated
                                - Divided
                                type: string
                              weightPreference:
                                description: WeightPreference describes weight for each cluster
                                  or for each group of cluster If ReplicaDivisionPreference
                                  is set to "Weighted", and WeightPreference is not set, scheduler
                                  will weight all clusters the same.
                                properties:
                                  dynamicWeight:
                                    description: DynamicWeight specifies the factor to generates
                                      dynamic weight list. If specified, StaticWeightList
                                      will be ignored.
                                    enum:
                                    - AvailableReplicas
                                    type: string
                                  staticWeightList:
                                    description: StaticWeightList defines the static cluster
                                      weight.
                                    items:
                                      description: StaticClusterWeight defines the static
                                        cluster weight.
                                      properties:
                                        targetCluster:
                                          description: TargetCluster describes the filter
                                            to select clusters.
                                          properties:
                                            clusterNames:
                                              description: ClusterNames is the list of clusters
                                                to be selected.
                                              items:
                                                type: string
                                              type: array
                                            exclude:
                                              description: ExcludedClusters is the list of
                                                clusters to be ignored.
                                              items:
                                                type: string
                                              type: array
                                            fieldSelector:
                                              description: FieldSelector is a filter to select
                                                member clusters by fields. If non-nil and
                                                non-empty, only the clusters match this filter
                                                will be selected.
                                              properties:
                                                matchExpressions:
                                                  description: A list of field selector requirements.
                                                  items:
                                                    description: A node selector requirement
                                                      is a selector that contains values,
                                                      a key, and an operator that relates
                                                      the key and values.
                                                    properties:
                                                      key:
                                                        description: The label key that the
                                                          selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Represents a key's relationship
                                                          to a set of values. Valid operators
                                                          are In, NotIn, Exists, DoesNotExist.
                                                          Gt, and Lt.
                                                        type: string
                                                      values:
                                                        description: An array of string values.
                                                          If the operator is In or NotIn,
                                                          the values array must be non-empty.
                                                          If the operator is Exists or DoesNotExist,
                                                          the values array must be empty.
                                                          If the operator is Gt or Lt, the
                                                          values array must have a single
                                                          element, which will be interpreted
                                                          as an integer. This array is replaced
                                                          during a strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                              type: object
                                            labelSelector:
                                              description: LabelSelector is a filter to select
                                                member clusters by labels. If non-nil and
                                                non-empty, only the clusters match this filter
                                                will be selected.
                                              properties:
                                                matchExpressions:
                                                  description: matchExpressions is a list
                                                    of label selector requirements. The requirements
                                                    are ANDed.
                                                  items:
                                                    description: A label selector requirement
                                                      is a selector that contains values,
                                                      a key, and an operator that relates
                                                      the key and values.
                                                    properties:
                                                      key:
                                                        description: key is the label key
                                                          that the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: operator represents a
                                                          key's relationship to a set of values.
                                                          Valid operators are In, NotIn, Exists
                                                          and DoesNotExist.
                                                        type: string
                                                      values:
                                                        description: values is an array of
                                                          string values. If the operator is
                                                          In or NotIn, the values array must
                                                          be non-empty. If the operator is
                                                          Exists or DoesNotExist, the values
                                                          array must be empty. This array
                                                          is replaced during a strategic merge
                                                          patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: matchLabels is a map of {key,value}
                                                    pairs. A single {key,value} in the matchLabels
                                                    map is equivalent to an element of matchExpressions,
                                                    whose key field is "key", the operator
                                                    is "In", and the values array contains
                                                    only "value". The requirements are ANDed.
                                                  type: object
                                              type: object
                                          type: object
                                        weight:
                                          description: Weight expressing the preference to
                                            the cluster(s) specified by 'TargetCluster'.
                                          format: int64
                                          minimum: 1
                                          type: integer
                                      required:
                                      - targetCluster
                                      - weight
                                      type: object
                                    type: array
                                type: object
                            type: object
                          spreadConstraints:
                            description: SpreadConstraints represents a list of the scheduling
                              constraints.
                            items:
                              description: SpreadConstraint represents the spread constraints
                                on resources.
                              properties:
                                maxGroups:
                                  description: MaxGroups restricts the maximum number of cluster
                                    groups to be selected.
                                  type: integer
                                minGroups:
                                  description: MinGroups restricts the minimum number of cluster
                                    groups to be selected. Defaults to 1.
                                  type: integer
                                spreadByField:
                                  description: 'SpreadByField represents the fields on Karmada
                                    cluster API used for dynamically grouping member clusters
                                    into different groups. Resources will be spread among
                                    different cluster groups. Available fields for spreading
                                    are: cluster, region, zone, and provider. SpreadByField
                                    should not co-exist with SpreadByLabel. If both SpreadByField
                                    and SpreadByLabel are empty, SpreadByField will be set
                                    to "cluster" by system.'
                                  enum:
                                  - cluster
                                  - region
                                  - zone
                                  - provider
                                  type: string
                                spreadByLabel:
                                  description: SpreadByLabel represents the label key used
                                    for grouping member clusters into different groups. Resources
                                    will be spread among different cluster groups. SpreadByLabel
                                    should not co-exist with SpreadByField.
                                  type: string
                              type: object
                            type: array
                        type: object
                      propagateDeps:
                        description: "PropagateDeps tells if relevant resources should be
                          propagated automatically. Take 'Deployment' which referencing 'ConfigMap'
                          and 'Secret' as an example, when 'propagateDeps' is 'true', the
                          referencing resources could be omitted(for saving config effort)
                          from 'resourceSelectors' as they will be propagated along with the
                          Deployment. In addition to the propagating process, the referencing
                          resources will be migrated along with the Deployment in the fail-over
                          scenario. \n Defaults to false."
                        type: boolean
                      resourceSelectors:
                        description: ResourceSelectors used to select resources.
                        items:
                          description: ResourceSelector the resources will be selected.
                          properties:
                            apiVersion:
                              description: APIVersion represents the API version of the target
                                resources.
                              type: string
                            kind:
                              description: Kind represents the Kind of the target resources.
                              type: string
                            labelSelector:
                              description: A label query over a set of resources. If name
                                is not empty, labelSelector will be ignored.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector
                                    requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector
                                      that contains values, a key, and an operator that relates
                                      the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are In, NotIn,
                                          Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values.
                                          If the operator is In or NotIn, the values array
                                          must be non-empty. If the operator is Exists or
                                          DoesNotExist, the values array must be empty. This
                                          array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs.
                                    A single {key,value} in the matchLabels map is equivalent
                                    to an element of matchExpressions, whose key field is
                                    "key", the operator is "In", and the values array contains
                                    only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            name:
                              description: Name of the target resource. Default is empty,
                                which means selecting all resources.
                              type: string
                            namespace:
                              description: Namespace of the target resource. Default is empty,
                                which means inherit from the parent object scope.
                              type: string
                          required:
                          - apiVersion
                          - kind
                          type: object
                        type: array
                      schedulerName:
                        description: SchedulerName represents which scheduler to proceed the
                          scheduling. If specified, the policy will be dispatched by specified
                          scheduler. If not specified, the policy will be dispatched by default
                          scheduler.
                        type: string
                    required:
                    - resourceSelectors
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      work.karmada.io_clusterresourcebindings.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: clusterresourcebindings.work.karmada.io
        spec:
          group: work.karmada.io
          names:
            categories:
            - karmada-io
            kind: ClusterResourceBinding
            listKind: ClusterResourceBindingList
            plural: clusterresourcebindings
            shortNames:
            - crb
            singular: clusterresourcebinding
          scope: Cluster
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: ClusterResourceBinding represents a binding of a kubernetes resource
                  with a ClusterPropagationPolicy.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior.
                    properties:
                      clusters:
                        description: Clusters represents target member clusters where the
                          resource to be deployed.
                        items:
                          description: TargetCluster represents the identifier of a member
                            cluster.
                          properties:
                            name:
                              description: Name of target cluster.
                              type: string
                            replicas:
                              description: Replicas in target cluster
                              format: int32
                              type: integer
                          required:
                          - name
                          type: object
                        type: array
                      resource:
                        description: Resource represents the Kubernetes resource to be propagated.
                        properties:
                          apiVersion:
                            description: APIVersion represents the API version of the referent.
                            type: string
                          kind:
                            description: Kind represents the Kind of the referent.
                            type: string
                          name:
                            description: Name represents the name of the referent.
                            type: string
                          namespace:
                            description: Namespace represents the namespace for the referent.
                              For non-namespace scoped resources(e.g. 'ClusterRole')，do not
                              need specify Namespace, and for namespace scoped resources,
                              Namespace is required. If Namespace is not specified, means
                              the resource is non-namespace scoped.
                            type: string
                          replicas:
                            description: Replicas represents the replica number of the referencing
                              resource.
                            format: int32
                            type: integer
                          resourcePerReplicas:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ReplicaResourceRequirements represents the resources
                              required by each replica.
                            type: object
                          resourceVersion:
                            description: ResourceVersion represents the internal version of
                              the referenced object, that can be used by clients to determine
                              when object has changed.
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        type: object
                    required:
                    - resource
                    type: object
                  status:
                    description: Status represents the most recently observed status of the
                      ResourceBinding.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus represents status list of the resource
                          running in each member cluster.
                        items:
                          description: AggregatedStatusItem represents status of the resource
                            running in a member cluster.
                          properties:
                            applied:
                              description: Applied represents if the resource referencing
                                by ResourceBinding or ClusterResourceBinding is successfully
                                applied on the cluster.
                              type: boolean
                            appliedMessage:
                              description: AppliedMessage is a human readable message indicating
                                details about the applied status. This is usually holds the
                                error message in case of apply failed.
                              type: string
                            clusterName:
                              description: ClusterName represents the member cluster name
                                which the resource deployed on.
                              type: string
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - clusterName
                          type: object
                        type: array
                      conditions:
                        description: Conditions contain the different condition statuses.
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: false
            subresources:
              status: {}
          - additionalPrinterColumns:
            - jsonPath: .status.conditions[?(@.type=="Scheduled")].status
              name: Scheduled
              type: string
            - jsonPath: .status.conditions[?(@.type=="FullyApplied")].status
              name: FullyApplied
              type: string
            - jsonPath: .metadata.creationTimestamp
              name: Age
              type: date
            name: v1alpha2
            schema:
              openAPIV3Schema:
                description: ClusterResourceBinding represents a binding of a kubernetes resource
                  with a ClusterPropagationPolicy.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior.
                    properties:
                      clusters:
                        description: Clusters represents target member clusters where the
                          resource to be deployed.
                        items:
                          description: TargetCluster represents the identifier of a member
                            cluster.
                          properties:
                            name:
                              description: Name of target cluster.
                              type: string
                            replicas:
                              description: Replicas in target cluster
                              format: int32
                              type: integer
                          required:
                          - name
                          type: object
                        type: array
                      gracefulEvictionTasks:
                        description: 'GracefulEvictionTasks holds the eviction tasks that
                          are expected to perform the eviction in a graceful way. The intended
                          workflow is: 1. Once the controller(such as ''taint-manager'') decided
                          to evict the resource that is referenced by current ResourceBinding
                          or ClusterResourceBinding from a target cluster, it removes(or scale
                          down the replicas) the target from Clusters(.spec.Clusters) and
                          builds a graceful eviction task. 2. The scheduler may perform a
                          re-scheduler and probably select a substitute cluster to take over
                          the evicting workload(resource). 3. The graceful eviction controller
                          takes care of the graceful eviction tasks and performs the final
                          removal after the workload(resource) is available on the substitute
                          cluster or exceed the grace termination period(defaults to 10 minutes).'
                        items:
                          description: GracefulEvictionTask represents a graceful eviction
                            task.
                          properties:
                            creationTimestamp:
                              description: "CreationTimestamp is a timestamp representing
                                the server time when this object was created. Clients should
                                not set this value to avoid the time inconsistency issue.
                                It is represented in RFC3339 form(like '2021-04-25T10:02:10Z')
                                and is in UTC. \n Populated by the system. Read-only."
                              format: date-time
                              type: string
                            fromCluster:
                              description: FromCluster which cluster the eviction perform
                                from.
                              type: string
                            message:
                              description: Message is a human-readable message indicating
                                details about the eviction. This may be an empty string.
                              maxLength: 1024
                              type: string
                            producer:
                              description: Producer indicates the controller who triggered
                                the eviction.
                              type: string
                            reason:
                              description: Reason contains a programmatic identifier indicating
                                the reason for the eviction. Producers may define expected
                                values and meanings for this field, and whether the values
                                are considered a guaranteed API. The value should be a CamelCase
                                string. This field may not be empty.
                              maxLength: 32
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            replicas:
                              description: Replicas indicates the number of replicas should
                                be evicted. Should be ignored for resource type that doesn't
                                have replica.
                              format: int32
                              type: integer
                          required:
                          - fromCluster
                          - producer
                          - reason
                          type: object
                        type: array
                      propagateDeps:
                        description: PropagateDeps tells if relevant resources should be propagated
                          automatically. It is inherited from PropagationPolicy or ClusterPropagationPolicy.
                          default false.
                        type: boolean
                      replicaRequirements:
                        description: ReplicaRequirements represents the requirements required
                          by each replica.
                        properties:
                          nodeClaim:
                            description: NodeClaim represents the node claim HardNodeAffinity,
                              NodeSelector and Tolerations required by each replica.
                            properties:
                              hardNodeAffinity:
                                description: A node selector represents the union of the results
                                  of one or more label queries over a set of nodes; that is,
                                  it represents the OR of the selectors represented by the
                                  node selector terms. Note that only PodSpec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution
                                  is included here because it has a hard limit on pod scheduling.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector terms.
                                      The terms are ORed.
                                    items:
                                      description: A null or empty node selector term matches
                                        no objects. The requirements of them are ANDed. The
                                        TopologySelectorTerm type implements a subset of the
                                        NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement is a
                                              selector that contains values, a key, and an
                                              operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators are
                                                  In, NotIn, Exists, DoesNotExist. Gt, and
                                                  Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If
                                                  the operator is In or NotIn, the values
                                                  array must be non-empty. If the operator
                                                  is Exists or DoesNotExist, the values array
                                                  must be empty. If the operator is Gt or
                                                  Lt, the values array must have a single
                                                  element, which will be interpreted as an
                                                  integer. This array is replaced during a
                                                  strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement is a
                                              selector that contains values, a key, and an
                                              operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators are
                                                  In, NotIn, Exists, DoesNotExist. Gt, and
                                                  Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If
                                                  the operator is In or NotIn, the values
                                                  array must be non-empty. If the operator
                                                  is Exists or DoesNotExist, the values array
                                                  must be empty. If the operator is Gt or
                                                  Lt, the values array must have a single
                                                  element, which will be interpreted as an
                                                  integer. This array is replaced during a
                                                  strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                              nodeSelector:
                                additionalProperties:
                                  type: string
                                description: NodeSelector is a selector which must be true
                                  for the pod to fit on a node. Selector which must match
                                  a node's labels for the pod to be scheduled on that node.
                                type: object
                              tolerations:
                                description: If specified, the pod's tolerations.
                                items:
                                  description: The pod this Toleration is attached to tolerates
                                    any taint that matches the triple <key,value,effect> using
                                    the matching operator <operator>.
                                  properties:
                                    effect:
                                      description: Effect indicates the taint effect to match.
                                        Empty means match all taint effects. When specified,
                                        allowed values are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Key is the taint key that the toleration
                                        applies to. Empty means match all taint keys. If the
                                        key is empty, operator must be Exists; this combination
                                        means to match all values and all keys.
                                      type: string
                                    operator:
                                      description: Operator represents a key's relationship
                                        to the value. Valid operators are Exists and Equal.
                                        Defaults to Equal. Exists is equivalent to wildcard
                                        for value, so that a pod can tolerate all taints of
                                        a particular category.
                                      type: string
                                    tolerationSeconds:
                                      description: TolerationSeconds represents the period
                                        of time the toleration (which must be of effect NoExecute,
                                        otherwise this field is ignored) tolerates the taint.
                                        By default, it is not set, which means tolerate the
                                        taint forever (do not evict). Zero and negative values
                                        will be treated as 0 (evict immediately) by the system.
                                      format: int64
                                      type: integer
                                    value:
                                      description: Value is the taint value the toleration
                                        matches to. If the operator is Exists, the value should
                                        be empty, otherwise just a regular string.
                                      type: string
                                  type: object
                                type: array
                            type: object
                          resourceRequest:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ResourceRequest represents the resources required
                              by each replica.
                            type: object
                        type: object
                      replicas:
                        description: Replicas represents the replica number of the referencing
                          resource.
                        format: int32
                        type: integer
                      requiredBy:
                        description: RequiredBy represents the list of Bindings that depend
                          on the referencing resource.
                        items:
                          description: BindingSnapshot is a snapshot of a ResourceBinding
                            or ClusterResourceBinding.
                          properties:
                            clusters:
                              description: Clusters represents the scheduled result.
                              items:
                                description: TargetCluster represents the identifier of a
                                  member cluster.
                                properties:
                                  name:
                                    description: Name of target cluster.
                                    type: string
                                  replicas:
                                    description: Replicas in target cluster
                                    format: int32
                                    type: integer
                                required:
                                - name
                                type: object
                              type: array
                            name:
                              description: Name represents the name of the Binding.
                              type: string
                            namespace:
                              description: Namespace represents the namespace of the Binding.
                                It is required for ResourceBinding. If Namespace is not specified,
                                means the referencing is ClusterResourceBinding.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                      resource:
                        description: Resource represents the Kubernetes resource to be propagated.
                        properties:
                          apiVersion:
                            description: APIVersion represents the API version of the referent.
                            type: string
                          kind:
                            description: Kind represents the Kind of the referent.
                            type: string
                          name:
                            description: Name represents the name of the referent.
                            type: string
                          namespace:
                            description: Namespace represents the namespace for the referent.
                              For non-namespace scoped resources(e.g. 'ClusterRole')，do not
                              need specify Namespace, and for namespace scoped resources,
                              Namespace is required. If Namespace is not specified, means
                              the resource is non-namespace scoped.
                            type: string
                          resourceVersion:
                            description: ResourceVersion represents the internal version of
                              the referenced object, that can be used by clients to determine
                              when object has changed.
                            type: string
                          uid:
                            description: UID of the referent.
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        type: object
                    required:
                    - resource
                    type: object
                  status:
                    description: Status represents the most recently observed status of the
                      ResourceBinding.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus represents status list of the resource
                          running in each member cluster.
                        items:
                          description: AggregatedStatusItem represents status of the resource
                            running in a member cluster.
                          properties:
                            applied:
                              description: Applied represents if the resource referencing
                                by ResourceBinding or ClusterResourceBinding is successfully
                                applied on the cluster.
                              type: boolean
                            appliedMessage:
                              description: AppliedMessage is a human readable message indicating
                                details about the applied status. This is usually holds the
                                error message in case of apply failed.
                              type: string
                            clusterName:
                              description: ClusterName represents the member cluster name
                                which the resource deployed on.
                              type: string
                            health:
                              description: Health represents the healthy state of the current
                                resource. There maybe different rules for different resources
                                to achieve health status.
                              enum:
                              - Healthy
                              - Unhealthy
                              - Unknown
                              type: string
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - clusterName
                          type: object
                        type: array
                      conditions:
                        description: Conditions contain the different condition statuses.
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                      schedulerObservedGeneration:
                        description: SchedulerObservedGeneration is the generation(.metadata.generation)
                          observed by the scheduler. If SchedulerObservedGeneration is less
                          than the generation in metadata means the scheduler hasn't confirmed
                          the scheduling result or hasn't done the schedule yet.
                        format: int64
                        type: integer
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      work.karmada.io_resourcebindings.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: resourcebindings.work.karmada.io
        spec:
          group: work.karmada.io
          names:
            categories:
            - karmada-io
            kind: ResourceBinding
            listKind: ResourceBindingList
            plural: resourcebindings
            shortNames:
            - rb
            singular: resourcebinding
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: ResourceBinding represents a binding of a kubernetes resource
                  with a propagation policy.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior.
                    properties:
                      clusters:
                        description: Clusters represents target member clusters where the
                          resource to be deployed.
                        items:
                          description: TargetCluster represents the identifier of a member
                            cluster.
                          properties:
                            name:
                              description: Name of target cluster.
                              type: string
                            replicas:
                              description: Replicas in target cluster
                              format: int32
                              type: integer
                          required:
                          - name
                          type: object
                        type: array
                      resource:
                        description: Resource represents the Kubernetes resource to be propagated.
                        properties:
                          apiVersion:
                            description: APIVersion represents the API version of the referent.
                            type: string
                          kind:
                            description: Kind represents the Kind of the referent.
                            type: string
                          name:
                            description: Name represents the name of the referent.
                            type: string
                          namespace:
                            description: Namespace represents the namespace for the referent.
                              For non-namespace scoped resources(e.g. 'ClusterRole')，do not
                              need specify Namespace, and for namespace scoped resources,
                              Namespace is required. If Namespace is not specified, means
                              the resource is non-namespace scoped.
                            type: string
                          replicas:
                            description: Replicas represents the replica number of the referencing
                              resource.
                            format: int32
                            type: integer
                          resourcePerReplicas:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ReplicaResourceRequirements represents the resources
                              required by each replica.
                            type: object
                          resourceVersion:
                            description: ResourceVersion represents the internal version of
                              the referenced object, that can be used by clients to determine
                              when object has changed.
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        type: object
                    required:
                    - resource
                    type: object
                  status:
                    description: Status represents the most recently observed status of the
                      ResourceBinding.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus represents status list of the resource
                          running in each member cluster.
                        items:
                          description: AggregatedStatusItem represents status of the resource
                            running in a member cluster.
                          properties:
                            applied:
                              description: Applied represents if the resource referencing
                                by ResourceBinding or ClusterResourceBinding is successfully
                                applied on the cluster.
                              type: boolean
                            appliedMessage:
                              description: AppliedMessage is a human readable message indicating
                                details about the applied status. This is usually holds the
                                error message in case of apply failed.
                              type: string
                            clusterName:
                              description: ClusterName represents the member cluster name
                                which the resource deployed on.
                              type: string
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - clusterName
                          type: object
                        type: array
                      conditions:
                        description: Conditions contain the different condition statuses.
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: false
            subresources:
              status: {}
          - additionalPrinterColumns:
            - jsonPath: .status.conditions[?(@.type=="Scheduled")].status
              name: Scheduled
              type: string
            - jsonPath: .status.conditions[?(@.type=="FullyApplied")].status
              name: FullyApplied
              type: string
            - jsonPath: .metadata.creationTimestamp
              name: Age
              type: date
            name: v1alpha2
            schema:
              openAPIV3Schema:
                description: ResourceBinding represents a binding of a kubernetes resource
                  with a propagation policy.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior.
                    properties:
                      clusters:
                        description: Clusters represents target member clusters where the
                          resource to be deployed.
                        items:
                          description: TargetCluster represents the identifier of a member
                            cluster.
                          properties:
                            name:
                              description: Name of target cluster.
                              type: string
                            replicas:
                              description: Replicas in target cluster
                              format: int32
                              type: integer
                          required:
                          - name
                          type: object
                        type: array
                      gracefulEvictionTasks:
                        description: 'GracefulEvictionTasks holds the eviction tasks that
                          are expected to perform the eviction in a graceful way. The intended
                          workflow is: 1. Once the controller(such as ''taint-manager'') decided
                          to evict the resource that is referenced by current ResourceBinding
                          or ClusterResourceBinding from a target cluster, it removes(or scale
                          down the replicas) the target from Clusters(.spec.Clusters) and
                          builds a graceful eviction task. 2. The scheduler may perform a
                          re-scheduler and probably select a substitute cluster to take over
                          the evicting workload(resource). 3. The graceful eviction controller
                          takes care of the graceful eviction tasks and performs the final
                          removal after the workload(resource) is available on the substitute
                          cluster or exceed the grace termination period(defaults to 10 minutes).'
                        items:
                          description: GracefulEvictionTask represents a graceful eviction
                            task.
                          properties:
                            creationTimestamp:
                              description: "CreationTimestamp is a timestamp representing
                                the server time when this object was created. Clients should
                                not set this value to avoid the time inconsistency issue.
                                It is represented in RFC3339 form(like '2021-04-25T10:02:10Z')
                                and is in UTC. \n Populated by the system. Read-only."
                              format: date-time
                              type: string
                            fromCluster:
                              description: FromCluster which cluster the eviction perform
                                from.
                              type: string
                            message:
                              description: Message is a human-readable message indicating
                                details about the eviction. This may be an empty string.
                              maxLength: 1024
                              type: string
                            producer:
                              description: Producer indicates the controller who triggered
                                the eviction.
                              type: string
                            reason:
                              description: Reason contains a programmatic identifier indicating
                                the reason for the eviction. Producers may define expected
                                values and meanings for this field, and whether the values
                                are considered a guaranteed API. The value should be a CamelCase
                                string. This field may not be empty.
                              maxLength: 32
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            replicas:
                              description: Replicas indicates the number of replicas should
                                be evicted. Should be ignored for resource type that doesn't
                                have replica.
                              format: int32
                              type: integer
                          required:
                          - fromCluster
                          - producer
                          - reason
                          type: object
                        type: array
                      propagateDeps:
                        description: PropagateDeps tells if relevant resources should be propagated
                          automatically. It is inherited from PropagationPolicy or ClusterPropagationPolicy.
                          default false.
                        type: boolean
                      replicaRequirements:
                        description: ReplicaRequirements represents the requirements required
                          by each replica.
                        properties:
                          nodeClaim:
                            description: NodeClaim represents the node claim HardNodeAffinity,
                              NodeSelector and Tolerations required by each replica.
                            properties:
                              hardNodeAffinity:
                                description: A node selector represents the union of the results
                                  of one or more label queries over a set of nodes; that is,
                                  it represents the OR of the selectors represented by the
                                  node selector terms. Note that only PodSpec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution
                                  is included here because it has a hard limit on pod scheduling.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector terms.
                                      The terms are ORed.
                                    items:
                                      description: A null or empty node selector term matches
                                        no objects. The requirements of them are ANDed. The
                                        TopologySelectorTerm type implements a subset of the
                                        NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement is a
                                              selector that contains values, a key, and an
                                              operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators are
                                                  In, NotIn, Exists, DoesNotExist. Gt, and
                                                  Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If
                                                  the operator is In or NotIn, the values
                                                  array must be non-empty. If the operator
                                                  is Exists or DoesNotExist, the values array
                                                  must be empty. If the operator is Gt or
                                                  Lt, the values array must have a single
                                                  element, which will be interpreted as an
                                                  integer. This array is replaced during a
                                                  strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement is a
                                              selector that contains values, a key, and an
                                              operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators are
                                                  In, NotIn, Exists, DoesNotExist. Gt, and
                                                  Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If
                                                  the operator is In or NotIn, the values
                                                  array must be non-empty. If the operator
                                                  is Exists or DoesNotExist, the values array
                                                  must be empty. If the operator is Gt or
                                                  Lt, the values array must have a single
                                                  element, which will be interpreted as an
                                                  integer. This array is replaced during a
                                                  strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                              nodeSelector:
                                additionalProperties:
                                  type: string
                                description: NodeSelector is a selector which must be true
                                  for the pod to fit on a node. Selector which must match
                                  a node's labels for the pod to be scheduled on that node.
                                type: object
                              tolerations:
                                description: If specified, the pod's tolerations.
                                items:
                                  description: The pod this Toleration is attached to tolerates
                                    any taint that matches the triple <key,value,effect> using
                                    the matching operator <operator>.
                                  properties:
                                    effect:
                                      description: Effect indicates the taint effect to match.
                                        Empty means match all taint effects. When specified,
                                        allowed values are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Key is the taint key that the toleration
                                        applies to. Empty means match all taint keys. If the
                                        key is empty, operator must be Exists; this combination
                                        means to match all values and all keys.
                                      type: string
                                    operator:
                                      description: Operator represents a key's relationship
                                        to the value. Valid operators are Exists and Equal.
                                        Defaults to Equal. Exists is equivalent to wildcard
                                        for value, so that a pod can tolerate all taints of
                                        a particular category.
                                      type: string
                                    tolerationSeconds:
                                      description: TolerationSeconds represents the period
                                        of time the toleration (which must be of effect NoExecute,
                                        otherwise this field is ignored) tolerates the taint.
                                        By default, it is not set, which means tolerate the
                                        taint forever (do not evict). Zero and negative values
                                        will be treated as 0 (evict immediately) by the system.
                                      format: int64
                                      type: integer
                                    value:
                                      description: Value is the taint value the toleration
                                        matches to. If the operator is Exists, the value should
                                        be empty, otherwise just a regular string.
                                      type: string
                                  type: object
                                type: array
                            type: object
                          resourceRequest:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ResourceRequest represents the resources required
                              by each replica.
                            type: object
                        type: object
                      replicas:
                        description: Replicas represents the replica number of the referencing
                          resource.
                        format: int32
                        type: integer
                      requiredBy:
                        description: RequiredBy represents the list of Bindings that depend
                          on the referencing resource.
                        items:
                          description: BindingSnapshot is a snapshot of a ResourceBinding
                            or ClusterResourceBinding.
                          properties:
                            clusters:
                              description: Clusters represents the scheduled result.
                              items:
                                description: TargetCluster represents the identifier of a
                                  member cluster.
                                properties:
                                  name:
                                    description: Name of target cluster.
                                    type: string
                                  replicas:
                                    description: Replicas in target cluster
                                    format: int32
                                    type: integer
                                required:
                                - name
                                type: object
                              type: array
                            name:
                              description: Name represents the name of the Binding.
                              type: string
                            namespace:
                              description: Namespace represents the namespace of the Binding.
                                It is required for ResourceBinding. If Namespace is not specified,
                                means the referencing is ClusterResourceBinding.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                      resource:
                        description: Resource represents the Kubernetes resource to be propagated.
                        properties:
                          apiVersion:
                            description: APIVersion represents the API version of the referent.
                            type: string
                          kind:
                            description: Kind represents the Kind of the referent.
                            type: string
                          name:
                            description: Name represents the name of the referent.
                            type: string
                          namespace:
                            description: Namespace represents the namespace for the referent.
                              For non-namespace scoped resources(e.g. 'ClusterRole')，do not
                              need specify Namespace, and for namespace scoped resources,
                              Namespace is required. If Namespace is not specified, means
                              the resource is non-namespace scoped.
                            type: string
                          resourceVersion:
                            description: ResourceVersion represents the internal version of
                              the referenced object, that can be used by clients to determine
                              when object has changed.
                            type: string
                          uid:
                            description: UID of the referent.
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        type: object
                    required:
                    - resource
                    type: object
                  status:
                    description: Status represents the most recently observed status of the
                      ResourceBinding.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus represents status list of the resource
                          running in each member cluster.
                        items:
                          description: AggregatedStatusItem represents status of the resource
                            running in a member cluster.
                          properties:
                            applied:
                              description: Applied represents if the resource referencing
                                by ResourceBinding or ClusterResourceBinding is successfully
                                applied on the cluster.
                              type: boolean
                            appliedMessage:
                              description: AppliedMessage is a human readable message indicating
                                details about the applied status. This is usually holds the
                                error message in case of apply failed.
                              type: string
                            clusterName:
                              description: ClusterName represents the member cluster name
                                which the resource deployed on.
                              type: string
                            health:
                              description: Health represents the healthy state of the current
                                resource. There maybe different rules for different resources
                                to achieve health status.
                              enum:
                              - Healthy
                              - Unhealthy
                              - Unknown
                              type: string
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - clusterName
                          type: object
                        type: array
                      conditions:
                        description: Conditions contain the different condition statuses.
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                      schedulerObservedGeneration:
                        description: SchedulerObservedGeneration is the generation(.metadata.generation)
                          observed by the scheduler. If SchedulerObservedGeneration is less
                          than the generation in metadata means the scheduler hasn't confirmed
                          the scheduling result or hasn't done the schedule yet.
                        format: int64
                        type: integer
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      work.karmada.io_works.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: works.work.karmada.io
        spec:
          group: work.karmada.io
          names:
            categories:
            - karmada-io
            kind: Work
            listKind: WorkList
            plural: works
            singular: work
          scope: Namespaced
          versions:
          - additionalPrinterColumns:
            - jsonPath: .status.conditions[?(@.type=="Applied")].status
              name: Applied
              type: string
            - jsonPath: .metadata.creationTimestamp
              name: Age
              type: date
            name: v1alpha1
            schema:
              openAPIV3Schema:
                description: Work defines a list of resources to be deployed on the member
                  cluster.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of Work.
                    properties:
                      workload:
                        description: Workload represents the manifest workload to be deployed
                          on managed cluster.
                        properties:
                          manifests:
                            description: Manifests represents a list of Kubernetes resources
                              to be deployed on the managed cluster.
                            items:
                              description: Manifest represents a resource to be deployed on
                                managed cluster.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                            type: array
                        type: object
                    type: object
                  status:
                    description: Status represents the status of PropagationStatus.
                    properties:
                      conditions:
                        description: 'Conditions contain the different condition statuses
                          for this work. Valid condition types are: 1. Applied represents
                          workload in Work is applied successfully on a managed cluster. 2.
                          Progressing represents workload in Work is being applied on a managed
                          cluster. 3. Available represents workload in Work exists on the
                          managed cluster. 4. Degraded represents the current state of workload
                          does not match the desired state for a certain period.'
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                      manifestStatuses:
                        description: ManifestStatuses contains running status of manifests
                          in spec.
                        items:
                          description: ManifestStatus contains running status of a specific
                            manifest in spec.
                          properties:
                            health:
                              description: Health represents the healthy state of the current
                                resource. There maybe different rules for different resources
                                to achieve health status.
                              enum:
                              - Healthy
                              - Unhealthy
                              - Unknown
                              type: string
                            identifier:
                              description: Identifier represents the identity of a resource
                                linking to manifests in spec.
                              properties:
                                group:
                                  description: Group is the group of the resource.
                                  type: string
                                kind:
                                  description: Kind is the kind of the resource.
                                  type: string
                                name:
                                  description: Name is the name of the resource
                                  type: string
                                namespace:
                                  description: Namespace is the namespace of the resource,
                                    the resource is cluster scoped if the value is empty
                                  type: string
                                ordinal:
                                  description: Ordinal represents an index in manifests list,
                                    so the condition can still be linked to a manifest even
                                    though manifest cannot be parsed successfully.
                                  type: integer
                                resource:
                                  description: Resource is the resource type of the resource
                                  type: string
                                version:
                                  description: Version is the version of the resource.
                                  type: string
                              required:
                              - kind
                              - name
                              - ordinal
                              - resource
                              - version
                              type: object
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - identifier
                          type: object
                        type: array
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      kustomization.yaml:  |-
        resources:
        - bases/multicluster.x-k8s.io_serviceexports.yaml
        - bases/multicluster.x-k8s.io_serviceimports.yaml
        - bases/policy.karmada.io_clusteroverridepolicies.yaml
        - bases/policy.karmada.io_clusterpropagationpolicies.yaml
        - bases/policy.karmada.io_federatedresourcequotas.yaml
        - bases/policy.karmada.io_overridepolicies.yaml
        - bases/policy.karmada.io_propagationpolicies.yaml
        - bases/work.karmada.io_resourcebindings.yaml
        - bases/work.karmada.io_clusterresourcebindings.yaml
        - bases/work.karmada.io_works.yaml
        - bases/config.karmada.io_resourceinterpreterwebhookconfigurations.yaml
        - bases/networking.karmada.io_multiclusteringresses.yaml
        
        patchesStrategicMerge:
        - patches/webhook_in_resourcebindings.yaml
        - patches/webhook_in_clusterresourcebindings.yaml
        
      
      
      webhook_in_clusterresourcebindings.yaml:  |-
        # The following patch enables conversion webhook for CRD
        # CRD conversion requires k8s 1.13 or later.
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          name: clusterresourcebindings.work.karmada.io
        spec:
          conversion:
            strategy: Webhook
            webhook:
              clientConfig:
                url: https://karmada-webhook.karmada-system.svc:443/convert
                caBundle: {{caBundle}}
              conversionReviewVersions: ["v1"]
        
      
      
      webhook_in_resourcebindings.yaml:  |-
        # The following patch enables conversion webhook for CRD
        # CRD conversion requires k8s 1.13 or later.
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          name: resourcebindings.work.karmada.io
        spec:
          conversion:
            strategy: Webhook
            webhook:
              clientConfig:
                url: https://karmada-webhook.karmada-system.svc:443/convert
                caBundle: {{caBundle}}
              conversionReviewVersions: ["v1"]
        
      
  crds-bases-configmaps.yaml: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: karmada-system-crds-bases
      namespace: karmada-system
    data:
      
      
      config.karmada.io_resourceinterpreterwebhookconfigurations.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: resourceinterpreterwebhookconfigurations.config.karmada.io
        spec:
          group: config.karmada.io
          names:
            kind: ResourceInterpreterWebhookConfiguration
            listKind: ResourceInterpreterWebhookConfigurationList
            plural: resourceinterpreterwebhookconfigurations
            singular: resourceinterpreterwebhookconfiguration
          scope: Cluster
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: ResourceInterpreterWebhookConfiguration describes the configuration
                  of webhooks which take the responsibility to tell karmada the details of
                  the resource object, especially for custom resources.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  webhooks:
                    description: Webhooks is a list of webhooks and the affected resources
                      and operations.
                    items:
                      description: ResourceInterpreterWebhook describes the webhook as well
                        as the resources and operations it applies to.
                      properties:
                        clientConfig:
                          description: ClientConfig defines how to communicate with the hook.
                          properties:
                            caBundle:
                              description: '`caBundle` is a PEM encoded CA bundle which will
                                be used to validate the webhook''s server certificate. If
                                unspecified, system trust roots on the apiserver are used.'
                              format: byte
                              type: string
                            service:
                              description: "`service` is a reference to the service for this
                                webhook. Either `service` or `url` must be specified. \n If
                                the webhook is running within the cluster, then you should
                                use `service`."
                              properties:
                                name:
                                  description: '`name` is the name of the service. Required'
                                  type: string
                                namespace:
                                  description: '`namespace` is the namespace of the service.
                                    Required'
                                  type: string
                                path:
                                  description: '`path` is an optional URL path which will
                                    be sent in any request to this service.'
                                  type: string
                                port:
                                  description: If specified, the port on the service that
                                    hosting webhook. Default to 443 for backward compatibility.
                                    `port` should be a valid port number (1-65535, inclusive).
                                  format: int32
                                  type: integer
                              required:
                              - name
                              - namespace
                              type: object
                            url:
                              description: "`url` gives the location of the webhook, in standard
                                URL form (`scheme://host:port/path`). Exactly one of `url`
                                or `service` must be specified. \n The `host` should not refer
                                to a service running in the cluster; use the `service` field
                                instead. The host might be resolved via external DNS in some
                                apiservers (e.g., `kube-apiserver` cannot resolve in-cluster
                                DNS as that would be a layering violation). `host` may also
                                be an IP address. \n Please note that using `localhost` or
                                `127.0.0.1` as a `host` is risky unless you take great care
                                to run this webhook on all hosts which run an apiserver which
                                might need to make calls to this webhook. Such installs are
                                likely to be non-portable, i.e., not easy to turn up in a
                                new cluster. \n The scheme must be \"https\"; the URL must
                                begin with \"https://\". \n A path is optional, and if present
                                may be any string permissible in a URL. You may use the path
                                to pass an arbitrary string to the webhook, for example, a
                                cluster identifier. \n Attempting to use a user or basic auth
                                e.g. \"user:password@\" is not allowed. Fragments (\"#...\")
                                and query parameters (\"?...\") are not allowed, either."
                              type: string
                          type: object
                        interpreterContextVersions:
                          description: InterpreterContextVersions is an ordered list of preferred
                            `ResourceInterpreterContext` versions the Webhook expects. Karmada
                            will try to use first version in the list which it supports. If
                            none of the versions specified in this list supported by Karmada,
                            validation will fail for this object. If a persisted webhook configuration
                            specifies allowed versions and does not include any versions known
                            to the Karmada, calls to the webhook will fail and be subject
                            to the failure policy.
                          items:
                            type: string
                          type: array
                        name:
                          description: Name is the full-qualified name of the webhook.
                          type: string
                        rules:
                          description: Rules describes what operations on what resources the
                            webhook cares about. The webhook cares about an operation if it
                            matches any Rule.
                          items:
                            description: RuleWithOperations is a tuple of Operations and Resources.
                              It is recommended to make sure that all the tuple expansions
                              are valid.
                            properties:
                              apiGroups:
                                description: "APIGroups is the API groups the resources belong
                                  to. '*' is all groups. If '*' is present, the length of
                                  the slice must be one. For example: [\"apps\", \"batch\",
                                  \"example.io\"] means matches 3 groups. [\"*\"] means matches
                                  all group \n Note: The group cloud be empty, e.g the 'core'
                                  group of kubernetes, in that case use [\"\"]."
                                items:
                                  type: string
                                type: array
                              apiVersions:
                                description: 'APIVersions is the API versions the resources
                                  belong to. ''*'' is all versions. If ''*'' is present, the
                                  length of the slice must be one. For example: ["v1alpha1",
                                  "v1beta1"] means matches 2 versions. ["*"] means matches
                                  all versions.'
                                items:
                                  type: string
                                type: array
                              kinds:
                                description: 'Kinds is a list of resources this rule applies
                                  to. If ''*'' is present, the length of the slice must be
                                  one. For example: ["Deployment", "Pod"] means matches Deployment
                                  and Pod. ["*"] means apply to all resources.'
                                items:
                                  type: string
                                type: array
                              operations:
                                description: Operations is the operations the hook cares about.
                                  If '*' is present, the length of the slice must be one.
                                items:
                                  description: InterpreterOperation specifies an operation
                                    for a request.
                                  type: string
                                type: array
                            required:
                            - apiGroups
                            - apiVersions
                            - kinds
                            - operations
                            type: object
                          type: array
                        timeoutSeconds:
                          description: TimeoutSeconds specifies the timeout for this webhook.
                            After the timeout passes, the webhook call will be ignored or
                            the API call will fail based on the failure policy. The timeout
                            value must be between 1 and 30 seconds. Default to 10 seconds.
                          format: int32
                          type: integer
                      required:
                      - clientConfig
                      - interpreterContextVersions
                      - name
                      type: object
                    type: array
                required:
                - webhooks
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      multicluster.x-k8s.io_serviceexports.yaml:  |-
        # Copyright 2020 The Kubernetes Authors.
        #
        # Licensed under the Apache License, Version 2.0 (the "License");
        # you may not use this file except in compliance with the License.
        # You may obtain a copy of the License at
        #
        #     http://www.apache.org/licenses/LICENSE-2.0
        #
        # Unless required by applicable law or agreed to in writing, software
        # distributed under the License is distributed on an "AS IS" BASIS,
        # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        # See the License for the specific language governing permissions and
        # limitations under the License.
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          name: serviceexports.multicluster.x-k8s.io
        spec:
          group: multicluster.x-k8s.io
          scope: Namespaced
          names:
            plural: serviceexports
            singular: serviceexport
            kind: ServiceExport
            shortNames:
            - svcex
          versions:
          - name: v1alpha1
            served: true
            storage: true
            subresources:
              status: {}
            additionalPrinterColumns:
            - name: Age
              type: date
              jsonPath: .metadata.creationTimestamp
            "schema":
              "openAPIV3Schema":
                description: ServiceExport declares that the Service with the same name and
                  namespace as this export should be consumable from other clusters.
                type: object
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  status:
                    description: status describes the current state of an exported service.
                      Service configuration comes from the Service that had the same name
                      and namespace as this ServiceExport. Populated by the multi-cluster
                      service implementation's controller.
                    type: object
                    properties:
                      conditions:
                        type: array
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{     // Represents the observations of a
                            foo's current state.     // Known .status.conditions.type are:
                            \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                            \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                            \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                            patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                            \n     // other fields }"
                          type: object
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              type: string
                              format: date-time
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              type: string
                              maxLength: 32768
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              type: integer
                              format: int64
                              minimum: 0
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              type: string
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              type: string
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              type: string
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        x-kubernetes-list-map-keys:
                        - type
                        x-kubernetes-list-type: map
        
      
      
      multicluster.x-k8s.io_serviceimports.yaml:  |-
        # Copyright 2020 The Kubernetes Authors.
        #
        # Licensed under the Apache License, Version 2.0 (the "License");
        # you may not use this file except in compliance with the License.
        # You may obtain a copy of the License at
        #
        #     http://www.apache.org/licenses/LICENSE-2.0
        #
        # Unless required by applicable law or agreed to in writing, software
        # distributed under the License is distributed on an "AS IS" BASIS,
        # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        # See the License for the specific language governing permissions and
        # limitations under the License.
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          name: serviceimports.multicluster.x-k8s.io
        spec:
          group: multicluster.x-k8s.io
          scope: Namespaced
          names:
            plural: serviceimports
            singular: serviceimport
            kind: ServiceImport
            shortNames:
            - svcim
          versions:
          - name: v1alpha1
            served: true
            storage: true
            subresources:
              status: {}
            additionalPrinterColumns:
            - name: Type
              type: string
              description: The type of this ServiceImport
              jsonPath: .spec.type
            - name: IP
              type: string
              description: The VIP for this ServiceImport
              jsonPath: .spec.ips
            - name: Age
              type: date
              jsonPath: .metadata.creationTimestamp
            "schema":
              "openAPIV3Schema":
                description: ServiceImport describes a service imported from clusters in a
                  ClusterSet.
                type: object
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: spec defines the behavior of a ServiceImport.
                    type: object
                    required:
                    - ports
                    - type
                    properties:
                      ips:
                        description: ip will be used as the VIP for this service when type
                          is ClusterSetIP.
                        type: array
                        maxItems: 1
                        items:
                          type: string
                      ports:
                        type: array
                        items:
                          description: ServicePort represents the port on which the service
                            is exposed
                          type: object
                          required:
                          - port
                          properties:
                            appProtocol:
                              description: The application protocol for this port. This field
                                follows standard Kubernetes label syntax. Un-prefixed names
                                are reserved for IANA standard service names (as per RFC-6335
                                and http://www.iana.org/assignments/service-names). Non-standard
                                protocols should use prefixed names such as mycompany.com/my-custom-protocol.
                                Field can be enabled with ServiceAppProtocol feature gate.
                              type: string
                            name:
                              description: The name of this port within the service. This
                                must be a DNS_LABEL. All ports within a ServiceSpec must have
                                unique names. When considering the endpoints for a Service,
                                this must match the 'name' field in the EndpointPort. Optional
                                if only one ServicePort is defined on this service.
                              type: string
                            port:
                              description: The port that will be exposed by this service.
                              type: integer
                              format: int32
                            protocol:
                              description: The IP protocol for this port. Supports "TCP",
                                "UDP", and "SCTP". Default is TCP.
                              type: string
                        x-kubernetes-list-type: atomic
                      sessionAffinity:
                        description: 'Supports "ClientIP" and "None". Used to maintain session
                          affinity. Enable client IP based session affinity. Must be ClientIP
                          or None. Defaults to None. Ignored when type is Headless More info:
                          https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        type: string
                      sessionAffinityConfig:
                        description: sessionAffinityConfig contains session affinity configuration.
                        type: object
                        properties:
                          clientIP:
                            description: clientIP contains the configurations of Client IP
                              based session affinity.
                            type: object
                            properties:
                              timeoutSeconds:
                                description: timeoutSeconds specifies the seconds of ClientIP
                                  type session sticky time. The value must be >0 && <=86400(for
                                  1 day) if ServiceAffinity == "ClientIP". Default value is
                                  10800(for 3 hours).
                                type: integer
                                format: int32
                      type:
                        description: type defines the type of this service. Must be ClusterSetIP
                          or Headless.
                        type: string
                        enum:
                        - ClusterSetIP
                        - Headless
                  status:
                    description: status contains information about the exported services that
                      form the multi-cluster service referenced by this ServiceImport.
                    type: object
                    properties:
                      clusters:
                        description: clusters is the list of exporting clusters from which
                          this service was derived.
                        type: array
                        items:
                          description: ClusterStatus contains service configuration mapped
                            to a specific source cluster
                          type: object
                          required:
                          - cluster
                          properties:
                            cluster:
                              description: cluster is the name of the exporting cluster. Must
                                be a valid RFC-1123 DNS label.
                              type: string
                        x-kubernetes-list-map-keys:
                        - cluster
                        x-kubernetes-list-type: map
        
      
      
      networking.karmada.io_multiclusteringresses.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: multiclusteringresses.networking.karmada.io
        spec:
          group: networking.karmada.io
          names:
            categories:
            - karmada-io
            kind: MultiClusterIngress
            listKind: MultiClusterIngressList
            plural: multiclusteringresses
            shortNames:
            - mci
            singular: multiclusteringress
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: MultiClusterIngress is a collection of rules that allow inbound
                  connections to reach the endpoints defined by a backend. The structure of
                  MultiClusterIngress is same as Ingress, indicates the Ingress in multi-clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec is the desired state of the MultiClusterIngress.
                    properties:
                      defaultBackend:
                        description: DefaultBackend is the backend that should handle requests
                          that don't match any rule. If Rules are not specified, DefaultBackend
                          must be specified. If DefaultBackend is not set, the handling of
                          requests that do not match any of the rules will be up to the Ingress
                          controller.
                        properties:
                          resource:
                            description: Resource is an ObjectRef to another Kubernetes resource
                              in the namespace of the Ingress object. If resource is specified,
                              a service.Name and service.Port must not be specified. This
                              is a mutually exclusive setting with "Service".
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource being
                                  referenced. If APIGroup is not specified, the specified
                                  Kind must be in the core API group. For any other third-party
                                  types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                          service:
                            description: Service references a Service as a Backend. This is
                              a mutually exclusive setting with "Resource".
                            properties:
                              name:
                                description: Name is the referenced service. The service must
                                  exist in the same namespace as the Ingress object.
                                type: string
                              port:
                                description: Port of the referenced service. A port name or
                                  port number is required for a IngressServiceBackend.
                                properties:
                                  name:
                                    description: Name is the name of the port on the Service.
                                      This is a mutually exclusive setting with "Number".
                                    type: string
                                  number:
                                    description: Number is the numerical port number (e.g.
                                      80) on the Service. This is a mutually exclusive setting
                                      with "Name".
                                    format: int32
                                    type: integer
                                type: object
                            required:
                            - name
                            type: object
                        type: object
                      ingressClassName:
                        description: IngressClassName is the name of the IngressClass cluster
                          resource. The associated IngressClass defines which controller will
                          implement the resource. This replaces the deprecated `kubernetes.io/ingress.class`
                          annotation. For backwards compatibility, when that annotation is
                          set, it must be given precedence over this field. The controller
                          may emit a warning if the field and annotation have different values.
                          Implementations of this API should ignore Ingresses without a class
                          specified. An IngressClass resource may be marked as default, which
                          can be used to set a default value for this field. For more information,
                          refer to the IngressClass documentation.
                        type: string
                      rules:
                        description: A list of host rules used to configure the Ingress. If
                          unspecified, or no rule matches, all traffic is sent to the default
                          backend.
                        items:
                          description: IngressRule represents the rules mapping the paths
                            under a specified host to the related backend services. Incoming
                            requests are first evaluated for a host match, then routed to
                            the backend associated with the matching IngressRuleValue.
                          properties:
                            host:
                              description: "Host is the fully qualified domain name of a network
                                host, as defined by RFC 3986. Note the following deviations
                                from the \"host\" part of the URI as defined in RFC 3986:
                                1. IPs are not allowed. Currently an IngressRuleValue can
                                only apply to the IP in the Spec of the parent Ingress. 2.
                                The `:` delimiter is not respected because ports are not allowed.
                                Currently the port of an Ingress is implicitly :80 for http
                                and :443 for https. Both these may change in the future. Incoming
                                requests are matched against the host before the IngressRuleValue.
                                If the host is unspecified, the Ingress routes all traffic
                                based on the specified IngressRuleValue. \n Host can be \"precise\"
                                which is a domain name without the terminating dot of a network
                                host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain
                                name prefixed with a single wildcard label (e.g. \"*.foo.com\").
                                The wildcard character '*' must appear by itself as the first
                                DNS label and matches only a single label. You cannot have
                                a wildcard label by itself (e.g. Host == \"*\"). Requests
                                will be matched against the Host field in the following way:
                                1. If Host is precise, the request matches this rule if the
                                http host header is equal to Host. 2. If Host is a wildcard,
                                then the request matches this rule if the http host header
                                is to equal to the suffix (removing the first label) of the
                                wildcard rule."
                              type: string
                            http:
                              description: 'HTTPIngressRuleValue is a list of http selectors
                                pointing to backends. In the example: http://<host>/<path>?<searchpart>
                                -> backend where where parts of the url correspond to RFC
                                3986, this resource will be used to match against everything
                                after the last ''/'' and before the first ''?'' or ''#''.'
                              properties:
                                paths:
                                  description: A collection of paths that map requests to
                                    backends.
                                  items:
                                    description: HTTPIngressPath associates a path with a
                                      backend. Incoming urls matching the path are forwarded
                                      to the backend.
                                    properties:
                                      backend:
                                        description: Backend defines the referenced service
                                          endpoint to which the traffic will be forwarded
                                          to.
                                        properties:
                                          resource:
                                            description: Resource is an ObjectRef to another
                                              Kubernetes resource in the namespace of the
                                              Ingress object. If resource is specified, a
                                              service.Name and service.Port must not be specified.
                                              This is a mutually exclusive setting with "Service".
                                            properties:
                                              apiGroup:
                                                description: APIGroup is the group for the
                                                  resource being referenced. If APIGroup is
                                                  not specified, the specified Kind must be
                                                  in the core API group. For any other third-party
                                                  types, APIGroup is required.
                                                type: string
                                              kind:
                                                description: Kind is the type of resource
                                                  being referenced
                                                type: string
                                              name:
                                                description: Name is the name of resource
                                                  being referenced
                                                type: string
                                            required:
                                            - kind
                                            - name
                                            type: object
                                          service:
                                            description: Service references a Service as a
                                              Backend. This is a mutually exclusive setting
                                              with "Resource".
                                            properties:
                                              name:
                                                description: Name is the referenced service.
                                                  The service must exist in the same namespace
                                                  as the Ingress object.
                                                type: string
                                              port:
                                                description: Port of the referenced service.
                                                  A port name or port number is required for
                                                  a IngressServiceBackend.
                                                properties:
                                                  name:
                                                    description: Name is the name of the port
                                                      on the Service. This is a mutually exclusive
                                                      setting with "Number".
                                                    type: string
                                                  number:
                                                    description: Number is the numerical port
                                                      number (e.g. 80) on the Service. This
                                                      is a mutually exclusive setting with
                                                      "Name".
                                                    format: int32
                                                    type: integer
                                                type: object
                                            required:
                                            - name
                                            type: object
                                        type: object
                                      path:
                                        description: Path is matched against the path of an
                                          incoming request. Currently it can contain characters
                                          disallowed from the conventional "path" part of
                                          a URL as defined by RFC 3986. Paths must begin with
                                          a '/' and must be present when using PathType with
                                          value "Exact" or "Prefix".
                                        type: string
                                      pathType:
                                        description: 'PathType determines the interpretation
                                          of the Path matching. PathType can be one of the
                                          following values: * Exact: Matches the URL path
                                          exactly. * Prefix: Matches based on a URL path prefix
                                          split by ''/''. Matching is done on a path element
                                          by element basis. A path element refers is the list
                                          of labels in the path split by the ''/'' separator.
                                          A request is a match for path p if every p is an
                                          element-wise prefix of p of the request path. Note
                                          that if the last element of the path is a substring
                                          of the last element in request path, it is not a
                                          match (e.g. /foo/bar matches /foo/bar/baz, but does
                                          not match /foo/barbaz). * ImplementationSpecific:
                                          Interpretation of the Path matching is up to the
                                          IngressClass. Implementations can treat this as
                                          a separate PathType or treat it identically to Prefix
                                          or Exact path types. Implementations are required
                                          to support all path types.'
                                        type: string
                                    required:
                                    - backend
                                    - pathType
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                              required:
                              - paths
                              type: object
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                      tls:
                        description: TLS configuration. Currently the Ingress only supports
                          a single TLS port, 443. If multiple members of this list specify
                          different hosts, they will be multiplexed on the same port according
                          to the hostname specified through the SNI TLS extension, if the
                          ingress controller fulfilling the ingress supports SNI.
                        items:
                          description: IngressTLS describes the transport layer security associated
                            with an Ingress.
                          properties:
                            hosts:
                              description: Hosts are a list of hosts included in the TLS certificate.
                                The values in this list must match the name/s used in the
                                tlsSecret. Defaults to the wildcard host setting for the loadbalancer
                                controller fulfilling this Ingress, if left unspecified.
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            secretName:
                              description: SecretName is the name of the secret used to terminate
                                TLS traffic on port 443. Field is left optional to allow TLS
                                routing based on SNI hostname alone. If the SNI host in a
                                listener conflicts with the "Host" header field used by an
                                IngressRule, the SNI host is used for termination and value
                                of the Host header is used for routing.
                              type: string
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                    type: object
                  status:
                    description: Status is the current state of the MultiClusterIngress.
                    properties:
                      loadBalancer:
                        description: LoadBalancer contains the current status of the load-balancer.
                        properties:
                          ingress:
                            description: Ingress is a list containing ingress points for the
                              load-balancer. Traffic intended for the service should be sent
                              to these ingress points.
                            items:
                              description: 'LoadBalancerIngress represents the status of a
                                load-balancer ingress point: traffic intended for the service
                                should be sent to an ingress point.'
                              properties:
                                hostname:
                                  description: Hostname is set for load-balancer ingress points
                                    that are DNS based (typically AWS load-balancers)
                                  type: string
                                ip:
                                  description: IP is set for load-balancer ingress points
                                    that are IP based (typically GCE or OpenStack load-balancers)
                                  type: string
                                ports:
                                  description: Ports is a list of records of service ports
                                    If used, every port defined in the service should have
                                    an entry in it
                                  items:
                                    properties:
                                      error:
                                        description: 'Error is to record the problem with
                                          the service port The format of the error shall comply
                                          with the following rules: - built-in error values
                                          shall be specified in this file and those shall
                                          use CamelCase names - cloud provider specific error
                                          values must have names that comply with the format
                                          foo.example.com/CamelCase. --- The regex it matches
                                          is (dns1123SubdomainFmt/)?(qualifiedNameFmt)'
                                        maxLength: 316
                                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                        type: string
                                      port:
                                        description: Port is the port number of the service
                                          port of which status is recorded here
                                        format: int32
                                        type: integer
                                      protocol:
                                        default: TCP
                                        description: 'Protocol is the protocol of the service
                                          port of which status is recorded here The supported
                                          values are: "TCP", "UDP", "SCTP"'
                                        type: string
                                    required:
                                    - port
                                    - protocol
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                              type: object
                            type: array
                        type: object
                    type: object
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_clusteroverridepolicies.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: clusteroverridepolicies.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: ClusterOverridePolicy
            listKind: ClusterOverridePolicyList
            plural: clusteroverridepolicies
            shortNames:
            - cop
            singular: clusteroverridepolicy
          scope: Cluster
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: ClusterOverridePolicy represents the cluster-wide policy that
                  overrides a group of resources to one or more clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of ClusterOverridePolicy.
                    properties:
                      overrideRules:
                        description: OverrideRules defines a collection of override rules
                          on target clusters.
                        items:
                          description: RuleWithCluster defines the override rules on clusters.
                          properties:
                            overriders:
                              description: Overriders represents the override rules that would
                                apply on resources
                              properties:
                                argsOverrider:
                                  description: ArgsOverrider represents the rules dedicated
                                    to handling container args
                                  items:
                                    description: CommandArgsOverrider represents the rules
                                      dedicated to handling command/args overrides.
                                    properties:
                                      containerName:
                                        description: The name of container
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the command/args.
                                        enum:
                                        - add
                                        - remove
                                        type: string
                                      value:
                                        description: Value to be applied to command/args.
                                          Items in Value which will be appended after command/args
                                          when Operator is 'add'. Items in Value which match
                                          in command/args will be deleted when Operator is
                                          'remove'. If Value is empty, then the command/args
                                          will remain the same.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - containerName
                                    - operator
                                    type: object
                                  type: array
                                commandOverrider:
                                  description: CommandOverrider represents the rules dedicated
                                    to handling container command
                                  items:
                                    description: CommandArgsOverrider represents the rules
                                      dedicated to handling command/args overrides.
                                    properties:
                                      containerName:
                                        description: The name of container
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the command/args.
                                        enum:
                                        - add
                                        - remove
                                        type: string
                                      value:
                                        description: Value to be applied to command/args.
                                          Items in Value which will be appended after command/args
                                          when Operator is 'add'. Items in Value which match
                                          in command/args will be deleted when Operator is
                                          'remove'. If Value is empty, then the command/args
                                          will remain the same.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - containerName
                                    - operator
                                    type: object
                                  type: array
                                imageOverrider:
                                  description: ImageOverrider represents the rules dedicated
                                    to handling image overrides.
                                  items:
                                    description: ImageOverrider represents the rules dedicated
                                      to handling image overrides.
                                    properties:
                                      component:
                                        description: 'Component is part of image name. Basically
                                          we presume an image can be made of ''[registry/]repository[:tag]''.
                                          The registry could be: - k8s.gcr.io - fictional.registry.example:10443
                                          The repository could be: - kube-apiserver - fictional/nginx
                                          The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c'
                                        enum:
                                        - Registry
                                        - Repository
                                        - Tag
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the image.
                                        enum:
                                        - add
                                        - remove
                                        - replace
                                        type: string
                                      predicate:
                                        description: "Predicate filters images before applying
                                          the rule. \n Defaults to nil, in that case, the
                                          system will automatically detect image fields if
                                          the resource type is Pod, ReplicaSet, Deployment
                                          or StatefulSet by following rule: - Pod: spec/containers/<N>/image
                                          - ReplicaSet: spec/template/spec/containers/<N>/image
                                          - Deployment: spec/template/spec/containers/<N>/image
                                          - StatefulSet: spec/template/spec/containers/<N>/image
                                          In addition, all images will be processed if the
                                          resource object has more than one containers. \n
                                          If not nil, only images matches the filters will
                                          be processed."
                                        properties:
                                          path:
                                            description: Path indicates the path of target
                                              field
                                            type: string
                                        required:
                                        - path
                                        type: object
                                      value:
                                        description: Value to be applied to image. Must not
                                          be empty when operator is 'add' or 'replace'. Defaults
                                          to empty and ignored when operator is 'remove'.
                                        type: string
                                    required:
                                    - component
                                    - operator
                                    type: object
                                  type: array
                                plaintext:
                                  description: Plaintext represents override rules defined
                                    with plaintext overriders.
                                  items:
                                    description: PlaintextOverrider is a simple overrider
                                      that overrides target fields according to path, operator
                                      and value.
                                    properties:
                                      operator:
                                        description: 'Operator indicates the operation on
                                          target field. Available operators are: add, update
                                          and remove.'
                                        enum:
                                        - add
                                        - remove
                                        - replace
                                        type: string
                                      path:
                                        description: Path indicates the path of target field
                                        type: string
                                      value:
                                        description: Value to be applied to target field.
                                          Must be empty when operator is Remove.
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - operator
                                    - path
                                    type: object
                                  type: array
                              type: object
                            targetCluster:
                              description: TargetCluster defines restrictions on this override
                                policy that only applies to resources propagated to the matching
                                clusters. nil means matching all clusters.
                              properties:
                                clusterNames:
                                  description: ClusterNames is the list of clusters to be
                                    selected.
                                  items:
                                    type: string
                                  type: array
                                exclude:
                                  description: ExcludedClusters is the list of clusters to
                                    be ignored.
                                  items:
                                    type: string
                                  type: array
                                fieldSelector:
                                  description: FieldSelector is a filter to select member
                                    clusters by fields. If non-nil and non-empty, only the
                                    clusters match this filter will be selected.
                                  properties:
                                    matchExpressions:
                                      description: A list of field selector requirements.
                                      items:
                                        description: A node selector requirement is a selector
                                          that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: The label key that the selector applies
                                              to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship to
                                              a set of values. Valid operators are In, NotIn,
                                              Exists, DoesNotExist. Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values. If the
                                              operator is In or NotIn, the values array must
                                              be non-empty. If the operator is Exists or DoesNotExist,
                                              the values array must be empty. If the operator
                                              is Gt or Lt, the values array must have a single
                                              element, which will be interpreted as an integer.
                                              This array is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                labelSelector:
                                  description: LabelSelector is a filter to select member
                                    clusters by labels. If non-nil and non-empty, only the
                                    clusters match this filter will be selected.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector
                                        requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector
                                          that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship
                                              to a set of values. Valid operators are In,
                                              NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values.
                                              If the operator is In or NotIn, the values array
                                              must be non-empty. If the operator is Exists
                                              or DoesNotExist, the values array must be empty.
                                              This array is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs.
                                        A single {key,value} in the matchLabels map is equivalent
                                        to an element of matchExpressions, whose key field
                                        is "key", the operator is "In", and the values array
                                        contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                              type: object
                          required:
                          - overriders
                          type: object
                        type: array
                      overriders:
                        description: "Overriders represents the override rules that would
                          apply on resources \n Deprecated: This filed is deprecated in v1.0
                          and please use the OverrideRules instead."
                        properties:
                          argsOverrider:
                            description: ArgsOverrider represents the rules dedicated to handling
                              container args
                            items:
                              description: CommandArgsOverrider represents the rules dedicated
                                to handling command/args overrides.
                              properties:
                                containerName:
                                  description: The name of container
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the command/args.
                                  enum:
                                  - add
                                  - remove
                                  type: string
                                value:
                                  description: Value to be applied to command/args. Items
                                    in Value which will be appended after command/args when
                                    Operator is 'add'. Items in Value which match in command/args
                                    will be deleted when Operator is 'remove'. If Value is
                                    empty, then the command/args will remain the same.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - containerName
                              - operator
                              type: object
                            type: array
                          commandOverrider:
                            description: CommandOverrider represents the rules dedicated to
                              handling container command
                            items:
                              description: CommandArgsOverrider represents the rules dedicated
                                to handling command/args overrides.
                              properties:
                                containerName:
                                  description: The name of container
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the command/args.
                                  enum:
                                  - add
                                  - remove
                                  type: string
                                value:
                                  description: Value to be applied to command/args. Items
                                    in Value which will be appended after command/args when
                                    Operator is 'add'. Items in Value which match in command/args
                                    will be deleted when Operator is 'remove'. If Value is
                                    empty, then the command/args will remain the same.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - containerName
                              - operator
                              type: object
                            type: array
                          imageOverrider:
                            description: ImageOverrider represents the rules dedicated to
                              handling image overrides.
                            items:
                              description: ImageOverrider represents the rules dedicated to
                                handling image overrides.
                              properties:
                                component:
                                  description: 'Component is part of image name. Basically
                                    we presume an image can be made of ''[registry/]repository[:tag]''.
                                    The registry could be: - k8s.gcr.io - fictional.registry.example:10443
                                    The repository could be: - kube-apiserver - fictional/nginx
                                    The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c'
                                  enum:
                                  - Registry
                                  - Repository
                                  - Tag
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the image.
                                  enum:
                                  - add
                                  - remove
                                  - replace
                                  type: string
                                predicate:
                                  description: "Predicate filters images before applying the
                                    rule. \n Defaults to nil, in that case, the system will
                                    automatically detect image fields if the resource type
                                    is Pod, ReplicaSet, Deployment or StatefulSet by following
                                    rule: - Pod: spec/containers/<N>/image - ReplicaSet: spec/template/spec/containers/<N>/image
                                    - Deployment: spec/template/spec/containers/<N>/image
                                    - StatefulSet: spec/template/spec/containers/<N>/image
                                    In addition, all images will be processed if the resource
                                    object has more than one containers. \n If not nil, only
                                    images matches the filters will be processed."
                                  properties:
                                    path:
                                      description: Path indicates the path of target field
                                      type: string
                                  required:
                                  - path
                                  type: object
                                value:
                                  description: Value to be applied to image. Must not be empty
                                    when operator is 'add' or 'replace'. Defaults to empty
                                    and ignored when operator is 'remove'.
                                  type: string
                              required:
                              - component
                              - operator
                              type: object
                            type: array
                          plaintext:
                            description: Plaintext represents override rules defined with
                              plaintext overriders.
                            items:
                              description: PlaintextOverrider is a simple overrider that overrides
                                target fields according to path, operator and value.
                              properties:
                                operator:
                                  description: 'Operator indicates the operation on target
                                    field. Available operators are: add, update and remove.'
                                  enum:
                                  - add
                                  - remove
                                  - replace
                                  type: string
                                path:
                                  description: Path indicates the path of target field
                                  type: string
                                value:
                                  description: Value to be applied to target field. Must be
                                    empty when operator is Remove.
                                  x-kubernetes-preserve-unknown-fields: true
                              required:
                              - operator
                              - path
                              type: object
                            type: array
                        type: object
                      resourceSelectors:
                        description: ResourceSelectors restricts resource types that this
                          override policy applies to. nil means matching all resources.
                        items:
                          description: ResourceSelector the resources will be selected.
                          properties:
                            apiVersion:
                              description: APIVersion represents the API version of the target
                                resources.
                              type: string
                            kind:
                              description: Kind represents the Kind of the target resources.
                              type: string
                            labelSelector:
                              description: A label query over a set of resources. If name
                                is not empty, labelSelector will be ignored.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector
                                    requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector
                                      that contains values, a key, and an operator that relates
                                      the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are In, NotIn,
                                          Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values.
                                          If the operator is In or NotIn, the values array
                                          must be non-empty. If the operator is Exists or
                                          DoesNotExist, the values array must be empty. This
                                          array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs.
                                    A single {key,value} in the matchLabels map is equivalent
                                    to an element of matchExpressions, whose key field is
                                    "key", the operator is "In", and the values array contains
                                    only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            name:
                              description: Name of the target resource. Default is empty,
                                which means selecting all resources.
                              type: string
                            namespace:
                              description: Namespace of the target resource. Default is empty,
                                which means inherit from the parent object scope.
                              type: string
                          required:
                          - apiVersion
                          - kind
                          type: object
                        type: array
                      targetCluster:
                        description: "TargetCluster defines restrictions on this override
                          policy that only applies to resources propagated to the matching
                          clusters. nil means matching all clusters. \n Deprecated: This filed
                          is deprecated in v1.0 and please use the OverrideRules instead."
                        properties:
                          clusterNames:
                            description: ClusterNames is the list of clusters to be selected.
                            items:
                              type: string
                            type: array
                          exclude:
                            description: ExcludedClusters is the list of clusters to be ignored.
                            items:
                              type: string
                            type: array
                          fieldSelector:
                            description: FieldSelector is a filter to select member clusters
                              by fields. If non-nil and non-empty, only the clusters match
                              this filter will be selected.
                            properties:
                              matchExpressions:
                                description: A list of field selector requirements.
                                items:
                                  description: A node selector requirement is a selector that
                                    contains values, a key, and an operator that relates the
                                    key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector applies
                                        to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship to a set
                                        of values. Valid operators are In, NotIn, Exists,
                                        DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the operator
                                        is In or NotIn, the values array must be non-empty.
                                        If the operator is Exists or DoesNotExist, the values
                                        array must be empty. If the operator is Gt or Lt,
                                        the values array must have a single element, which
                                        will be interpreted as an integer. This array is replaced
                                        during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                            type: object
                          labelSelector:
                            description: LabelSelector is a filter to select member clusters
                              by labels. If non-nil and non-empty, only the clusters match
                              this filter will be selected.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that relates
                                    the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In, NotIn,
                                        Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If
                                        the operator is In or NotIn, the values array must
                                        be non-empty. If the operator is Exists or DoesNotExist,
                                        the values array must be empty. This array is replaced
                                        during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs. A
                                  single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field is "key",
                                  the operator is "In", and the values array contains only
                                  "value". The requirements are ANDed.
                                type: object
                            type: object
                        type: object
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_clusterpropagationpolicies.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: clusterpropagationpolicies.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: ClusterPropagationPolicy
            listKind: ClusterPropagationPolicyList
            plural: clusterpropagationpolicies
            shortNames:
            - cpp
            singular: clusterpropagationpolicy
          scope: Cluster
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: 'ClusterPropagationPolicy represents the cluster-wide policy
                  that propagates a group of resources to one or more clusters. Different
                  with PropagationPolicy that could only propagate resources in its own namespace,
                  ClusterPropagationPolicy is able to propagate cluster level resources and
                  resources in any namespace other than system reserved ones. System reserved
                  namespaces are: karmada-system, karmada-cluster, karmada-es-*.'
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of ClusterPropagationPolicy.
                    properties:
                      association:
                        description: 'Association tells if relevant resources should be selected
                          automatically. e.g. a ConfigMap referred by a Deployment. default
                          false. Deprecated: in favor of PropagateDeps.'
                        type: boolean
                      dependentOverrides:
                        description: "DependentOverrides represents the list of overrides(OverridePolicy)
                          which must present before the current PropagationPolicy takes effect.
                          \n It used to explicitly specify overrides which current PropagationPolicy
                          rely on. A typical scenario is the users create OverridePolicy(ies)
                          and resources at the same time, they want to ensure the new-created
                          policies would be adopted. \n Note: For the overrides, OverridePolicy(ies)
                          in current namespace and ClusterOverridePolicy(ies), which not present
                          in this list will still be applied if they matches the resources."
                        items:
                          type: string
                        type: array
                      placement:
                        description: Placement represents the rule for select clusters to
                          propagate resources.
                        properties:
                          clusterAffinity:
                            description: ClusterAffinity represents scheduling restrictions
                              to a certain set of clusters. If not set, any cluster can be
                              scheduling candidate.
                            properties:
                              clusterNames:
                                description: ClusterNames is the list of clusters to be selected.
                                items:
                                  type: string
                                type: array
                              exclude:
                                description: ExcludedClusters is the list of clusters to be
                                  ignored.
                                items:
                                  type: string
                                type: array
                              fieldSelector:
                                description: FieldSelector is a filter to select member clusters
                                  by fields. If non-nil and non-empty, only the clusters match
                                  this filter will be selected.
                                properties:
                                  matchExpressions:
                                    description: A list of field selector requirements.
                                    items:
                                      description: A node selector requirement is a selector
                                        that contains values, a key, and an operator that
                                        relates the key and values.
                                      properties:
                                        key:
                                          description: The label key that the selector applies
                                            to.
                                          type: string
                                        operator:
                                          description: Represents a key's relationship to
                                            a set of values. Valid operators are In, NotIn,
                                            Exists, DoesNotExist. Gt, and Lt.
                                          type: string
                                        values:
                                          description: An array of string values. If the operator
                                            is In or NotIn, the values array must be non-empty.
                                            If the operator is Exists or DoesNotExist, the
                                            values array must be empty. If the operator is
                                            Gt or Lt, the values array must have a single
                                            element, which will be interpreted as an integer.
                                            This array is replaced during a strategic merge
                                            patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                type: object
                              labelSelector:
                                description: LabelSelector is a filter to select member clusters
                                  by labels. If non-nil and non-empty, only the clusters match
                                  this filter will be selected.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label selector
                                      requirements. The requirements are ANDed.
                                    items:
                                      description: A label selector requirement is a selector
                                        that contains values, a key, and an operator that
                                        relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the selector
                                            applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's relationship
                                            to a set of values. Valid operators are In, NotIn,
                                            Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string values.
                                            If the operator is In or NotIn, the values array
                                            must be non-empty. If the operator is Exists or
                                            DoesNotExist, the values array must be empty.
                                            This array is replaced during a strategic merge
                                            patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value} pairs.
                                      A single {key,value} in the matchLabels map is equivalent
                                      to an element of matchExpressions, whose key field is
                                      "key", the operator is "In", and the values array contains
                                      only "value". The requirements are ANDed.
                                    type: object
                                type: object
                            type: object
                          clusterTolerations:
                            description: ClusterTolerations represents the tolerations.
                            items:
                              description: The pod this Toleration is attached to tolerates
                                any taint that matches the triple <key,value,effect> using
                                the matching operator <operator>.
                              properties:
                                effect:
                                  description: Effect indicates the taint effect to match.
                                    Empty means match all taint effects. When specified, allowed
                                    values are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Key is the taint key that the toleration applies
                                    to. Empty means match all taint keys. If the key is empty,
                                    operator must be Exists; this combination means to match
                                    all values and all keys.
                                  type: string
                                operator:
                                  description: Operator represents a key's relationship to
                                    the value. Valid operators are Exists and Equal. Defaults
                                    to Equal. Exists is equivalent to wildcard for value,
                                    so that a pod can tolerate all taints of a particular
                                    category.
                                  type: string
                                tolerationSeconds:
                                  description: TolerationSeconds represents the period of
                                    time the toleration (which must be of effect NoExecute,
                                    otherwise this field is ignored) tolerates the taint.
                                    By default, it is not set, which means tolerate the taint
                                    forever (do not evict). Zero and negative values will
                                    be treated as 0 (evict immediately) by the system.
                                  format: int64
                                  type: integer
                                value:
                                  description: Value is the taint value the toleration matches
                                    to. If the operator is Exists, the value should be empty,
                                    otherwise just a regular string.
                                  type: string
                              type: object
                            type: array
                          replicaScheduling:
                            description: ReplicaScheduling represents the scheduling policy
                              on dealing with the number of replicas when propagating resources
                              that have replicas in spec (e.g. deployments, statefulsets)
                              to member clusters.
                            properties:
                              replicaDivisionPreference:
                                description: ReplicaDivisionPreference determines how the
                                  replicas is divided when ReplicaSchedulingType is "Divided".
                                  Valid options are Aggregated and Weighted. "Aggregated"
                                  divides replicas into clusters as few as possible, while
                                  respecting clusters' resource availabilities during the
                                  division. "Weighted" divides replicas by weight according
                                  to WeightPreference.
                                enum:
                                - Aggregated
                                - Weighted
                                type: string
                              replicaSchedulingType:
                                description: ReplicaSchedulingType determines how the replicas
                                  is scheduled when karmada propagating a resource. Valid
                                  options are Duplicated and Divided. "Duplicated" duplicates
                                  the same replicas to each candidate member cluster from
                                  resource. "Divided" divides replicas into parts according
                                  to number of valid candidate member clusters, and exact
                                  replicas for each cluster are determined by ReplicaDivisionPreference.
                                enum:
                                - Duplicated
                                - Divided
                                type: string
                              weightPreference:
                                description: WeightPreference describes weight for each cluster
                                  or for each group of cluster If ReplicaDivisionPreference
                                  is set to "Weighted", and WeightPreference is not set, scheduler
                                  will weight all clusters the same.
                                properties:
                                  dynamicWeight:
                                    description: DynamicWeight specifies the factor to generates
                                      dynamic weight list. If specified, StaticWeightList
                                      will be ignored.
                                    enum:
                                    - AvailableReplicas
                                    type: string
                                  staticWeightList:
                                    description: StaticWeightList defines the static cluster
                                      weight.
                                    items:
                                      description: StaticClusterWeight defines the static
                                        cluster weight.
                                      properties:
                                        targetCluster:
                                          description: TargetCluster describes the filter
                                            to select clusters.
                                          properties:
                                            clusterNames:
                                              description: ClusterNames is the list of clusters
                                                to be selected.
                                              items:
                                                type: string
                                              type: array
                                            exclude:
                                              description: ExcludedClusters is the list of
                                                clusters to be ignored.
                                              items:
                                                type: string
                                              type: array
                                            fieldSelector:
                                              description: FieldSelector is a filter to select
                                                member clusters by fields. If non-nil and
                                                non-empty, only the clusters match this filter
                                                will be selected.
                                              properties:
                                                matchExpressions:
                                                  description: A list of field selector requirements.
                                                  items:
                                                    description: A node selector requirement
                                                      is a selector that contains values,
                                                      a key, and an operator that relates
                                                      the key and values.
                                                    properties:
                                                      key:
                                                        description: The label key that the
                                                          selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Represents a key's relationship
                                                          to a set of values. Valid operators
                                                          are In, NotIn, Exists, DoesNotExist.
                                                          Gt, and Lt.
                                                        type: string
                                                      values:
                                                        description: An array of string values.
                                                          If the operator is In or NotIn,
                                                          the values array must be non-empty.
                                                          If the operator is Exists or DoesNotExist,
                                                          the values array must be empty.
                                                          If the operator is Gt or Lt, the
                                                          values array must have a single
                                                          element, which will be interpreted
                                                          as an integer. This array is replaced
                                                          during a strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                              type: object
                                            labelSelector:
                                              description: LabelSelector is a filter to select
                                                member clusters by labels. If non-nil and
                                                non-empty, only the clusters match this filter
                                                will be selected.
                                              properties:
                                                matchExpressions:
                                                  description: matchExpressions is a list
                                                    of label selector requirements. The requirements
                                                    are ANDed.
                                                  items:
                                                    description: A label selector requirement
                                                      is a selector that contains values,
                                                      a key, and an operator that relates
                                                      the key and values.
                                                    properties:
                                                      key:
                                                        description: key is the label key
                                                          that the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: operator represents a
                                                          key's relationship to a set of values.
                                                          Valid operators are In, NotIn, Exists
                                                          and DoesNotExist.
                                                        type: string
                                                      values:
                                                        description: values is an array of
                                                          string values. If the operator is
                                                          In or NotIn, the values array must
                                                          be non-empty. If the operator is
                                                          Exists or DoesNotExist, the values
                                                          array must be empty. This array
                                                          is replaced during a strategic merge
                                                          patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: matchLabels is a map of {key,value}
                                                    pairs. A single {key,value} in the matchLabels
                                                    map is equivalent to an element of matchExpressions,
                                                    whose key field is "key", the operator
                                                    is "In", and the values array contains
                                                    only "value". The requirements are ANDed.
                                                  type: object
                                              type: object
                                          type: object
                                        weight:
                                          description: Weight expressing the preference to
                                            the cluster(s) specified by 'TargetCluster'.
                                          format: int64
                                          minimum: 1
                                          type: integer
                                      required:
                                      - targetCluster
                                      - weight
                                      type: object
                                    type: array
                                type: object
                            type: object
                          spreadConstraints:
                            description: SpreadConstraints represents a list of the scheduling
                              constraints.
                            items:
                              description: SpreadConstraint represents the spread constraints
                                on resources.
                              properties:
                                maxGroups:
                                  description: MaxGroups restricts the maximum number of cluster
                                    groups to be selected.
                                  type: integer
                                minGroups:
                                  description: MinGroups restricts the minimum number of cluster
                                    groups to be selected. Defaults to 1.
                                  type: integer
                                spreadByField:
                                  description: 'SpreadByField represents the fields on Karmada
                                    cluster API used for dynamically grouping member clusters
                                    into different groups. Resources will be spread among
                                    different cluster groups. Available fields for spreading
                                    are: cluster, region, zone, and provider. SpreadByField
                                    should not co-exist with SpreadByLabel. If both SpreadByField
                                    and SpreadByLabel are empty, SpreadByField will be set
                                    to "cluster" by system.'
                                  enum:
                                  - cluster
                                  - region
                                  - zone
                                  - provider
                                  type: string
                                spreadByLabel:
                                  description: SpreadByLabel represents the label key used
                                    for grouping member clusters into different groups. Resources
                                    will be spread among different cluster groups. SpreadByLabel
                                    should not co-exist with SpreadByField.
                                  type: string
                              type: object
                            type: array
                        type: object
                      propagateDeps:
                        description: "PropagateDeps tells if relevant resources should be
                          propagated automatically. Take 'Deployment' which referencing 'ConfigMap'
                          and 'Secret' as an example, when 'propagateDeps' is 'true', the
                          referencing resources could be omitted(for saving config effort)
                          from 'resourceSelectors' as they will be propagated along with the
                          Deployment. In addition to the propagating process, the referencing
                          resources will be migrated along with the Deployment in the fail-over
                          scenario. \n Defaults to false."
                        type: boolean
                      resourceSelectors:
                        description: ResourceSelectors used to select resources.
                        items:
                          description: ResourceSelector the resources will be selected.
                          properties:
                            apiVersion:
                              description: APIVersion represents the API version of the target
                                resources.
                              type: string
                            kind:
                              description: Kind represents the Kind of the target resources.
                              type: string
                            labelSelector:
                              description: A label query over a set of resources. If name
                                is not empty, labelSelector will be ignored.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector
                                    requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector
                                      that contains values, a key, and an operator that relates
                                      the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are In, NotIn,
                                          Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values.
                                          If the operator is In or NotIn, the values array
                                          must be non-empty. If the operator is Exists or
                                          DoesNotExist, the values array must be empty. This
                                          array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs.
                                    A single {key,value} in the matchLabels map is equivalent
                                    to an element of matchExpressions, whose key field is
                                    "key", the operator is "In", and the values array contains
                                    only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            name:
                              description: Name of the target resource. Default is empty,
                                which means selecting all resources.
                              type: string
                            namespace:
                              description: Namespace of the target resource. Default is empty,
                                which means inherit from the parent object scope.
                              type: string
                          required:
                          - apiVersion
                          - kind
                          type: object
                        type: array
                      schedulerName:
                        description: SchedulerName represents which scheduler to proceed the
                          scheduling. If specified, the policy will be dispatched by specified
                          scheduler. If not specified, the policy will be dispatched by default
                          scheduler.
                        type: string
                    required:
                    - resourceSelectors
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_federatedresourcequotas.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: federatedresourcequotas.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: FederatedResourceQuota
            listKind: FederatedResourceQuotaList
            plural: federatedresourcequotas
            singular: federatedresourcequota
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: FederatedResourceQuota sets aggregate quota restrictions enforced
                  per namespace across all clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec defines the desired quota.
                    properties:
                      overall:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: Overall is the set of desired hard limits for each named
                          resource.
                        type: object
                      staticAssignments:
                        description: 'StaticAssignments represents the subset of desired hard
                          limits for each cluster. Note: for clusters not present in this
                          list, Karmada will set an empty ResourceQuota to them, which means
                          these clusters will have no quotas in the referencing namespace.'
                        items:
                          description: StaticClusterAssignment represents the set of desired
                            hard limits for a specific cluster.
                          properties:
                            clusterName:
                              description: ClusterName is the name of the cluster the limits
                                enforce to.
                              type: string
                            hard:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: Hard is the set of desired hard limits for each
                                named resource.
                              type: object
                          required:
                          - clusterName
                          - hard
                          type: object
                        type: array
                    required:
                    - overall
                    type: object
                  status:
                    description: Status defines the actual enforced quota and its current
                      usage.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus is the observed quota usage of each
                          cluster.
                        items:
                          description: ClusterQuotaStatus represents the set of desired limits
                            and observed usage for a specific cluster.
                          properties:
                            clusterName:
                              description: ClusterName is the name of the cluster the limits
                                enforce to.
                              type: string
                            hard:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Hard is the set of enforced hard limits for each
                                named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
                              type: object
                            used:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: Used is the current observed total usage of the
                                resource in the namespace.
                              type: object
                          required:
                          - clusterName
                          type: object
                        type: array
                      overall:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: Overall is the set of enforced hard limits for each named
                          resource.
                        type: object
                      overallUsed:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: OverallUsed is the current observed total usage of the
                          resource in the namespace.
                        type: object
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_overridepolicies.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: overridepolicies.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: OverridePolicy
            listKind: OverridePolicyList
            plural: overridepolicies
            shortNames:
            - op
            singular: overridepolicy
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: OverridePolicy represents the policy that overrides a group of
                  resources to one or more clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of OverridePolicy.
                    properties:
                      overrideRules:
                        description: OverrideRules defines a collection of override rules
                          on target clusters.
                        items:
                          description: RuleWithCluster defines the override rules on clusters.
                          properties:
                            overriders:
                              description: Overriders represents the override rules that would
                                apply on resources
                              properties:
                                argsOverrider:
                                  description: ArgsOverrider represents the rules dedicated
                                    to handling container args
                                  items:
                                    description: CommandArgsOverrider represents the rules
                                      dedicated to handling command/args overrides.
                                    properties:
                                      containerName:
                                        description: The name of container
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the command/args.
                                        enum:
                                        - add
                                        - remove
                                        type: string
                                      value:
                                        description: Value to be applied to command/args.
                                          Items in Value which will be appended after command/args
                                          when Operator is 'add'. Items in Value which match
                                          in command/args will be deleted when Operator is
                                          'remove'. If Value is empty, then the command/args
                                          will remain the same.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - containerName
                                    - operator
                                    type: object
                                  type: array
                                commandOverrider:
                                  description: CommandOverrider represents the rules dedicated
                                    to handling container command
                                  items:
                                    description: CommandArgsOverrider represents the rules
                                      dedicated to handling command/args overrides.
                                    properties:
                                      containerName:
                                        description: The name of container
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the command/args.
                                        enum:
                                        - add
                                        - remove
                                        type: string
                                      value:
                                        description: Value to be applied to command/args.
                                          Items in Value which will be appended after command/args
                                          when Operator is 'add'. Items in Value which match
                                          in command/args will be deleted when Operator is
                                          'remove'. If Value is empty, then the command/args
                                          will remain the same.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - containerName
                                    - operator
                                    type: object
                                  type: array
                                imageOverrider:
                                  description: ImageOverrider represents the rules dedicated
                                    to handling image overrides.
                                  items:
                                    description: ImageOverrider represents the rules dedicated
                                      to handling image overrides.
                                    properties:
                                      component:
                                        description: 'Component is part of image name. Basically
                                          we presume an image can be made of ''[registry/]repository[:tag]''.
                                          The registry could be: - k8s.gcr.io - fictional.registry.example:10443
                                          The repository could be: - kube-apiserver - fictional/nginx
                                          The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c'
                                        enum:
                                        - Registry
                                        - Repository
                                        - Tag
                                        type: string
                                      operator:
                                        description: Operator represents the operator which
                                          will apply on the image.
                                        enum:
                                        - add
                                        - remove
                                        - replace
                                        type: string
                                      predicate:
                                        description: "Predicate filters images before applying
                                          the rule. \n Defaults to nil, in that case, the
                                          system will automatically detect image fields if
                                          the resource type is Pod, ReplicaSet, Deployment
                                          or StatefulSet by following rule: - Pod: spec/containers/<N>/image
                                          - ReplicaSet: spec/template/spec/containers/<N>/image
                                          - Deployment: spec/template/spec/containers/<N>/image
                                          - StatefulSet: spec/template/spec/containers/<N>/image
                                          In addition, all images will be processed if the
                                          resource object has more than one containers. \n
                                          If not nil, only images matches the filters will
                                          be processed."
                                        properties:
                                          path:
                                            description: Path indicates the path of target
                                              field
                                            type: string
                                        required:
                                        - path
                                        type: object
                                      value:
                                        description: Value to be applied to image. Must not
                                          be empty when operator is 'add' or 'replace'. Defaults
                                          to empty and ignored when operator is 'remove'.
                                        type: string
                                    required:
                                    - component
                                    - operator
                                    type: object
                                  type: array
                                plaintext:
                                  description: Plaintext represents override rules defined
                                    with plaintext overriders.
                                  items:
                                    description: PlaintextOverrider is a simple overrider
                                      that overrides target fields according to path, operator
                                      and value.
                                    properties:
                                      operator:
                                        description: 'Operator indicates the operation on
                                          target field. Available operators are: add, update
                                          and remove.'
                                        enum:
                                        - add
                                        - remove
                                        - replace
                                        type: string
                                      path:
                                        description: Path indicates the path of target field
                                        type: string
                                      value:
                                        description: Value to be applied to target field.
                                          Must be empty when operator is Remove.
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - operator
                                    - path
                                    type: object
                                  type: array
                              type: object
                            targetCluster:
                              description: TargetCluster defines restrictions on this override
                                policy that only applies to resources propagated to the matching
                                clusters. nil means matching all clusters.
                              properties:
                                clusterNames:
                                  description: ClusterNames is the list of clusters to be
                                    selected.
                                  items:
                                    type: string
                                  type: array
                                exclude:
                                  description: ExcludedClusters is the list of clusters to
                                    be ignored.
                                  items:
                                    type: string
                                  type: array
                                fieldSelector:
                                  description: FieldSelector is a filter to select member
                                    clusters by fields. If non-nil and non-empty, only the
                                    clusters match this filter will be selected.
                                  properties:
                                    matchExpressions:
                                      description: A list of field selector requirements.
                                      items:
                                        description: A node selector requirement is a selector
                                          that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: The label key that the selector applies
                                              to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship to
                                              a set of values. Valid operators are In, NotIn,
                                              Exists, DoesNotExist. Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values. If the
                                              operator is In or NotIn, the values array must
                                              be non-empty. If the operator is Exists or DoesNotExist,
                                              the values array must be empty. If the operator
                                              is Gt or Lt, the values array must have a single
                                              element, which will be interpreted as an integer.
                                              This array is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                labelSelector:
                                  description: LabelSelector is a filter to select member
                                    clusters by labels. If non-nil and non-empty, only the
                                    clusters match this filter will be selected.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector
                                        requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector
                                          that contains values, a key, and an operator that
                                          relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship
                                              to a set of values. Valid operators are In,
                                              NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values.
                                              If the operator is In or NotIn, the values array
                                              must be non-empty. If the operator is Exists
                                              or DoesNotExist, the values array must be empty.
                                              This array is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs.
                                        A single {key,value} in the matchLabels map is equivalent
                                        to an element of matchExpressions, whose key field
                                        is "key", the operator is "In", and the values array
                                        contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                              type: object
                          required:
                          - overriders
                          type: object
                        type: array
                      overriders:
                        description: "Overriders represents the override rules that would
                          apply on resources \n Deprecated: This filed is deprecated in v1.0
                          and please use the OverrideRules instead."
                        properties:
                          argsOverrider:
                            description: ArgsOverrider represents the rules dedicated to handling
                              container args
                            items:
                              description: CommandArgsOverrider represents the rules dedicated
                                to handling command/args overrides.
                              properties:
                                containerName:
                                  description: The name of container
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the command/args.
                                  enum:
                                  - add
                                  - remove
                                  type: string
                                value:
                                  description: Value to be applied to command/args. Items
                                    in Value which will be appended after command/args when
                                    Operator is 'add'. Items in Value which match in command/args
                                    will be deleted when Operator is 'remove'. If Value is
                                    empty, then the command/args will remain the same.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - containerName
                              - operator
                              type: object
                            type: array
                          commandOverrider:
                            description: CommandOverrider represents the rules dedicated to
                              handling container command
                            items:
                              description: CommandArgsOverrider represents the rules dedicated
                                to handling command/args overrides.
                              properties:
                                containerName:
                                  description: The name of container
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the command/args.
                                  enum:
                                  - add
                                  - remove
                                  type: string
                                value:
                                  description: Value to be applied to command/args. Items
                                    in Value which will be appended after command/args when
                                    Operator is 'add'. Items in Value which match in command/args
                                    will be deleted when Operator is 'remove'. If Value is
                                    empty, then the command/args will remain the same.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - containerName
                              - operator
                              type: object
                            type: array
                          imageOverrider:
                            description: ImageOverrider represents the rules dedicated to
                              handling image overrides.
                            items:
                              description: ImageOverrider represents the rules dedicated to
                                handling image overrides.
                              properties:
                                component:
                                  description: 'Component is part of image name. Basically
                                    we presume an image can be made of ''[registry/]repository[:tag]''.
                                    The registry could be: - k8s.gcr.io - fictional.registry.example:10443
                                    The repository could be: - kube-apiserver - fictional/nginx
                                    The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c'
                                  enum:
                                  - Registry
                                  - Repository
                                  - Tag
                                  type: string
                                operator:
                                  description: Operator represents the operator which will
                                    apply on the image.
                                  enum:
                                  - add
                                  - remove
                                  - replace
                                  type: string
                                predicate:
                                  description: "Predicate filters images before applying the
                                    rule. \n Defaults to nil, in that case, the system will
                                    automatically detect image fields if the resource type
                                    is Pod, ReplicaSet, Deployment or StatefulSet by following
                                    rule: - Pod: spec/containers/<N>/image - ReplicaSet: spec/template/spec/containers/<N>/image
                                    - Deployment: spec/template/spec/containers/<N>/image
                                    - StatefulSet: spec/template/spec/containers/<N>/image
                                    In addition, all images will be processed if the resource
                                    object has more than one containers. \n If not nil, only
                                    images matches the filters will be processed."
                                  properties:
                                    path:
                                      description: Path indicates the path of target field
                                      type: string
                                  required:
                                  - path
                                  type: object
                                value:
                                  description: Value to be applied to image. Must not be empty
                                    when operator is 'add' or 'replace'. Defaults to empty
                                    and ignored when operator is 'remove'.
                                  type: string
                              required:
                              - component
                              - operator
                              type: object
                            type: array
                          plaintext:
                            description: Plaintext represents override rules defined with
                              plaintext overriders.
                            items:
                              description: PlaintextOverrider is a simple overrider that overrides
                                target fields according to path, operator and value.
                              properties:
                                operator:
                                  description: 'Operator indicates the operation on target
                                    field. Available operators are: add, update and remove.'
                                  enum:
                                  - add
                                  - remove
                                  - replace
                                  type: string
                                path:
                                  description: Path indicates the path of target field
                                  type: string
                                value:
                                  description: Value to be applied to target field. Must be
                                    empty when operator is Remove.
                                  x-kubernetes-preserve-unknown-fields: true
                              required:
                              - operator
                              - path
                              type: object
                            type: array
                        type: object
                      resourceSelectors:
                        description: ResourceSelectors restricts resource types that this
                          override policy applies to. nil means matching all resources.
                        items:
                          description: ResourceSelector the resources will be selected.
                          properties:
                            apiVersion:
                              description: APIVersion represents the API version of the target
                                resources.
                              type: string
                            kind:
                              description: Kind represents the Kind of the target resources.
                              type: string
                            labelSelector:
                              description: A label query over a set of resources. If name
                                is not empty, labelSelector will be ignored.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector
                                    requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector
                                      that contains values, a key, and an operator that relates
                                      the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are In, NotIn,
                                          Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values.
                                          If the operator is In or NotIn, the values array
                                          must be non-empty. If the operator is Exists or
                                          DoesNotExist, the values array must be empty. This
                                          array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs.
                                    A single {key,value} in the matchLabels map is equivalent
                                    to an element of matchExpressions, whose key field is
                                    "key", the operator is "In", and the values array contains
                                    only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            name:
                              description: Name of the target resource. Default is empty,
                                which means selecting all resources.
                              type: string
                            namespace:
                              description: Namespace of the target resource. Default is empty,
                                which means inherit from the parent object scope.
                              type: string
                          required:
                          - apiVersion
                          - kind
                          type: object
                        type: array
                      targetCluster:
                        description: "TargetCluster defines restrictions on this override
                          policy that only applies to resources propagated to the matching
                          clusters. nil means matching all clusters. \n Deprecated: This filed
                          is deprecated in v1.0 and please use the OverrideRules instead."
                        properties:
                          clusterNames:
                            description: ClusterNames is the list of clusters to be selected.
                            items:
                              type: string
                            type: array
                          exclude:
                            description: ExcludedClusters is the list of clusters to be ignored.
                            items:
                              type: string
                            type: array
                          fieldSelector:
                            description: FieldSelector is a filter to select member clusters
                              by fields. If non-nil and non-empty, only the clusters match
                              this filter will be selected.
                            properties:
                              matchExpressions:
                                description: A list of field selector requirements.
                                items:
                                  description: A node selector requirement is a selector that
                                    contains values, a key, and an operator that relates the
                                    key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector applies
                                        to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship to a set
                                        of values. Valid operators are In, NotIn, Exists,
                                        DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the operator
                                        is In or NotIn, the values array must be non-empty.
                                        If the operator is Exists or DoesNotExist, the values
                                        array must be empty. If the operator is Gt or Lt,
                                        the values array must have a single element, which
                                        will be interpreted as an integer. This array is replaced
                                        during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                            type: object
                          labelSelector:
                            description: LabelSelector is a filter to select member clusters
                              by labels. If non-nil and non-empty, only the clusters match
                              this filter will be selected.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that relates
                                    the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In, NotIn,
                                        Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If
                                        the operator is In or NotIn, the values array must
                                        be non-empty. If the operator is Exists or DoesNotExist,
                                        the values array must be empty. This array is replaced
                                        during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs. A
                                  single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field is "key",
                                  the operator is "In", and the values array contains only
                                  "value". The requirements are ANDed.
                                type: object
                            type: object
                        type: object
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      policy.karmada.io_propagationpolicies.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: propagationpolicies.policy.karmada.io
        spec:
          group: policy.karmada.io
          names:
            categories:
            - karmada-io
            kind: PropagationPolicy
            listKind: PropagationPolicyList
            plural: propagationpolicies
            shortNames:
            - pp
            singular: propagationpolicy
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: PropagationPolicy represents the policy that propagates a group
                  of resources to one or more clusters.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of PropagationPolicy.
                    properties:
                      association:
                        description: 'Association tells if relevant resources should be selected
                          automatically. e.g. a ConfigMap referred by a Deployment. default
                          false. Deprecated: in favor of PropagateDeps.'
                        type: boolean
                      dependentOverrides:
                        description: "DependentOverrides represents the list of overrides(OverridePolicy)
                          which must present before the current PropagationPolicy takes effect.
                          \n It used to explicitly specify overrides which current PropagationPolicy
                          rely on. A typical scenario is the users create OverridePolicy(ies)
                          and resources at the same time, they want to ensure the new-created
                          policies would be adopted. \n Note: For the overrides, OverridePolicy(ies)
                          in current namespace and ClusterOverridePolicy(ies), which not present
                          in this list will still be applied if they matches the resources."
                        items:
                          type: string
                        type: array
                      placement:
                        description: Placement represents the rule for select clusters to
                          propagate resources.
                        properties:
                          clusterAffinity:
                            description: ClusterAffinity represents scheduling restrictions
                              to a certain set of clusters. If not set, any cluster can be
                              scheduling candidate.
                            properties:
                              clusterNames:
                                description: ClusterNames is the list of clusters to be selected.
                                items:
                                  type: string
                                type: array
                              exclude:
                                description: ExcludedClusters is the list of clusters to be
                                  ignored.
                                items:
                                  type: string
                                type: array
                              fieldSelector:
                                description: FieldSelector is a filter to select member clusters
                                  by fields. If non-nil and non-empty, only the clusters match
                                  this filter will be selected.
                                properties:
                                  matchExpressions:
                                    description: A list of field selector requirements.
                                    items:
                                      description: A node selector requirement is a selector
                                        that contains values, a key, and an operator that
                                        relates the key and values.
                                      properties:
                                        key:
                                          description: The label key that the selector applies
                                            to.
                                          type: string
                                        operator:
                                          description: Represents a key's relationship to
                                            a set of values. Valid operators are In, NotIn,
                                            Exists, DoesNotExist. Gt, and Lt.
                                          type: string
                                        values:
                                          description: An array of string values. If the operator
                                            is In or NotIn, the values array must be non-empty.
                                            If the operator is Exists or DoesNotExist, the
                                            values array must be empty. If the operator is
                                            Gt or Lt, the values array must have a single
                                            element, which will be interpreted as an integer.
                                            This array is replaced during a strategic merge
                                            patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                type: object
                              labelSelector:
                                description: LabelSelector is a filter to select member clusters
                                  by labels. If non-nil and non-empty, only the clusters match
                                  this filter will be selected.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label selector
                                      requirements. The requirements are ANDed.
                                    items:
                                      description: A label selector requirement is a selector
                                        that contains values, a key, and an operator that
                                        relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the selector
                                            applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's relationship
                                            to a set of values. Valid operators are In, NotIn,
                                            Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string values.
                                            If the operator is In or NotIn, the values array
                                            must be non-empty. If the operator is Exists or
                                            DoesNotExist, the values array must be empty.
                                            This array is replaced during a strategic merge
                                            patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value} pairs.
                                      A single {key,value} in the matchLabels map is equivalent
                                      to an element of matchExpressions, whose key field is
                                      "key", the operator is "In", and the values array contains
                                      only "value". The requirements are ANDed.
                                    type: object
                                type: object
                            type: object
                          clusterTolerations:
                            description: ClusterTolerations represents the tolerations.
                            items:
                              description: The pod this Toleration is attached to tolerates
                                any taint that matches the triple <key,value,effect> using
                                the matching operator <operator>.
                              properties:
                                effect:
                                  description: Effect indicates the taint effect to match.
                                    Empty means match all taint effects. When specified, allowed
                                    values are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Key is the taint key that the toleration applies
                                    to. Empty means match all taint keys. If the key is empty,
                                    operator must be Exists; this combination means to match
                                    all values and all keys.
                                  type: string
                                operator:
                                  description: Operator represents a key's relationship to
                                    the value. Valid operators are Exists and Equal. Defaults
                                    to Equal. Exists is equivalent to wildcard for value,
                                    so that a pod can tolerate all taints of a particular
                                    category.
                                  type: string
                                tolerationSeconds:
                                  description: TolerationSeconds represents the period of
                                    time the toleration (which must be of effect NoExecute,
                                    otherwise this field is ignored) tolerates the taint.
                                    By default, it is not set, which means tolerate the taint
                                    forever (do not evict). Zero and negative values will
                                    be treated as 0 (evict immediately) by the system.
                                  format: int64
                                  type: integer
                                value:
                                  description: Value is the taint value the toleration matches
                                    to. If the operator is Exists, the value should be empty,
                                    otherwise just a regular string.
                                  type: string
                              type: object
                            type: array
                          replicaScheduling:
                            description: ReplicaScheduling represents the scheduling policy
                              on dealing with the number of replicas when propagating resources
                              that have replicas in spec (e.g. deployments, statefulsets)
                              to member clusters.
                            properties:
                              replicaDivisionPreference:
                                description: ReplicaDivisionPreference determines how the
                                  replicas is divided when ReplicaSchedulingType is "Divided".
                                  Valid options are Aggregated and Weighted. "Aggregated"
                                  divides replicas into clusters as few as possible, while
                                  respecting clusters' resource availabilities during the
                                  division. "Weighted" divides replicas by weight according
                                  to WeightPreference.
                                enum:
                                - Aggregated
                                - Weighted
                                type: string
                              replicaSchedulingType:
                                description: ReplicaSchedulingType determines how the replicas
                                  is scheduled when karmada propagating a resource. Valid
                                  options are Duplicated and Divided. "Duplicated" duplicates
                                  the same replicas to each candidate member cluster from
                                  resource. "Divided" divides replicas into parts according
                                  to number of valid candidate member clusters, and exact
                                  replicas for each cluster are determined by ReplicaDivisionPreference.
                                enum:
                                - Duplicated
                                - Divided
                                type: string
                              weightPreference:
                                description: WeightPreference describes weight for each cluster
                                  or for each group of cluster If ReplicaDivisionPreference
                                  is set to "Weighted", and WeightPreference is not set, scheduler
                                  will weight all clusters the same.
                                properties:
                                  dynamicWeight:
                                    description: DynamicWeight specifies the factor to generates
                                      dynamic weight list. If specified, StaticWeightList
                                      will be ignored.
                                    enum:
                                    - AvailableReplicas
                                    type: string
                                  staticWeightList:
                                    description: StaticWeightList defines the static cluster
                                      weight.
                                    items:
                                      description: StaticClusterWeight defines the static
                                        cluster weight.
                                      properties:
                                        targetCluster:
                                          description: TargetCluster describes the filter
                                            to select clusters.
                                          properties:
                                            clusterNames:
                                              description: ClusterNames is the list of clusters
                                                to be selected.
                                              items:
                                                type: string
                                              type: array
                                            exclude:
                                              description: ExcludedClusters is the list of
                                                clusters to be ignored.
                                              items:
                                                type: string
                                              type: array
                                            fieldSelector:
                                              description: FieldSelector is a filter to select
                                                member clusters by fields. If non-nil and
                                                non-empty, only the clusters match this filter
                                                will be selected.
                                              properties:
                                                matchExpressions:
                                                  description: A list of field selector requirements.
                                                  items:
                                                    description: A node selector requirement
                                                      is a selector that contains values,
                                                      a key, and an operator that relates
                                                      the key and values.
                                                    properties:
                                                      key:
                                                        description: The label key that the
                                                          selector applies to.
                                                        type: string
                                                      operator:
                                                        description: Represents a key's relationship
                                                          to a set of values. Valid operators
                                                          are In, NotIn, Exists, DoesNotExist.
                                                          Gt, and Lt.
                                                        type: string
                                                      values:
                                                        description: An array of string values.
                                                          If the operator is In or NotIn,
                                                          the values array must be non-empty.
                                                          If the operator is Exists or DoesNotExist,
                                                          the values array must be empty.
                                                          If the operator is Gt or Lt, the
                                                          values array must have a single
                                                          element, which will be interpreted
                                                          as an integer. This array is replaced
                                                          during a strategic merge patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                              type: object
                                            labelSelector:
                                              description: LabelSelector is a filter to select
                                                member clusters by labels. If non-nil and
                                                non-empty, only the clusters match this filter
                                                will be selected.
                                              properties:
                                                matchExpressions:
                                                  description: matchExpressions is a list
                                                    of label selector requirements. The requirements
                                                    are ANDed.
                                                  items:
                                                    description: A label selector requirement
                                                      is a selector that contains values,
                                                      a key, and an operator that relates
                                                      the key and values.
                                                    properties:
                                                      key:
                                                        description: key is the label key
                                                          that the selector applies to.
                                                        type: string
                                                      operator:
                                                        description: operator represents a
                                                          key's relationship to a set of values.
                                                          Valid operators are In, NotIn, Exists
                                                          and DoesNotExist.
                                                        type: string
                                                      values:
                                                        description: values is an array of
                                                          string values. If the operator is
                                                          In or NotIn, the values array must
                                                          be non-empty. If the operator is
                                                          Exists or DoesNotExist, the values
                                                          array must be empty. This array
                                                          is replaced during a strategic merge
                                                          patch.
                                                        items:
                                                          type: string
                                                        type: array
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  description: matchLabels is a map of {key,value}
                                                    pairs. A single {key,value} in the matchLabels
                                                    map is equivalent to an element of matchExpressions,
                                                    whose key field is "key", the operator
                                                    is "In", and the values array contains
                                                    only "value". The requirements are ANDed.
                                                  type: object
                                              type: object
                                          type: object
                                        weight:
                                          description: Weight expressing the preference to
                                            the cluster(s) specified by 'TargetCluster'.
                                          format: int64
                                          minimum: 1
                                          type: integer
                                      required:
                                      - targetCluster
                                      - weight
                                      type: object
                                    type: array
                                type: object
                            type: object
                          spreadConstraints:
                            description: SpreadConstraints represents a list of the scheduling
                              constraints.
                            items:
                              description: SpreadConstraint represents the spread constraints
                                on resources.
                              properties:
                                maxGroups:
                                  description: MaxGroups restricts the maximum number of cluster
                                    groups to be selected.
                                  type: integer
                                minGroups:
                                  description: MinGroups restricts the minimum number of cluster
                                    groups to be selected. Defaults to 1.
                                  type: integer
                                spreadByField:
                                  description: 'SpreadByField represents the fields on Karmada
                                    cluster API used for dynamically grouping member clusters
                                    into different groups. Resources will be spread among
                                    different cluster groups. Available fields for spreading
                                    are: cluster, region, zone, and provider. SpreadByField
                                    should not co-exist with SpreadByLabel. If both SpreadByField
                                    and SpreadByLabel are empty, SpreadByField will be set
                                    to "cluster" by system.'
                                  enum:
                                  - cluster
                                  - region
                                  - zone
                                  - provider
                                  type: string
                                spreadByLabel:
                                  description: SpreadByLabel represents the label key used
                                    for grouping member clusters into different groups. Resources
                                    will be spread among different cluster groups. SpreadByLabel
                                    should not co-exist with SpreadByField.
                                  type: string
                              type: object
                            type: array
                        type: object
                      propagateDeps:
                        description: "PropagateDeps tells if relevant resources should be
                          propagated automatically. Take 'Deployment' which referencing 'ConfigMap'
                          and 'Secret' as an example, when 'propagateDeps' is 'true', the
                          referencing resources could be omitted(for saving config effort)
                          from 'resourceSelectors' as they will be propagated along with the
                          Deployment. In addition to the propagating process, the referencing
                          resources will be migrated along with the Deployment in the fail-over
                          scenario. \n Defaults to false."
                        type: boolean
                      resourceSelectors:
                        description: ResourceSelectors used to select resources.
                        items:
                          description: ResourceSelector the resources will be selected.
                          properties:
                            apiVersion:
                              description: APIVersion represents the API version of the target
                                resources.
                              type: string
                            kind:
                              description: Kind represents the Kind of the target resources.
                              type: string
                            labelSelector:
                              description: A label query over a set of resources. If name
                                is not empty, labelSelector will be ignored.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector
                                    requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector
                                      that contains values, a key, and an operator that relates
                                      the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are In, NotIn,
                                          Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values.
                                          If the operator is In or NotIn, the values array
                                          must be non-empty. If the operator is Exists or
                                          DoesNotExist, the values array must be empty. This
                                          array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs.
                                    A single {key,value} in the matchLabels map is equivalent
                                    to an element of matchExpressions, whose key field is
                                    "key", the operator is "In", and the values array contains
                                    only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            name:
                              description: Name of the target resource. Default is empty,
                                which means selecting all resources.
                              type: string
                            namespace:
                              description: Namespace of the target resource. Default is empty,
                                which means inherit from the parent object scope.
                              type: string
                          required:
                          - apiVersion
                          - kind
                          type: object
                        type: array
                      schedulerName:
                        description: SchedulerName represents which scheduler to proceed the
                          scheduling. If specified, the policy will be dispatched by specified
                          scheduler. If not specified, the policy will be dispatched by default
                          scheduler.
                        type: string
                    required:
                    - resourceSelectors
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      work.karmada.io_clusterresourcebindings.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: clusterresourcebindings.work.karmada.io
        spec:
          group: work.karmada.io
          names:
            categories:
            - karmada-io
            kind: ClusterResourceBinding
            listKind: ClusterResourceBindingList
            plural: clusterresourcebindings
            shortNames:
            - crb
            singular: clusterresourcebinding
          scope: Cluster
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: ClusterResourceBinding represents a binding of a kubernetes resource
                  with a ClusterPropagationPolicy.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior.
                    properties:
                      clusters:
                        description: Clusters represents target member clusters where the
                          resource to be deployed.
                        items:
                          description: TargetCluster represents the identifier of a member
                            cluster.
                          properties:
                            name:
                              description: Name of target cluster.
                              type: string
                            replicas:
                              description: Replicas in target cluster
                              format: int32
                              type: integer
                          required:
                          - name
                          type: object
                        type: array
                      resource:
                        description: Resource represents the Kubernetes resource to be propagated.
                        properties:
                          apiVersion:
                            description: APIVersion represents the API version of the referent.
                            type: string
                          kind:
                            description: Kind represents the Kind of the referent.
                            type: string
                          name:
                            description: Name represents the name of the referent.
                            type: string
                          namespace:
                            description: Namespace represents the namespace for the referent.
                              For non-namespace scoped resources(e.g. 'ClusterRole')，do not
                              need specify Namespace, and for namespace scoped resources,
                              Namespace is required. If Namespace is not specified, means
                              the resource is non-namespace scoped.
                            type: string
                          replicas:
                            description: Replicas represents the replica number of the referencing
                              resource.
                            format: int32
                            type: integer
                          resourcePerReplicas:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ReplicaResourceRequirements represents the resources
                              required by each replica.
                            type: object
                          resourceVersion:
                            description: ResourceVersion represents the internal version of
                              the referenced object, that can be used by clients to determine
                              when object has changed.
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        type: object
                    required:
                    - resource
                    type: object
                  status:
                    description: Status represents the most recently observed status of the
                      ResourceBinding.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus represents status list of the resource
                          running in each member cluster.
                        items:
                          description: AggregatedStatusItem represents status of the resource
                            running in a member cluster.
                          properties:
                            applied:
                              description: Applied represents if the resource referencing
                                by ResourceBinding or ClusterResourceBinding is successfully
                                applied on the cluster.
                              type: boolean
                            appliedMessage:
                              description: AppliedMessage is a human readable message indicating
                                details about the applied status. This is usually holds the
                                error message in case of apply failed.
                              type: string
                            clusterName:
                              description: ClusterName represents the member cluster name
                                which the resource deployed on.
                              type: string
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - clusterName
                          type: object
                        type: array
                      conditions:
                        description: Conditions contain the different condition statuses.
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: false
            subresources:
              status: {}
          - additionalPrinterColumns:
            - jsonPath: .status.conditions[?(@.type=="Scheduled")].status
              name: Scheduled
              type: string
            - jsonPath: .status.conditions[?(@.type=="FullyApplied")].status
              name: FullyApplied
              type: string
            - jsonPath: .metadata.creationTimestamp
              name: Age
              type: date
            name: v1alpha2
            schema:
              openAPIV3Schema:
                description: ClusterResourceBinding represents a binding of a kubernetes resource
                  with a ClusterPropagationPolicy.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior.
                    properties:
                      clusters:
                        description: Clusters represents target member clusters where the
                          resource to be deployed.
                        items:
                          description: TargetCluster represents the identifier of a member
                            cluster.
                          properties:
                            name:
                              description: Name of target cluster.
                              type: string
                            replicas:
                              description: Replicas in target cluster
                              format: int32
                              type: integer
                          required:
                          - name
                          type: object
                        type: array
                      gracefulEvictionTasks:
                        description: 'GracefulEvictionTasks holds the eviction tasks that
                          are expected to perform the eviction in a graceful way. The intended
                          workflow is: 1. Once the controller(such as ''taint-manager'') decided
                          to evict the resource that is referenced by current ResourceBinding
                          or ClusterResourceBinding from a target cluster, it removes(or scale
                          down the replicas) the target from Clusters(.spec.Clusters) and
                          builds a graceful eviction task. 2. The scheduler may perform a
                          re-scheduler and probably select a substitute cluster to take over
                          the evicting workload(resource). 3. The graceful eviction controller
                          takes care of the graceful eviction tasks and performs the final
                          removal after the workload(resource) is available on the substitute
                          cluster or exceed the grace termination period(defaults to 10 minutes).'
                        items:
                          description: GracefulEvictionTask represents a graceful eviction
                            task.
                          properties:
                            creationTimestamp:
                              description: "CreationTimestamp is a timestamp representing
                                the server time when this object was created. Clients should
                                not set this value to avoid the time inconsistency issue.
                                It is represented in RFC3339 form(like '2021-04-25T10:02:10Z')
                                and is in UTC. \n Populated by the system. Read-only."
                              format: date-time
                              type: string
                            fromCluster:
                              description: FromCluster which cluster the eviction perform
                                from.
                              type: string
                            message:
                              description: Message is a human-readable message indicating
                                details about the eviction. This may be an empty string.
                              maxLength: 1024
                              type: string
                            producer:
                              description: Producer indicates the controller who triggered
                                the eviction.
                              type: string
                            reason:
                              description: Reason contains a programmatic identifier indicating
                                the reason for the eviction. Producers may define expected
                                values and meanings for this field, and whether the values
                                are considered a guaranteed API. The value should be a CamelCase
                                string. This field may not be empty.
                              maxLength: 32
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            replicas:
                              description: Replicas indicates the number of replicas should
                                be evicted. Should be ignored for resource type that doesn't
                                have replica.
                              format: int32
                              type: integer
                          required:
                          - fromCluster
                          - producer
                          - reason
                          type: object
                        type: array
                      propagateDeps:
                        description: PropagateDeps tells if relevant resources should be propagated
                          automatically. It is inherited from PropagationPolicy or ClusterPropagationPolicy.
                          default false.
                        type: boolean
                      replicaRequirements:
                        description: ReplicaRequirements represents the requirements required
                          by each replica.
                        properties:
                          nodeClaim:
                            description: NodeClaim represents the node claim HardNodeAffinity,
                              NodeSelector and Tolerations required by each replica.
                            properties:
                              hardNodeAffinity:
                                description: A node selector represents the union of the results
                                  of one or more label queries over a set of nodes; that is,
                                  it represents the OR of the selectors represented by the
                                  node selector terms. Note that only PodSpec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution
                                  is included here because it has a hard limit on pod scheduling.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector terms.
                                      The terms are ORed.
                                    items:
                                      description: A null or empty node selector term matches
                                        no objects. The requirements of them are ANDed. The
                                        TopologySelectorTerm type implements a subset of the
                                        NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement is a
                                              selector that contains values, a key, and an
                                              operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators are
                                                  In, NotIn, Exists, DoesNotExist. Gt, and
                                                  Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If
                                                  the operator is In or NotIn, the values
                                                  array must be non-empty. If the operator
                                                  is Exists or DoesNotExist, the values array
                                                  must be empty. If the operator is Gt or
                                                  Lt, the values array must have a single
                                                  element, which will be interpreted as an
                                                  integer. This array is replaced during a
                                                  strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement is a
                                              selector that contains values, a key, and an
                                              operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators are
                                                  In, NotIn, Exists, DoesNotExist. Gt, and
                                                  Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If
                                                  the operator is In or NotIn, the values
                                                  array must be non-empty. If the operator
                                                  is Exists or DoesNotExist, the values array
                                                  must be empty. If the operator is Gt or
                                                  Lt, the values array must have a single
                                                  element, which will be interpreted as an
                                                  integer. This array is replaced during a
                                                  strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                              nodeSelector:
                                additionalProperties:
                                  type: string
                                description: NodeSelector is a selector which must be true
                                  for the pod to fit on a node. Selector which must match
                                  a node's labels for the pod to be scheduled on that node.
                                type: object
                              tolerations:
                                description: If specified, the pod's tolerations.
                                items:
                                  description: The pod this Toleration is attached to tolerates
                                    any taint that matches the triple <key,value,effect> using
                                    the matching operator <operator>.
                                  properties:
                                    effect:
                                      description: Effect indicates the taint effect to match.
                                        Empty means match all taint effects. When specified,
                                        allowed values are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Key is the taint key that the toleration
                                        applies to. Empty means match all taint keys. If the
                                        key is empty, operator must be Exists; this combination
                                        means to match all values and all keys.
                                      type: string
                                    operator:
                                      description: Operator represents a key's relationship
                                        to the value. Valid operators are Exists and Equal.
                                        Defaults to Equal. Exists is equivalent to wildcard
                                        for value, so that a pod can tolerate all taints of
                                        a particular category.
                                      type: string
                                    tolerationSeconds:
                                      description: TolerationSeconds represents the period
                                        of time the toleration (which must be of effect NoExecute,
                                        otherwise this field is ignored) tolerates the taint.
                                        By default, it is not set, which means tolerate the
                                        taint forever (do not evict). Zero and negative values
                                        will be treated as 0 (evict immediately) by the system.
                                      format: int64
                                      type: integer
                                    value:
                                      description: Value is the taint value the toleration
                                        matches to. If the operator is Exists, the value should
                                        be empty, otherwise just a regular string.
                                      type: string
                                  type: object
                                type: array
                            type: object
                          resourceRequest:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ResourceRequest represents the resources required
                              by each replica.
                            type: object
                        type: object
                      replicas:
                        description: Replicas represents the replica number of the referencing
                          resource.
                        format: int32
                        type: integer
                      requiredBy:
                        description: RequiredBy represents the list of Bindings that depend
                          on the referencing resource.
                        items:
                          description: BindingSnapshot is a snapshot of a ResourceBinding
                            or ClusterResourceBinding.
                          properties:
                            clusters:
                              description: Clusters represents the scheduled result.
                              items:
                                description: TargetCluster represents the identifier of a
                                  member cluster.
                                properties:
                                  name:
                                    description: Name of target cluster.
                                    type: string
                                  replicas:
                                    description: Replicas in target cluster
                                    format: int32
                                    type: integer
                                required:
                                - name
                                type: object
                              type: array
                            name:
                              description: Name represents the name of the Binding.
                              type: string
                            namespace:
                              description: Namespace represents the namespace of the Binding.
                                It is required for ResourceBinding. If Namespace is not specified,
                                means the referencing is ClusterResourceBinding.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                      resource:
                        description: Resource represents the Kubernetes resource to be propagated.
                        properties:
                          apiVersion:
                            description: APIVersion represents the API version of the referent.
                            type: string
                          kind:
                            description: Kind represents the Kind of the referent.
                            type: string
                          name:
                            description: Name represents the name of the referent.
                            type: string
                          namespace:
                            description: Namespace represents the namespace for the referent.
                              For non-namespace scoped resources(e.g. 'ClusterRole')，do not
                              need specify Namespace, and for namespace scoped resources,
                              Namespace is required. If Namespace is not specified, means
                              the resource is non-namespace scoped.
                            type: string
                          resourceVersion:
                            description: ResourceVersion represents the internal version of
                              the referenced object, that can be used by clients to determine
                              when object has changed.
                            type: string
                          uid:
                            description: UID of the referent.
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        type: object
                    required:
                    - resource
                    type: object
                  status:
                    description: Status represents the most recently observed status of the
                      ResourceBinding.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus represents status list of the resource
                          running in each member cluster.
                        items:
                          description: AggregatedStatusItem represents status of the resource
                            running in a member cluster.
                          properties:
                            applied:
                              description: Applied represents if the resource referencing
                                by ResourceBinding or ClusterResourceBinding is successfully
                                applied on the cluster.
                              type: boolean
                            appliedMessage:
                              description: AppliedMessage is a human readable message indicating
                                details about the applied status. This is usually holds the
                                error message in case of apply failed.
                              type: string
                            clusterName:
                              description: ClusterName represents the member cluster name
                                which the resource deployed on.
                              type: string
                            health:
                              description: Health represents the healthy state of the current
                                resource. There maybe different rules for different resources
                                to achieve health status.
                              enum:
                              - Healthy
                              - Unhealthy
                              - Unknown
                              type: string
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - clusterName
                          type: object
                        type: array
                      conditions:
                        description: Conditions contain the different condition statuses.
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                      schedulerObservedGeneration:
                        description: SchedulerObservedGeneration is the generation(.metadata.generation)
                          observed by the scheduler. If SchedulerObservedGeneration is less
                          than the generation in metadata means the scheduler hasn't confirmed
                          the scheduling result or hasn't done the schedule yet.
                        format: int64
                        type: integer
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      work.karmada.io_resourcebindings.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: resourcebindings.work.karmada.io
        spec:
          group: work.karmada.io
          names:
            categories:
            - karmada-io
            kind: ResourceBinding
            listKind: ResourceBindingList
            plural: resourcebindings
            shortNames:
            - rb
            singular: resourcebinding
          scope: Namespaced
          versions:
          - name: v1alpha1
            schema:
              openAPIV3Schema:
                description: ResourceBinding represents a binding of a kubernetes resource
                  with a propagation policy.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior.
                    properties:
                      clusters:
                        description: Clusters represents target member clusters where the
                          resource to be deployed.
                        items:
                          description: TargetCluster represents the identifier of a member
                            cluster.
                          properties:
                            name:
                              description: Name of target cluster.
                              type: string
                            replicas:
                              description: Replicas in target cluster
                              format: int32
                              type: integer
                          required:
                          - name
                          type: object
                        type: array
                      resource:
                        description: Resource represents the Kubernetes resource to be propagated.
                        properties:
                          apiVersion:
                            description: APIVersion represents the API version of the referent.
                            type: string
                          kind:
                            description: Kind represents the Kind of the referent.
                            type: string
                          name:
                            description: Name represents the name of the referent.
                            type: string
                          namespace:
                            description: Namespace represents the namespace for the referent.
                              For non-namespace scoped resources(e.g. 'ClusterRole')，do not
                              need specify Namespace, and for namespace scoped resources,
                              Namespace is required. If Namespace is not specified, means
                              the resource is non-namespace scoped.
                            type: string
                          replicas:
                            description: Replicas represents the replica number of the referencing
                              resource.
                            format: int32
                            type: integer
                          resourcePerReplicas:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ReplicaResourceRequirements represents the resources
                              required by each replica.
                            type: object
                          resourceVersion:
                            description: ResourceVersion represents the internal version of
                              the referenced object, that can be used by clients to determine
                              when object has changed.
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        type: object
                    required:
                    - resource
                    type: object
                  status:
                    description: Status represents the most recently observed status of the
                      ResourceBinding.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus represents status list of the resource
                          running in each member cluster.
                        items:
                          description: AggregatedStatusItem represents status of the resource
                            running in a member cluster.
                          properties:
                            applied:
                              description: Applied represents if the resource referencing
                                by ResourceBinding or ClusterResourceBinding is successfully
                                applied on the cluster.
                              type: boolean
                            appliedMessage:
                              description: AppliedMessage is a human readable message indicating
                                details about the applied status. This is usually holds the
                                error message in case of apply failed.
                              type: string
                            clusterName:
                              description: ClusterName represents the member cluster name
                                which the resource deployed on.
                              type: string
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - clusterName
                          type: object
                        type: array
                      conditions:
                        description: Conditions contain the different condition statuses.
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: false
            subresources:
              status: {}
          - additionalPrinterColumns:
            - jsonPath: .status.conditions[?(@.type=="Scheduled")].status
              name: Scheduled
              type: string
            - jsonPath: .status.conditions[?(@.type=="FullyApplied")].status
              name: FullyApplied
              type: string
            - jsonPath: .metadata.creationTimestamp
              name: Age
              type: date
            name: v1alpha2
            schema:
              openAPIV3Schema:
                description: ResourceBinding represents a binding of a kubernetes resource
                  with a propagation policy.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior.
                    properties:
                      clusters:
                        description: Clusters represents target member clusters where the
                          resource to be deployed.
                        items:
                          description: TargetCluster represents the identifier of a member
                            cluster.
                          properties:
                            name:
                              description: Name of target cluster.
                              type: string
                            replicas:
                              description: Replicas in target cluster
                              format: int32
                              type: integer
                          required:
                          - name
                          type: object
                        type: array
                      gracefulEvictionTasks:
                        description: 'GracefulEvictionTasks holds the eviction tasks that
                          are expected to perform the eviction in a graceful way. The intended
                          workflow is: 1. Once the controller(such as ''taint-manager'') decided
                          to evict the resource that is referenced by current ResourceBinding
                          or ClusterResourceBinding from a target cluster, it removes(or scale
                          down the replicas) the target from Clusters(.spec.Clusters) and
                          builds a graceful eviction task. 2. The scheduler may perform a
                          re-scheduler and probably select a substitute cluster to take over
                          the evicting workload(resource). 3. The graceful eviction controller
                          takes care of the graceful eviction tasks and performs the final
                          removal after the workload(resource) is available on the substitute
                          cluster or exceed the grace termination period(defaults to 10 minutes).'
                        items:
                          description: GracefulEvictionTask represents a graceful eviction
                            task.
                          properties:
                            creationTimestamp:
                              description: "CreationTimestamp is a timestamp representing
                                the server time when this object was created. Clients should
                                not set this value to avoid the time inconsistency issue.
                                It is represented in RFC3339 form(like '2021-04-25T10:02:10Z')
                                and is in UTC. \n Populated by the system. Read-only."
                              format: date-time
                              type: string
                            fromCluster:
                              description: FromCluster which cluster the eviction perform
                                from.
                              type: string
                            message:
                              description: Message is a human-readable message indicating
                                details about the eviction. This may be an empty string.
                              maxLength: 1024
                              type: string
                            producer:
                              description: Producer indicates the controller who triggered
                                the eviction.
                              type: string
                            reason:
                              description: Reason contains a programmatic identifier indicating
                                the reason for the eviction. Producers may define expected
                                values and meanings for this field, and whether the values
                                are considered a guaranteed API. The value should be a CamelCase
                                string. This field may not be empty.
                              maxLength: 32
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            replicas:
                              description: Replicas indicates the number of replicas should
                                be evicted. Should be ignored for resource type that doesn't
                                have replica.
                              format: int32
                              type: integer
                          required:
                          - fromCluster
                          - producer
                          - reason
                          type: object
                        type: array
                      propagateDeps:
                        description: PropagateDeps tells if relevant resources should be propagated
                          automatically. It is inherited from PropagationPolicy or ClusterPropagationPolicy.
                          default false.
                        type: boolean
                      replicaRequirements:
                        description: ReplicaRequirements represents the requirements required
                          by each replica.
                        properties:
                          nodeClaim:
                            description: NodeClaim represents the node claim HardNodeAffinity,
                              NodeSelector and Tolerations required by each replica.
                            properties:
                              hardNodeAffinity:
                                description: A node selector represents the union of the results
                                  of one or more label queries over a set of nodes; that is,
                                  it represents the OR of the selectors represented by the
                                  node selector terms. Note that only PodSpec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution
                                  is included here because it has a hard limit on pod scheduling.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector terms.
                                      The terms are ORed.
                                    items:
                                      description: A null or empty node selector term matches
                                        no objects. The requirements of them are ANDed. The
                                        TopologySelectorTerm type implements a subset of the
                                        NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement is a
                                              selector that contains values, a key, and an
                                              operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators are
                                                  In, NotIn, Exists, DoesNotExist. Gt, and
                                                  Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If
                                                  the operator is In or NotIn, the values
                                                  array must be non-empty. If the operator
                                                  is Exists or DoesNotExist, the values array
                                                  must be empty. If the operator is Gt or
                                                  Lt, the values array must have a single
                                                  element, which will be interpreted as an
                                                  integer. This array is replaced during a
                                                  strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement is a
                                              selector that contains values, a key, and an
                                              operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators are
                                                  In, NotIn, Exists, DoesNotExist. Gt, and
                                                  Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If
                                                  the operator is In or NotIn, the values
                                                  array must be non-empty. If the operator
                                                  is Exists or DoesNotExist, the values array
                                                  must be empty. If the operator is Gt or
                                                  Lt, the values array must have a single
                                                  element, which will be interpreted as an
                                                  integer. This array is replaced during a
                                                  strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                              nodeSelector:
                                additionalProperties:
                                  type: string
                                description: NodeSelector is a selector which must be true
                                  for the pod to fit on a node. Selector which must match
                                  a node's labels for the pod to be scheduled on that node.
                                type: object
                              tolerations:
                                description: If specified, the pod's tolerations.
                                items:
                                  description: The pod this Toleration is attached to tolerates
                                    any taint that matches the triple <key,value,effect> using
                                    the matching operator <operator>.
                                  properties:
                                    effect:
                                      description: Effect indicates the taint effect to match.
                                        Empty means match all taint effects. When specified,
                                        allowed values are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Key is the taint key that the toleration
                                        applies to. Empty means match all taint keys. If the
                                        key is empty, operator must be Exists; this combination
                                        means to match all values and all keys.
                                      type: string
                                    operator:
                                      description: Operator represents a key's relationship
                                        to the value. Valid operators are Exists and Equal.
                                        Defaults to Equal. Exists is equivalent to wildcard
                                        for value, so that a pod can tolerate all taints of
                                        a particular category.
                                      type: string
                                    tolerationSeconds:
                                      description: TolerationSeconds represents the period
                                        of time the toleration (which must be of effect NoExecute,
                                        otherwise this field is ignored) tolerates the taint.
                                        By default, it is not set, which means tolerate the
                                        taint forever (do not evict). Zero and negative values
                                        will be treated as 0 (evict immediately) by the system.
                                      format: int64
                                      type: integer
                                    value:
                                      description: Value is the taint value the toleration
                                        matches to. If the operator is Exists, the value should
                                        be empty, otherwise just a regular string.
                                      type: string
                                  type: object
                                type: array
                            type: object
                          resourceRequest:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ResourceRequest represents the resources required
                              by each replica.
                            type: object
                        type: object
                      replicas:
                        description: Replicas represents the replica number of the referencing
                          resource.
                        format: int32
                        type: integer
                      requiredBy:
                        description: RequiredBy represents the list of Bindings that depend
                          on the referencing resource.
                        items:
                          description: BindingSnapshot is a snapshot of a ResourceBinding
                            or ClusterResourceBinding.
                          properties:
                            clusters:
                              description: Clusters represents the scheduled result.
                              items:
                                description: TargetCluster represents the identifier of a
                                  member cluster.
                                properties:
                                  name:
                                    description: Name of target cluster.
                                    type: string
                                  replicas:
                                    description: Replicas in target cluster
                                    format: int32
                                    type: integer
                                required:
                                - name
                                type: object
                              type: array
                            name:
                              description: Name represents the name of the Binding.
                              type: string
                            namespace:
                              description: Namespace represents the namespace of the Binding.
                                It is required for ResourceBinding. If Namespace is not specified,
                                means the referencing is ClusterResourceBinding.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                      resource:
                        description: Resource represents the Kubernetes resource to be propagated.
                        properties:
                          apiVersion:
                            description: APIVersion represents the API version of the referent.
                            type: string
                          kind:
                            description: Kind represents the Kind of the referent.
                            type: string
                          name:
                            description: Name represents the name of the referent.
                            type: string
                          namespace:
                            description: Namespace represents the namespace for the referent.
                              For non-namespace scoped resources(e.g. 'ClusterRole')，do not
                              need specify Namespace, and for namespace scoped resources,
                              Namespace is required. If Namespace is not specified, means
                              the resource is non-namespace scoped.
                            type: string
                          resourceVersion:
                            description: ResourceVersion represents the internal version of
                              the referenced object, that can be used by clients to determine
                              when object has changed.
                            type: string
                          uid:
                            description: UID of the referent.
                            type: string
                        required:
                        - apiVersion
                        - kind
                        - name
                        type: object
                    required:
                    - resource
                    type: object
                  status:
                    description: Status represents the most recently observed status of the
                      ResourceBinding.
                    properties:
                      aggregatedStatus:
                        description: AggregatedStatus represents status list of the resource
                          running in each member cluster.
                        items:
                          description: AggregatedStatusItem represents status of the resource
                            running in a member cluster.
                          properties:
                            applied:
                              description: Applied represents if the resource referencing
                                by ResourceBinding or ClusterResourceBinding is successfully
                                applied on the cluster.
                              type: boolean
                            appliedMessage:
                              description: AppliedMessage is a human readable message indicating
                                details about the applied status. This is usually holds the
                                error message in case of apply failed.
                              type: string
                            clusterName:
                              description: ClusterName represents the member cluster name
                                which the resource deployed on.
                              type: string
                            health:
                              description: Health represents the healthy state of the current
                                resource. There maybe different rules for different resources
                                to achieve health status.
                              enum:
                              - Healthy
                              - Unhealthy
                              - Unknown
                              type: string
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - clusterName
                          type: object
                        type: array
                      conditions:
                        description: Conditions contain the different condition statuses.
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                      schedulerObservedGeneration:
                        description: SchedulerObservedGeneration is the generation(.metadata.generation)
                          observed by the scheduler. If SchedulerObservedGeneration is less
                          than the generation in metadata means the scheduler hasn't confirmed
                          the scheduling result or hasn't done the schedule yet.
                        format: int64
                        type: integer
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
      
      work.karmada.io_works.yaml:  |-
        ---
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          annotations:
            controller-gen.kubebuilder.io/version: v0.8.0
          creationTimestamp: null
          name: works.work.karmada.io
        spec:
          group: work.karmada.io
          names:
            categories:
            - karmada-io
            kind: Work
            listKind: WorkList
            plural: works
            singular: work
          scope: Namespaced
          versions:
          - additionalPrinterColumns:
            - jsonPath: .status.conditions[?(@.type=="Applied")].status
              name: Applied
              type: string
            - jsonPath: .metadata.creationTimestamp
              name: Age
              type: date
            name: v1alpha1
            schema:
              openAPIV3Schema:
                description: Work defines a list of resources to be deployed on the member
                  cluster.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation
                      of an object. Servers should convert recognized schemas to the latest
                      internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource this
                      object represents. Servers may infer this from the endpoint the client
                      submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  metadata:
                    type: object
                  spec:
                    description: Spec represents the desired behavior of Work.
                    properties:
                      workload:
                        description: Workload represents the manifest workload to be deployed
                          on managed cluster.
                        properties:
                          manifests:
                            description: Manifests represents a list of Kubernetes resources
                              to be deployed on the managed cluster.
                            items:
                              description: Manifest represents a resource to be deployed on
                                managed cluster.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                            type: array
                        type: object
                    type: object
                  status:
                    description: Status represents the status of PropagationStatus.
                    properties:
                      conditions:
                        description: 'Conditions contain the different condition statuses
                          for this work. Valid condition types are: 1. Applied represents
                          workload in Work is applied successfully on a managed cluster. 2.
                          Progressing represents workload in Work is being applied on a managed
                          cluster. 3. Available represents workload in Work exists on the
                          managed cluster. 4. Degraded represents the current state of workload
                          does not match the desired state for a certain period.'
                        items:
                          description: "Condition contains details for one aspect of the current
                            state of this API Resource. --- This struct is intended for direct
                            use as an array at the field path .status.conditions.  For example,
                            type FooStatus struct{ // Represents the observations of a foo's
                            current state. // Known .status.conditions.type are: \"Available\",
                            \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                            // +listType=map // +listMapKey=type Conditions []metav1.Condition
                            `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                            protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition
                                transitioned from one status to another. This should be when
                                the underlying condition changed.  If that is not known, then
                                using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating
                                details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation
                                that the condition was set based upon. For instance, if .metadata.generation
                                is currently 12, but the .status.conditions[x].observedGeneration
                                is 9, the condition is out of date with respect to the current
                                state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating
                                the reason for the condition's last transition. Producers
                                of specific condition types may define expected values and
                                meanings for this field, and whether the values are considered
                                a guaranteed API. The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                                --- Many .condition.type values are consistent across resources
                                like Available, but because arbitrary conditions can be useful
                                (see .node.status.conditions), the ability to deconflict is
                                important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                      manifestStatuses:
                        description: ManifestStatuses contains running status of manifests
                          in spec.
                        items:
                          description: ManifestStatus contains running status of a specific
                            manifest in spec.
                          properties:
                            health:
                              description: Health represents the healthy state of the current
                                resource. There maybe different rules for different resources
                                to achieve health status.
                              enum:
                              - Healthy
                              - Unhealthy
                              - Unknown
                              type: string
                            identifier:
                              description: Identifier represents the identity of a resource
                                linking to manifests in spec.
                              properties:
                                group:
                                  description: Group is the group of the resource.
                                  type: string
                                kind:
                                  description: Kind is the kind of the resource.
                                  type: string
                                name:
                                  description: Name is the name of the resource
                                  type: string
                                namespace:
                                  description: Namespace is the namespace of the resource,
                                    the resource is cluster scoped if the value is empty
                                  type: string
                                ordinal:
                                  description: Ordinal represents an index in manifests list,
                                    so the condition can still be linked to a manifest even
                                    though manifest cannot be parsed successfully.
                                  type: integer
                                resource:
                                  description: Resource is the resource type of the resource
                                  type: string
                                version:
                                  description: Version is the version of the resource.
                                  type: string
                              required:
                              - kind
                              - name
                              - ordinal
                              - resource
                              - version
                              type: object
                            status:
                              description: Status reflects running status of current manifest.
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                          - identifier
                          type: object
                        type: array
                    type: object
                required:
                - spec
                type: object
            served: true
            storage: true
            subresources:
              status: {}
        status:
          acceptedNames:
            kind: ""
            plural: ""
          conditions: []
          storedVersions: []
        
      
  crds-patches-configmaps.yaml: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: karmada-system-crds-patches
      namespace: karmada-system
    data:
      webhook_in_clusterresourcebindings.yaml:  |-
        
        
        ---
        # The following patch enables conversion webhook for CRD
        # CRD conversion requires k8s 1.13 or later.
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          name: clusterresourcebindings.work.karmada.io
        spec:
          conversion:
            strategy: Webhook
            webhook:
              clientConfig:
                url: https://karmada-system-webhook.karmada-system.svc:443/convert
                
                caBundle: {{ ca_crt }}
              conversionReviewVersions: ["v1"]
        ---
      webhook_in_resourcebindings.yaml:  |-
        
        
        ---
        # The following patch enables conversion webhook for CRD
        # CRD conversion requires k8s 1.13 or later.
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          name: resourcebindings.work.karmada.io
        spec:
          conversion:
            strategy: Webhook
            webhook:
              clientConfig:
                url: https://karmada-system-webhook.karmada-system.svc:443/convert
                
                caBundle: {{ ca_crt }}
              conversionReviewVersions: ["v1"]
        ---
---
# Source: karmada-system/charts/karmada/templates/pre-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: karmada-system-pre-job
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
rules:
  - apiGroups: ['*']
    resources: ['*']
    verbs: ["get", "watch", "list", "create", "update", "patch", "delete"]
  - nonResourceURLs: ['*']
    verbs: ["get"]
---
# Source: karmada-system/charts/karmada/templates/pre-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: karmada-system-pre-job
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karmada-system-pre-job
subjects:
  - kind: ServiceAccount
    name: karmada-system-pre-job
    namespace: karmada-system
---
## Source: karmada-system/charts/karmada/templates/post-delete-job.yaml
#apiVersion: batch/v1
#kind: Job
#metadata:
#  name: "karmada-system-post-delete"
#  namespace: karmada-system
#  labels:
#    helm.sh/chart: "karmada-v1.3.0"
#  annotations:
#    # This is what defines this resource as a hook. Without this line, the
#    # job is considered part of the release.
#    "helm.sh/hook": post-delete
#    "helm.sh/hook-weight": "0"
#    "helm.sh/hook-delete-policy": hook-succeeded
#spec:
#  parallelism: 1
#  completions: 1
#  template:
#    metadata:
#      name: karmada-system
#      labels:
#        helm.sh/chart: "karmada-v1.3.0"
#    spec:
#      serviceAccountName: karmada-system-pre-job
#      restartPolicy: Never
#      containers:
#        - name: post-delete
#          image: docker.io/bitnami/kubectl:latest
#          imagePullPolicy: IfNotPresent
#          command:
#            - /bin/sh
#            - -c
#            - |
#              bash <<'EOF'
#              set -ex
#              kubectl delete -f /opt/mount/
#              kubectl delete cm/karmada-system-config -n karmada-system
#              EOF
#          volumeMounts:
#            - name: mount
#              mountPath: /opt/mount
#      volumes:
#        - name: mount
#          configMap:
#            name: karmada-system-config
#---
# Source: karmada-system/charts/karmada/templates/post-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "karmada-system-post-install"
  namespace: karmada-system
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "karmada-system"
    app.kubernetes.io/version: v1.1.0
    helm.sh/chart: "karmada-v1.3.0"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  parallelism: 1
  completions: 1
  template:
    metadata:
      name: karmada-system
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "karmada-system"
        helm.sh/chart: "karmada-v1.3.0"
    spec:
      restartPolicy: Never
      containers:
      - name: post-install
        image: docker.io/bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - |
          bash <<'EOF'
          set -ex
          kubectl apply -k /crds --kubeconfig /etc/kubeconfig
          kubectl apply -f /static-resources --kubeconfig /etc/kubeconfig
          EOF
        volumeMounts:
          - name: karmada-system-crds-bases
            mountPath: /crds/bases
          - name: karmada-system-crds-patches
            mountPath: /crds/patches
          - name: karmada-system-crds
            mountPath: /crds
          - name: karmada-system-static-resources
            mountPath: /static-resources
          
          - name: kubeconfig-secret
            subPath: kubeconfig
            mountPath: /etc/kubeconfig
      volumes:
        - name: karmada-system-crds-bases
          configMap:
            name: karmada-system-crds-bases
        - name: karmada-system-crds-patches
          configMap:
            name: karmada-system-crds-patches
        - name: karmada-system-crds
          configMap:
            name: karmada-system-crds
        - name: karmada-system-static-resources
          configMap:
            name: karmada-system-static-resources
        
        - name: kubeconfig-secret
          secret:
            secretName: karmada-system-kubeconfig
---
# Source: karmada-system/charts/karmada/templates/pre-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "karmada-system-pre-install"
  namespace: karmada-system
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  parallelism: 1
  completions: 1
  template:
    metadata:
      name: karmada-system
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "karmada-system"
        helm.sh/chart: "karmada-v1.3.0"
    spec:
      serviceAccountName: karmada-system-pre-job
      restartPolicy: Never
      initContainers:
      - name: init
        image: docker.io/cfssl/cfssl:latest
        imagePullPolicy: IfNotPresent
        workingDir: /opt/mount
        command:
        - /bin/sh
        - -c
        - |
          bash <<'EOF'
          set -ex
          mkdir -p /opt/configs
          mkdir -p /opt/certs
          cp -r -L /opt/mount/* /opt/configs/
          openssl req -x509 -sha256 -new -nodes -days 365 -newkey rsa:2048 -keyout "/opt/certs/server-ca.key" -out "/opt/certs/server-ca.crt" -subj "/C=xx/ST=x/L=x/O=x/OU=x/CN=ca/emailAddress=x/"
          openssl req -x509 -sha256 -new -nodes -days 365 -newkey rsa:2048 -keyout "/opt/certs/front-proxy-ca.key" -out "/opt/certs/front-proxy-ca.crt" -subj "/C=xx/ST=x/L=x/O=x/OU=x/CN=ca/emailAddress=x/"
          echo '{"signing":{"default":{"expiry":"43800h","usages":["signing","key encipherment","client auth","server auth"]}}}' > "/opt/certs/server-ca-config.json"
          echo '{"CN":"system:admin","hosts":["kubernetes.default.svc","*.etcd.karmada-system.svc.cluster.local","*.karmada-system.svc.cluster.local","*.karmada-system.svc","localhost","127.0.0.1"],"names":[{"O":"system:masters"}],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -ca=/opt/certs/server-ca.crt -ca-key=/opt/certs/server-ca.key -config=/opt/certs/server-ca-config.json - | cfssljson -bare /opt/certs/karmada
          echo '{"signing":{"default":{"expiry":"43800h","usages":["signing","key encipherment","client auth","server auth"]}}}' > "/opt/certs/front-proxy-ca-config.json"
          echo '{"CN":"front-proxy-client","hosts":["kubernetes.default.svc","*.etcd.karmada-system.svc.cluster.local","*.karmada-system.svc.cluster.local","*.karmada-system.svc","localhost","127.0.0.1"],"names":[{"O":"system:masters"}],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -ca=/opt/certs/front-proxy-ca.crt -ca-key=/opt/certs/front-proxy-ca.key -config=/opt/certs/front-proxy-ca-config.json - | cfssljson -bare /opt/certs/front-proxy-client
          karmada_ca=$(base64 /opt/certs/server-ca.crt | tr -d '\r\n')
          karmada_ca_key=$(base64 /opt/certs/server-ca.key | tr -d '\r\n')
          karmada_crt=$(base64 /opt/certs/karmada.pem | tr -d '\r\n')
          karmada_key=$(base64 /opt/certs/karmada-key.pem | tr -d '\r\n')
          front_proxy_ca=$(base64 /opt/certs/front-proxy-ca.crt | tr -d '\r\n')
          front_proxy_client_crt=$(base64 /opt/certs/front-proxy-client.pem | tr -d '\r\n')
          front_proxy_client_key=$(base64 /opt/certs/front-proxy-client-key.pem | tr -d '\r\n')
          sed -i'' -e "s/{{ ca_crt }}/${karmada_ca}/g" /opt/configs/cert.yaml
          sed -i'' -e "s/{{ ca_key }}/${karmada_ca_key}/g" /opt/configs/cert.yaml
          sed -i'' -e "s/{{ crt }}/${karmada_crt}/g" /opt/configs/cert.yaml
          sed -i'' -e "s/{{ key }}/${karmada_key}/g" /opt/configs/cert.yaml
          sed -i'' -e "s/{{ front_proxy_ca_crt }}/${front_proxy_ca}/g" /opt/configs/cert.yaml
          sed -i'' -e "s/{{ front_proxy_crt }}/${front_proxy_client_crt}/g" /opt/configs/cert.yaml
          sed -i'' -e "s/{{ front_proxy_key }}/${front_proxy_client_key}/g" /opt/configs/cert.yaml
          sed -i'' -e "s/{{ ca_crt }}/${karmada_ca}/g" /opt/configs/kubeconfig.yaml
          sed -i'' -e "s/{{ crt }}/${karmada_crt}/g" /opt/configs/kubeconfig.yaml
          sed -i'' -e "s/{{ key }}/${karmada_key}/g" /opt/configs/kubeconfig.yaml
          sed -i'' -e "s/{{ crt }}/${karmada_crt}/g" /opt/configs/webhook-cert.yaml
          sed -i'' -e "s/{{ key }}/${karmada_key}/g" /opt/configs/webhook-cert.yaml
          sed -i'' -e "s/{{ ca_crt }}/${karmada_ca}/g" /opt/configs/static-resources-configmaps.yaml
          sed -i'' -e "s/{{ ca_crt }}/${karmada_ca}/g" /opt/configs/crds-patches-configmaps.yaml
          EOF
        volumeMounts:
        - name: mount
          mountPath: /opt/mount
        - name: configs
          mountPath: /opt/configs
      containers:
      - name: pre-install
        image: docker.io/bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        workingDir: /opt/mount
        command:
        - /bin/sh
        - -c
        - |
          bash <<'EOF'
          set -ex
          kubectl apply --server-side -f /opt/configs/
          EOF
        volumeMounts:
        - name: mount
          mountPath: /opt/mount
        - name: configs
          mountPath: /opt/configs
      volumes:
      - name: mount
        configMap:
          name: karmada-system-config
      - name: configs
        emptyDir: {}
